var searchIndex = {};
searchIndex["bitflags"] = {"doc":"A typesafe bitmask flag generator.","items":[[14,"bitflags","bitflags","The `bitflags!` macro generates a `struct` that holds a set of C-style bitmask flags. It is useful for creating typesafe wrappers for C APIs.",null,null]],"paths":[]};
searchIndex["charmhelpers"] = {"doc":"","items":[[0,"core","charmhelpers","",null,null],[0,"hookenv","charmhelpers::core","",null,null],[3,"Config","charmhelpers::core::hookenv","",null,null],[3,"Relation","","",null,null],[5,"log","","Log a message, at an optional log::LogLevel, to the Juju log",null,{"inputs":[{"name":"t"},{"name":"option"}],"output":null}],[5,"in_relation_hook","","Are we currently in a hook",null,{"inputs":[],"output":{"name":"bool"}}],[5,"relation_type","","Scope for the current relation hook",null,{"inputs":[],"output":{"name":"option"}}],[5,"local_unit","","Local unit ID",null,{"inputs":[],"output":{"name":"option"}}],[5,"charm_dir","","Charm directory",null,{"inputs":[],"output":{"name":"option"}}],[5,"remote_unit","","The remote unit for the current relation hook",null,{"inputs":[],"output":{"name":"option"}}],[5,"service_name","","The name of the service tha this unit belongs to",null,{"inputs":[],"output":{"name":"option"}}],[5,"hook_name","","Currently executing hook name",null,{"inputs":[],"output":{"name":"option"}}],[5,"relation_id","","id for the current relation",null,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"config"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"relation"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Config"],[3,"Relation"]]};
searchIndex["chrono"] = {"doc":"Chrono 0.3.1","items":[[3,"Duration","chrono","ISO 8601 time duration with nanosecond precision. This also allows for the negative duration; see individual methods for details.",null,null],[3,"ParseWeekdayError","","An error resulting from reading `Weekday` value with `FromStr`.",null,null],[4,"Weekday","","The day of week.",null,null],[13,"Mon","","Monday.",0,null],[13,"Tue","","Tuesday.",0,null],[13,"Wed","","Wednesday.",0,null],[13,"Thu","","Thursday.",0,null],[13,"Fri","","Friday.",0,null],[13,"Sat","","Saturday.",0,null],[13,"Sun","","Sunday.",0,null],[0,"prelude","","A convenience module appropriate for glob imports (`use chrono::prelude::*;`).",null,null],[0,"offset","","The time zone, which calculates offsets from the local time to UTC.",null,null],[4,"LocalResult","chrono::offset","The conversion result from the local time to the timezone-aware datetime types.",null,null],[13,"None","","Given local time representation is invalid. This can occur when, for example, the positive timezone transition.",1,null],[13,"Single","","Given local time representation has a single unique result.",1,null],[13,"Ambiguous","","Given local time representation has multiple results and thus ambiguous. This can occur when, for example, the negative timezone transition.",1,null],[0,"utc","","The UTC (Coordinated Universal Time) time zone.",null,null],[3,"UTC","chrono::offset::utc","The UTC time zone. This is the most efficient time zone when you don't need the local time. It is also used as an offset (which is also a dummy type).",null,null],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"utc"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"utc"}],"output":{"name":"bool"}}],[11,"today","","Returns a `Date` which corresponds to the current date.",2,{"inputs":[],"output":{"name":"date"}}],[11,"now","","Returns a `DateTime` which corresponds to the current date.",2,{"inputs":[],"output":{"name":"datetime"}}],[11,"from_offset","","",2,{"inputs":[{"name":"utc"}],"output":{"name":"utc"}}],[11,"offset_from_local_date","","",2,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"localresult"}}],[11,"offset_from_local_datetime","","",2,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"localresult"}}],[11,"offset_from_utc_date","","",2,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"utc"}}],[11,"offset_from_utc_datetime","","",2,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"utc"}}],[11,"fix","","",2,{"inputs":[{"name":"self"}],"output":{"name":"fixedoffset"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"fixed","chrono::offset","The time zone which has a fixed offset from UTC.",null,null],[3,"FixedOffset","chrono::offset::fixed","The time zone with fixed offset, from UTC-23:59:59 to UTC+23:59:59.",null,null],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"fixedoffset"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"fixedoffset"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"fixedoffset"}],"output":{"name":"bool"}}],[11,"east","","Makes a new `FixedOffset` for the Eastern Hemisphere with given timezone difference. The negative `secs` means the Western Hemisphere.",3,{"inputs":[{"name":"i32"}],"output":{"name":"fixedoffset"}}],[11,"east_opt","","Makes a new `FixedOffset` for the Eastern Hemisphere with given timezone difference. The negative `secs` means the Western Hemisphere.",3,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"west","","Makes a new `FixedOffset` for the Western Hemisphere with given timezone difference. The negative `secs` means the Eastern Hemisphere.",3,{"inputs":[{"name":"i32"}],"output":{"name":"fixedoffset"}}],[11,"west_opt","","Makes a new `FixedOffset` for the Western Hemisphere with given timezone difference. The negative `secs` means the Eastern Hemisphere.",3,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"local_minus_utc","","Returns the number of seconds to add to convert from UTC to the local time.",3,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"utc_minus_local","","Returns the number of seconds to add to convert from the local time to UTC.",3,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"from_offset","","",3,{"inputs":[{"name":"fixedoffset"}],"output":{"name":"fixedoffset"}}],[11,"offset_from_local_date","","",3,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"localresult"}}],[11,"offset_from_local_datetime","","",3,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"localresult"}}],[11,"offset_from_utc_date","","",3,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"fixedoffset"}}],[11,"offset_from_utc_datetime","","",3,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"fixedoffset"}}],[11,"fix","","",3,{"inputs":[{"name":"self"}],"output":{"name":"fixedoffset"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"local","chrono::offset","The local (system) time zone.",null,null],[3,"Local","chrono::offset::local","The local timescale. This is implemented via the standard `time` crate.",null,null],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"local"}}],[11,"today","","Returns a `Date` which corresponds to the current date.",4,{"inputs":[],"output":{"name":"date"}}],[11,"now","","Returns a `DateTime` which corresponds to the current date.",4,{"inputs":[],"output":{"name":"datetime"}}],[11,"from_offset","","",4,{"inputs":[{"name":"fixedoffset"}],"output":{"name":"local"}}],[11,"offset_from_local_date","","",4,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"localresult"}}],[11,"offset_from_local_datetime","","",4,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"localresult"}}],[11,"offset_from_utc_date","","",4,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"fixedoffset"}}],[11,"offset_from_utc_datetime","","",4,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"fixedoffset"}}],[11,"from_local_date","","",4,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"localresult"}}],[11,"from_local_datetime","","",4,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"localresult"}}],[11,"from_utc_date","","",4,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"date"}}],[11,"from_utc_datetime","","",4,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"datetime"}}],[8,"Offset","chrono::offset","The offset from the local time to UTC.",null,null],[10,"fix","","Returns the fixed offset from UTC to the local time stored.",5,{"inputs":[{"name":"self"}],"output":{"name":"fixedoffset"}}],[8,"TimeZone","","The time zone.",null,null],[16,"Offset","","An associated offset type. This type is used to store the actual offset in date and time types. The original `TimeZone` value can be recovered via `TimeZone::from_offset`.",6,null],[11,"ymd","","Makes a new `Date` from year, month, day and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",6,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"date"}}],[11,"ymd_opt","","Makes a new `Date` from year, month, day and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",6,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"localresult"}}],[11,"yo","","Makes a new `Date` from year, day of year (DOY or \"ordinal\") and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",6,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"u32"}],"output":{"name":"date"}}],[11,"yo_opt","","Makes a new `Date` from year, day of year (DOY or \"ordinal\") and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",6,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"u32"}],"output":{"name":"localresult"}}],[11,"isoywd","","Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE. The resulting `Date` may have a different year from the input year.",6,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"u32"},{"name":"weekday"}],"output":{"name":"date"}}],[11,"isoywd_opt","","Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and the current time zone. This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE. The resulting `Date` may have a different year from the input year.",6,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"u32"},{"name":"weekday"}],"output":{"name":"localresult"}}],[11,"timestamp","","Makes a new `DateTime` from the number of non-leap seconds since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\") and the number of nanoseconds since the last whole non-leap second.",6,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"u32"}],"output":{"name":"datetime"}}],[11,"timestamp_opt","","Makes a new `DateTime` from the number of non-leap seconds since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\") and the number of nanoseconds since the last whole non-leap second.",6,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"u32"}],"output":{"name":"localresult"}}],[11,"datetime_from_str","","Parses a string with the specified format string and returns a `DateTime` with the current offset. See the `format::strftime` module on the supported escape sequences.",6,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"name":"parseresult"}}],[10,"from_offset","","Reconstructs the time zone from the offset.",6,null],[10,"offset_from_local_date","","Creates the offset(s) for given local `NaiveDate` if possible.",6,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"localresult"}}],[10,"offset_from_local_datetime","","Creates the offset(s) for given local `NaiveDateTime` if possible.",6,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"localresult"}}],[11,"from_local_date","","Converts the local `NaiveDate` to the timezone-aware `Date` if possible.",6,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"localresult"}}],[11,"from_local_datetime","","Converts the local `NaiveDateTime` to the timezone-aware `DateTime` if possible.",6,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"localresult"}}],[10,"offset_from_utc_date","","Creates the offset for given UTC `NaiveDate`. This cannot fail.",6,null],[10,"offset_from_utc_datetime","","Creates the offset for given UTC `NaiveDateTime`. This cannot fail.",6,null],[11,"from_utc_date","","Converts the UTC `NaiveDate` to the local time. The UTC is continuous and thus this cannot fail (but can give the duplicate local time).",6,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"date"}}],[11,"from_utc_datetime","","Converts the UTC `NaiveDateTime` to the local time. The UTC is continuous and thus this cannot fail (but can give the duplicate local time).",6,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"datetime"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"localresult"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"localresult"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"localresult"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"single","","Returns `Some` only when the conversion result is unique, or `None` otherwise.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"earliest","","Returns `Some` for the earliest possible conversion result, or `None` if none.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"latest","","Returns `Some` for the latest possible conversion result, or `None` if none.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"map","","Maps a `LocalResult<T>` into `LocalResult<U>` with given function.",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"localresult"}}],[11,"and_time","","Makes a new `DateTime` from the current date and given `NaiveTime`. The offset in the current date is preserved.",1,{"inputs":[{"name":"self"},{"name":"naivetime"}],"output":{"name":"localresult"}}],[11,"and_hms_opt","","Makes a new `DateTime` from the current date, hour, minute and second. The offset in the current date is preserved.",1,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"localresult"}}],[11,"and_hms_milli_opt","","Makes a new `DateTime` from the current date, hour, minute, second and millisecond. The millisecond part can exceed 1,000 in order to represent the leap second. The offset in the current date is preserved.",1,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"localresult"}}],[11,"and_hms_micro_opt","","Makes a new `DateTime` from the current date, hour, minute, second and microsecond. The microsecond part can exceed 1,000,000 in order to represent the leap second. The offset in the current date is preserved.",1,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"localresult"}}],[11,"and_hms_nano_opt","","Makes a new `DateTime` from the current date, hour, minute, second and nanosecond. The nanosecond part can exceed 1,000,000,000 in order to represent the leap second. The offset in the current date is preserved.",1,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"localresult"}}],[11,"unwrap","","Returns the single unique conversion result, or panics accordingly.",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[0,"naive","chrono","Date and time types which do not concern about the timezones.",null,null],[0,"date","chrono::naive","ISO 8601 calendar date without timezone.",null,null],[3,"NaiveDate","chrono::naive::date","ISO 8601 calendar date without timezone. Allows for every proleptic Gregorian date from Jan 1, 262145 BCE to Dec 31, 262143 CE. Also supports the conversion from ISO 8601 ordinal and week date.",null,null],[17,"MIN","","The minimum possible `NaiveDate` (January 1, 262145 BCE).",null,null],[17,"MAX","","The maximum possible `NaiveDate` (December 31, 262143 CE).",null,null],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",7,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"option"}}],[11,"lt","","",7,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"bool"}}],[11,"le","","",7,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"bool"}}],[11,"gt","","",7,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"bool"}}],[11,"ge","","",7,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"bool"}}],[11,"cmp","","",7,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"ordering"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"naivedate"}}],[11,"from_ymd","","Makes a new `NaiveDate` from the calendar date (year, month and day).",7,{"inputs":[{"name":"i32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivedate"}}],[11,"from_ymd_opt","","Makes a new `NaiveDate` from the calendar date (year, month and day).",7,{"inputs":[{"name":"i32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_yo","","Makes a new `NaiveDate` from the ordinal date (year and day of the year).",7,{"inputs":[{"name":"i32"},{"name":"u32"}],"output":{"name":"naivedate"}}],[11,"from_yo_opt","","Makes a new `NaiveDate` from the ordinal date (year and day of the year).",7,{"inputs":[{"name":"i32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_isoywd","","Makes a new `NaiveDate` from the ISO week date (year, week number and day of the week). The resulting `NaiveDate` may have a different year from the input year.",7,{"inputs":[{"name":"i32"},{"name":"u32"},{"name":"weekday"}],"output":{"name":"naivedate"}}],[11,"from_isoywd_opt","","Makes a new `NaiveDate` from the ISO week date (year, week number and day of the week). The resulting `NaiveDate` may have a different year from the input year.",7,{"inputs":[{"name":"i32"},{"name":"u32"},{"name":"weekday"}],"output":{"name":"option"}}],[11,"from_num_days_from_ce","","Makes a new `NaiveDate` from the number of days since January 1, 1 (Day 1) in the proleptic Gregorian calendar.",7,{"inputs":[{"name":"i32"}],"output":{"name":"naivedate"}}],[11,"from_num_days_from_ce_opt","","Makes a new `NaiveDate` from the number of days since January 1, 1 (Day 1) in the proleptic Gregorian calendar.",7,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"parse_from_str","","Parses a string with the specified format string and returns a new `NaiveDate`. See the `format::strftime` module on the supported escape sequences.",7,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"parseresult"}}],[11,"and_time","","Makes a new `NaiveDateTime` from the current date and given `NaiveTime`.",7,{"inputs":[{"name":"self"},{"name":"naivetime"}],"output":{"name":"naivedatetime"}}],[11,"and_hms","","Makes a new `NaiveDateTime` from the current date, hour, minute and second.",7,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivedatetime"}}],[11,"and_hms_opt","","Makes a new `NaiveDateTime` from the current date, hour, minute and second.",7,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"and_hms_milli","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond.",7,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivedatetime"}}],[11,"and_hms_milli_opt","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond.",7,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"and_hms_micro","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond.",7,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivedatetime"}}],[11,"and_hms_micro_opt","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond.",7,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"and_hms_nano","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond.",7,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivedatetime"}}],[11,"and_hms_nano_opt","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond.",7,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"succ","","Makes a new `NaiveDate` for the next calendar date.",7,{"inputs":[{"name":"self"}],"output":{"name":"naivedate"}}],[11,"succ_opt","","Makes a new `NaiveDate` for the next calendar date.",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"pred","","Makes a new `NaiveDate` for the previous calendar date.",7,{"inputs":[{"name":"self"}],"output":{"name":"naivedate"}}],[11,"pred_opt","","Makes a new `NaiveDate` for the previous calendar date.",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"checked_add_signed","","Adds the `days` part of given `Duration` to the current date.",7,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"name":"option"}}],[11,"checked_sub_signed","","Subtracts the `days` part of given `Duration` from the current date.",7,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"name":"option"}}],[11,"signed_duration_since","","Subtracts another `NaiveDate` from the current date. Returns a `Duration` of integral numbers.",7,{"inputs":[{"name":"self"},{"name":"naivedate"}],"output":{"name":"oldduration"}}],[11,"format_with_items","","Formats the date with the specified formatting items. Otherwise it is same to the ordinary `format` method.",7,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"delayedformat"}}],[11,"format","","Formats the date with the specified format string. See the `format::strftime` module on the supported escape sequences.",7,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"delayedformat"}}],[11,"year","","Returns the year number in the calendar date.",7,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"month","","Returns the month number starting from 1.",7,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"month0","","Returns the month number starting from 0.",7,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"day","","Returns the day of month starting from 1.",7,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"day0","","Returns the day of month starting from 0.",7,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"ordinal","","Returns the day of year starting from 1.",7,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"ordinal0","","Returns the day of year starting from 0.",7,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"weekday","","Returns the day of week.",7,{"inputs":[{"name":"self"}],"output":{"name":"weekday"}}],[11,"isoweekdate","","",7,null],[11,"with_year","","Makes a new `NaiveDate` with the year number changed.",7,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"option"}}],[11,"with_month","","Makes a new `NaiveDate` with the month number (starting from 1) changed.",7,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_month0","","Makes a new `NaiveDate` with the month number (starting from 0) changed.",7,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_day","","Makes a new `NaiveDate` with the day of month (starting from 1) changed.",7,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_day0","","Makes a new `NaiveDate` with the day of month (starting from 0) changed.",7,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_ordinal","","Makes a new `NaiveDate` with the day of year (starting from 1) changed.",7,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_ordinal0","","Makes a new `NaiveDate` with the day of year (starting from 0) changed.",7,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"hash","","",7,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"add","","",7,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"name":"naivedate"}}],[11,"sub","","",7,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"name":"naivedate"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",7,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[0,"time","chrono::naive","ISO 8601 time without timezone.",null,null],[3,"NaiveTime","chrono::naive::time","ISO 8601 time without timezone. Allows for the nanosecond precision and optional leap second representation.",null,null],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"naivetime"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"naivetime"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",8,{"inputs":[{"name":"self"},{"name":"naivetime"}],"output":{"name":"option"}}],[11,"lt","","",8,{"inputs":[{"name":"self"},{"name":"naivetime"}],"output":{"name":"bool"}}],[11,"le","","",8,{"inputs":[{"name":"self"},{"name":"naivetime"}],"output":{"name":"bool"}}],[11,"gt","","",8,{"inputs":[{"name":"self"},{"name":"naivetime"}],"output":{"name":"bool"}}],[11,"ge","","",8,{"inputs":[{"name":"self"},{"name":"naivetime"}],"output":{"name":"bool"}}],[11,"cmp","","",8,{"inputs":[{"name":"self"},{"name":"naivetime"}],"output":{"name":"ordering"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"naivetime"}}],[11,"from_hms","","Makes a new `NaiveTime` from hour, minute and second.",8,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivetime"}}],[11,"from_hms_opt","","Makes a new `NaiveTime` from hour, minute and second.",8,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_hms_milli","","Makes a new `NaiveTime` from hour, minute, second and millisecond.",8,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivetime"}}],[11,"from_hms_milli_opt","","Makes a new `NaiveTime` from hour, minute, second and millisecond.",8,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_hms_micro","","Makes a new `NaiveTime` from hour, minute, second and microsecond.",8,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivetime"}}],[11,"from_hms_micro_opt","","Makes a new `NaiveTime` from hour, minute, second and microsecond.",8,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_hms_nano","","Makes a new `NaiveTime` from hour, minute, second and nanosecond.",8,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivetime"}}],[11,"from_hms_nano_opt","","Makes a new `NaiveTime` from hour, minute, second and nanosecond.",8,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_num_seconds_from_midnight","","Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond.",8,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"naivetime"}}],[11,"from_num_seconds_from_midnight_opt","","Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond.",8,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"parse_from_str","","Parses a string with the specified format string and returns a new `NaiveTime`. See the `format::strftime` module on the supported escape sequences.",8,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"parseresult"}}],[11,"overflowing_add_signed","","Adds given `Duration` to the current time, and also returns the number of *seconds* in the integral number of days ignored from the addition. (We cannot return `Duration` because it is subject to overflow or underflow.)",8,null],[11,"overflowing_sub_signed","","Subtracts given `Duration` from the current time, and also returns the number of *seconds* in the integral number of days ignored from the subtraction. (We cannot return `Duration` because it is subject to overflow or underflow.)",8,null],[11,"signed_duration_since","","Subtracts another `NaiveTime` from the current time. Returns a `Duration` within +/- 1 day. This does not overflow or underflow at all.",8,{"inputs":[{"name":"self"},{"name":"naivetime"}],"output":{"name":"oldduration"}}],[11,"format_with_items","","Formats the time with the specified formatting items. Otherwise it is same to the ordinary `format` method.",8,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"delayedformat"}}],[11,"format","","Formats the time with the specified format string. See the `format::strftime` module on the supported escape sequences.",8,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"delayedformat"}}],[11,"hour","","Returns the hour number from 0 to 23.",8,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"minute","","Returns the minute number from 0 to 59.",8,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"second","","Returns the second number from 0 to 59.",8,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"nanosecond","","Returns the number of nanoseconds since the whole non-leap second. The range from 1,000,000,000 to 1,999,999,999 represents the leap second.",8,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"with_hour","","Makes a new `NaiveTime` with the hour number changed.",8,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_minute","","Makes a new `NaiveTime` with the minute number changed.",8,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_second","","Makes a new `NaiveTime` with the second number changed.",8,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_nanosecond","","Makes a new `NaiveTime` with nanoseconds since the whole non-leap second changed.",8,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"num_seconds_from_midnight","","Returns the number of non-leap seconds past the last midnight.",8,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"hash","","",8,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"add","","",8,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"name":"naivetime"}}],[11,"sub","","",8,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"name":"naivetime"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",8,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[0,"datetime","chrono::naive","ISO 8601 date and time without timezone.",null,null],[3,"NaiveDateTime","chrono::naive::datetime","ISO 8601 combined date and time without timezone.",null,null],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",9,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"option"}}],[11,"lt","","",9,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"bool"}}],[11,"le","","",9,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"bool"}}],[11,"gt","","",9,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"bool"}}],[11,"ge","","",9,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"bool"}}],[11,"cmp","","",9,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"ordering"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"naivedatetime"}}],[11,"new","","Makes a new `NaiveDateTime` from date and time components. Equivalent to `date.and_time(time)` and many other helper constructors on `NaiveDate`.",9,{"inputs":[{"name":"naivedate"},{"name":"naivetime"}],"output":{"name":"naivedatetime"}}],[11,"from_timestamp","","Makes a new `NaiveDateTime` corresponding to a UTC date and time, from the number of non-leap seconds since the midnight UTC on January 1, 1970 (aka \"UNIX timestamp\") and the number of nanoseconds since the last whole non-leap second.",9,{"inputs":[{"name":"i64"},{"name":"u32"}],"output":{"name":"naivedatetime"}}],[11,"from_timestamp_opt","","Makes a new `NaiveDateTime` corresponding to a UTC date and time, from the number of non-leap seconds since the midnight UTC on January 1, 1970 (aka \"UNIX timestamp\") and the number of nanoseconds since the last whole non-leap second.",9,{"inputs":[{"name":"i64"},{"name":"u32"}],"output":{"name":"option"}}],[11,"parse_from_str","","Parses a string with the specified format string and returns a new `NaiveDateTime`. See the `format::strftime` module on the supported escape sequences.",9,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"parseresult"}}],[11,"date","","Retrieves a date component.",9,{"inputs":[{"name":"self"}],"output":{"name":"naivedate"}}],[11,"time","","Retrieves a time component.",9,{"inputs":[{"name":"self"}],"output":{"name":"naivetime"}}],[11,"timestamp","","Returns the number of non-leap seconds since the midnight on January 1, 1970.",9,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"timestamp_subsec_millis","","Returns the number of milliseconds since the last whole non-leap second.",9,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"timestamp_subsec_micros","","Returns the number of microseconds since the last whole non-leap second.",9,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"timestamp_subsec_nanos","","Returns the number of nanoseconds since the last whole non-leap second.",9,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"checked_add_signed","","Adds given `Duration` to the current date and time.",9,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"name":"option"}}],[11,"checked_sub_signed","","Subtracts given `Duration` from the current date and time.",9,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"name":"option"}}],[11,"signed_duration_since","","Subtracts another `NaiveDateTime` from the current date and time. This does not overflow or underflow at all.",9,{"inputs":[{"name":"self"},{"name":"naivedatetime"}],"output":{"name":"oldduration"}}],[11,"format_with_items","","Formats the combined date and time with the specified formatting items. Otherwise it is same to the ordinary `format` method.",9,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"delayedformat"}}],[11,"format","","Formats the combined date and time with the specified format string. See the `format::strftime` module on the supported escape sequences.",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"delayedformat"}}],[11,"year","","Returns the year number in the calendar date.",9,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"month","","Returns the month number starting from 1.",9,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"month0","","Returns the month number starting from 0.",9,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"day","","Returns the day of month starting from 1.",9,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"day0","","Returns the day of month starting from 0.",9,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"ordinal","","Returns the day of year starting from 1.",9,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"ordinal0","","Returns the day of year starting from 0.",9,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"weekday","","Returns the day of week.",9,{"inputs":[{"name":"self"}],"output":{"name":"weekday"}}],[11,"isoweekdate","","",9,null],[11,"with_year","","Makes a new `NaiveDateTime` with the year number changed.",9,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"option"}}],[11,"with_month","","Makes a new `NaiveDateTime` with the month number (starting from 1) changed.",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_month0","","Makes a new `NaiveDateTime` with the month number (starting from 0) changed.",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_day","","Makes a new `NaiveDateTime` with the day of month (starting from 1) changed.",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_day0","","Makes a new `NaiveDateTime` with the day of month (starting from 0) changed.",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_ordinal","","Makes a new `NaiveDateTime` with the day of year (starting from 1) changed.",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_ordinal0","","Makes a new `NaiveDateTime` with the day of year (starting from 0) changed.",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"hour","","Returns the hour number from 0 to 23.",9,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"minute","","Returns the minute number from 0 to 59.",9,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"second","","Returns the second number from 0 to 59.",9,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"nanosecond","","Returns the number of nanoseconds since the whole non-leap second. The range from 1,000,000,000 to 1,999,999,999 represents the leap second.",9,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"with_hour","","Makes a new `NaiveDateTime` with the hour number changed.",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_minute","","Makes a new `NaiveDateTime` with the minute number changed.",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_second","","Makes a new `NaiveDateTime` with the second number changed.",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_nanosecond","","Makes a new `NaiveDateTime` with nanoseconds since the whole non-leap second changed.",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"hash","","",9,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"add","","",9,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"name":"naivedatetime"}}],[11,"sub","","",9,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"name":"naivedatetime"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",9,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[0,"date","chrono","ISO 8601 calendar date with time zone.",null,null],[3,"Date","chrono::date","ISO 8601 calendar date with time zone.",null,null],[17,"MIN","","The minimum possible `Date`.",null,null],[17,"MAX","","The maximum possible `Date`.",null,null],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"date"}}],[11,"from_utc","","Makes a new `Date` with given *UTC* date and offset. The local date should be constructed via the `TimeZone` trait.",10,null],[11,"and_time","","Makes a new `DateTime` from the current date and given `NaiveTime`. The offset in the current date is preserved.",10,{"inputs":[{"name":"self"},{"name":"naivetime"}],"output":{"name":"option"}}],[11,"and_hms","","Makes a new `DateTime` from the current date, hour, minute and second. The offset in the current date is preserved.",10,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"datetime"}}],[11,"and_hms_opt","","Makes a new `DateTime` from the current date, hour, minute and second. The offset in the current date is preserved.",10,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"and_hms_milli","","Makes a new `DateTime` from the current date, hour, minute, second and millisecond. The millisecond part can exceed 1,000 in order to represent the leap second. The offset in the current date is preserved.",10,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"datetime"}}],[11,"and_hms_milli_opt","","Makes a new `DateTime` from the current date, hour, minute, second and millisecond. The millisecond part can exceed 1,000 in order to represent the leap second. The offset in the current date is preserved.",10,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"and_hms_micro","","Makes a new `DateTime` from the current date, hour, minute, second and microsecond. The microsecond part can exceed 1,000,000 in order to represent the leap second. The offset in the current date is preserved.",10,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"datetime"}}],[11,"and_hms_micro_opt","","Makes a new `DateTime` from the current date, hour, minute, second and microsecond. The microsecond part can exceed 1,000,000 in order to represent the leap second. The offset in the current date is preserved.",10,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"and_hms_nano","","Makes a new `DateTime` from the current date, hour, minute, second and nanosecond. The nanosecond part can exceed 1,000,000,000 in order to represent the leap second. The offset in the current date is preserved.",10,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"datetime"}}],[11,"and_hms_nano_opt","","Makes a new `DateTime` from the current date, hour, minute, second and nanosecond. The nanosecond part can exceed 1,000,000,000 in order to represent the leap second. The offset in the current date is preserved.",10,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"succ","","Makes a new `Date` for the next date.",10,{"inputs":[{"name":"self"}],"output":{"name":"date"}}],[11,"succ_opt","","Makes a new `Date` for the next date.",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"pred","","Makes a new `Date` for the prior date.",10,{"inputs":[{"name":"self"}],"output":{"name":"date"}}],[11,"pred_opt","","Makes a new `Date` for the prior date.",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"offset","","Retrieves an associated offset from UTC.",10,null],[11,"timezone","","Retrieves an associated time zone.",10,{"inputs":[{"name":"self"}],"output":{"name":"tz"}}],[11,"with_timezone","","Changes the associated time zone. This does not change the actual `Date` (but will change the string representation).",10,{"inputs":[{"name":"self"},{"name":"tz2"}],"output":{"name":"date"}}],[11,"checked_add_signed","","Adds given `Duration` to the current date.",10,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"name":"option"}}],[11,"checked_sub_signed","","Subtracts given `Duration` from the current date.",10,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"name":"option"}}],[11,"signed_duration_since","","Subtracts another `Date` from the current date. Returns a `Duration` of integral numbers.",10,{"inputs":[{"name":"self"},{"name":"date"}],"output":{"name":"oldduration"}}],[11,"naive_utc","","Returns a view to the naive UTC date.",10,{"inputs":[{"name":"self"}],"output":{"name":"naivedate"}}],[11,"naive_local","","Returns a view to the naive local date.",10,{"inputs":[{"name":"self"}],"output":{"name":"naivedate"}}],[11,"format_with_items","","Formats the date with the specified formatting items.",10,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"delayedformat"}}],[11,"format","","Formats the date with the specified format string. See the `format::strftime` module on the supported escape sequences.",10,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"delayedformat"}}],[11,"year","","",10,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"month","","",10,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"month0","","",10,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"day","","",10,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"day0","","",10,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"ordinal","","",10,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"ordinal0","","",10,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"weekday","","",10,{"inputs":[{"name":"self"}],"output":{"name":"weekday"}}],[11,"isoweekdate","","",10,null],[11,"with_year","","",10,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"option"}}],[11,"with_month","","",10,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_month0","","",10,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_day","","",10,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_day0","","",10,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_ordinal","","",10,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_ordinal0","","",10,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"date"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",10,{"inputs":[{"name":"self"},{"name":"date"}],"output":{"name":"option"}}],[11,"cmp","","",10,{"inputs":[{"name":"self"},{"name":"date"}],"output":{"name":"ordering"}}],[11,"hash","","",10,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"add","","",10,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"name":"date"}}],[11,"sub","","",10,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"name":"date"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"datetime","chrono","ISO 8601 date and time with time zone.",null,null],[3,"DateTime","chrono::datetime","ISO 8601 combined date and time with time zone.",null,null],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"datetime"}}],[11,"from_utc","","Makes a new `DateTime` with given *UTC* datetime and offset. The local datetime should be constructed via the `TimeZone` trait.",11,null],[11,"date","","Retrieves a date component.",11,{"inputs":[{"name":"self"}],"output":{"name":"date"}}],[11,"time","","Retrieves a time component. Unlike `date`, this is not associated to the time zone.",11,{"inputs":[{"name":"self"}],"output":{"name":"naivetime"}}],[11,"timestamp","","Returns the number of non-leap seconds since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").",11,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"timestamp_subsec_millis","","Returns the number of milliseconds since the last second boundary",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"timestamp_subsec_micros","","Returns the number of microseconds since the last second boundary",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"timestamp_subsec_nanos","","Returns the number of nanoseconds since the last second boundary",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"offset","","Retrieves an associated offset from UTC.",11,null],[11,"timezone","","Retrieves an associated time zone.",11,{"inputs":[{"name":"self"}],"output":{"name":"tz"}}],[11,"with_timezone","","Changes the associated time zone. This does not change the actual `DateTime` (but will change the string representation).",11,{"inputs":[{"name":"self"},{"name":"tz2"}],"output":{"name":"datetime"}}],[11,"checked_add_signed","","Adds given `Duration` to the current date and time.",11,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"name":"option"}}],[11,"checked_sub_signed","","Subtracts given `Duration` from the current date and time.",11,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"name":"option"}}],[11,"signed_duration_since","","Subtracts another `DateTime` from the current date and time. This does not overflow or underflow at all.",11,{"inputs":[{"name":"self"},{"name":"datetime"}],"output":{"name":"oldduration"}}],[11,"naive_utc","","Returns a view to the naive UTC datetime.",11,{"inputs":[{"name":"self"}],"output":{"name":"naivedatetime"}}],[11,"naive_local","","Returns a view to the naive local datetime.",11,{"inputs":[{"name":"self"}],"output":{"name":"naivedatetime"}}],[11,"parse_from_rfc2822","","Parses an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`, then returns a new `DateTime` with a parsed `FixedOffset`.",11,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[11,"parse_from_rfc3339","","Parses an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`, then returns a new `DateTime` with a parsed `FixedOffset`.",11,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[11,"parse_from_str","","Parses a string with the specified format string and returns a new `DateTime` with a parsed `FixedOffset`. See the `format::strftime` module on the supported escape sequences.",11,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"parseresult"}}],[11,"to_rfc2822","","Returns an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`.",11,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"to_rfc3339","","Returns an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`.",11,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"format_with_items","","Formats the combined date and time with the specified formatting items.",11,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"delayedformat"}}],[11,"format","","Formats the combined date and time with the specified format string. See the `format::strftime` module on the supported escape sequences.",11,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"delayedformat"}}],[11,"year","","",11,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"month","","",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"month0","","",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"day","","",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"day0","","",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"ordinal","","",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"ordinal0","","",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"weekday","","",11,{"inputs":[{"name":"self"}],"output":{"name":"weekday"}}],[11,"isoweekdate","","",11,null],[11,"with_year","","",11,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"option"}}],[11,"with_month","","",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_month0","","",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_day","","",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_day0","","",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_ordinal","","",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_ordinal0","","",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"hour","","",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"minute","","",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"second","","",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"nanosecond","","",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"with_hour","","",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_minute","","",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_second","","",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_nanosecond","","",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"datetime"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",11,{"inputs":[{"name":"self"},{"name":"datetime"}],"output":{"name":"option"}}],[11,"cmp","","",11,{"inputs":[{"name":"self"},{"name":"datetime"}],"output":{"name":"ordering"}}],[11,"hash","","",11,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"add","","",11,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"name":"datetime"}}],[11,"sub","","",11,{"inputs":[{"name":"self"},{"name":"oldduration"}],"output":{"name":"datetime"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",11,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[11,"from_str","","",11,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[11,"from_str","","",11,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[0,"format","chrono","Formatting utilities for date and time.",null,null],[3,"InternalNumeric","chrono::format","An opaque type representing numeric item types for internal uses only.",null,null],[3,"InternalFixed","","An opaque type representing fixed-format item types for internal uses only.",null,null],[3,"ParseError","","An error from the `parse` function.",null,null],[3,"DelayedFormat","","A *temporary* object which can be used as an argument to `format!` or others. This is normally constructed via `format` methods of each date and time type.",null,null],[4,"Pad","","Padding characters for numeric items.",null,null],[13,"None","","No padding.",12,null],[13,"Zero","","Zero (`0`) padding.",12,null],[13,"Space","","Space padding.",12,null],[4,"Numeric","","Numeric item types. They have associated formatting width (FW) and parsing width (PW).",null,null],[13,"Year","","Full Gregorian year (FW=4, PW=∞). May accept years before 1 BCE or after 9999 CE, given an initial sign.",13,null],[13,"YearDiv100","","Gregorian year divided by 100 (century number; FW=PW=2). Implies the non-negative year.",13,null],[13,"YearMod100","","Gregorian year modulo 100 (FW=PW=2). Cannot be negative.",13,null],[13,"IsoYear","","Year in the ISO week date (FW=4, PW=∞). May accept years before 1 BCE or after 9999 CE, given an initial sign.",13,null],[13,"IsoYearDiv100","","Year in the ISO week date, divided by 100 (FW=PW=2). Implies the non-negative year.",13,null],[13,"IsoYearMod100","","Year in the ISO week date, modulo 100 (FW=PW=2). Cannot be negative.",13,null],[13,"Month","","Month (FW=PW=2).",13,null],[13,"Day","","Day of the month (FW=PW=2).",13,null],[13,"WeekFromSun","","Week number, where the week 1 starts at the first Sunday of January (FW=PW=2).",13,null],[13,"WeekFromMon","","Week number, where the week 1 starts at the first Monday of January (FW=PW=2).",13,null],[13,"IsoWeek","","Week number in the ISO week date (FW=PW=2).",13,null],[13,"NumDaysFromSun","","Day of the week, where Sunday = 0 and Saturday = 6 (FW=PW=1).",13,null],[13,"WeekdayFromMon","","Day of the week, where Monday = 1 and Sunday = 7 (FW=PW=1).",13,null],[13,"Ordinal","","Day of the year (FW=PW=3).",13,null],[13,"Hour","","Hour number in the 24-hour clocks (FW=PW=2).",13,null],[13,"Hour12","","Hour number in the 12-hour clocks (FW=PW=2).",13,null],[13,"Minute","","The number of minutes since the last whole hour (FW=PW=2).",13,null],[13,"Second","","The number of seconds since the last whole minute (FW=PW=2).",13,null],[13,"Nanosecond","","The number of nanoseconds since the last whole second (FW=PW=9). Note that this is *not* left-aligned; see also `Fixed::Nanosecond`.",13,null],[13,"Timestamp","","The number of non-leap seconds since the midnight UTC on January 1, 1970 (FW=1, PW=∞). For formatting, it assumes UTC upon the absence of time zone offset.",13,null],[13,"Internal","","Internal uses only.",13,null],[4,"Fixed","","Fixed-format item types.",null,null],[13,"ShortMonthName","","Abbreviated month names.",14,null],[13,"LongMonthName","","Full month names.",14,null],[13,"ShortWeekdayName","","Abbreviated day of the week names.",14,null],[13,"LongWeekdayName","","Full day of the week names.",14,null],[13,"LowerAmPm","","AM/PM.",14,null],[13,"UpperAmPm","","AM/PM.",14,null],[13,"Nanosecond","","An optional dot plus one or more digits for left-aligned nanoseconds. May print nothing, 3, 6 or 9 digits according to the available accuracy. See also `Numeric::Nanosecond`.",14,null],[13,"Nanosecond3","","Same to `Nanosecond` but the accuracy is fixed to 3.",14,null],[13,"Nanosecond6","","Same to `Nanosecond` but the accuracy is fixed to 6.",14,null],[13,"Nanosecond9","","Same to `Nanosecond` but the accuracy is fixed to 9.",14,null],[13,"TimezoneName","","Timezone name.",14,null],[13,"TimezoneOffsetColon","","Offset from the local time to UTC (`+09:00` or `-04:00` or `+00:00`).",14,null],[13,"TimezoneOffsetColonZ","","Offset from the local time to UTC (`+09:00` or `-04:00` or `Z`).",14,null],[13,"TimezoneOffset","","Same to `TimezoneOffsetColon` but prints no colon. Parsing allows an optional colon.",14,null],[13,"TimezoneOffsetZ","","Same to `TimezoneOffsetColonZ` but prints no colon. Parsing allows an optional colon.",14,null],[13,"RFC2822","","RFC 2822 date and time syntax. Commonly used for email and MIME date and time.",14,null],[13,"RFC3339","","RFC 3339 & ISO 8601 date and time syntax.",14,null],[13,"Internal","","Internal uses only.",14,null],[4,"Item","","A single formatting item. This is used for both formatting and parsing.",null,null],[13,"Literal","","A literally printed and parsed text.",15,null],[13,"OwnedLiteral","","Same to `Literal` but with the string owned by the item.",15,null],[13,"Space","","Whitespace. Prints literally but reads zero or more whitespace.",15,null],[13,"OwnedSpace","","Same to `Space` but with the string owned by the item.",15,null],[13,"Numeric","","Numeric item. Can be optionally padded to the maximal length (if any) when formatting; the parser simply ignores any padded whitespace and zeroes.",15,null],[13,"Fixed","","Fixed-format item.",15,null],[13,"Error","","Issues a formatting error. Used to signal an invalid format string.",15,null],[5,"parse","","Tries to parse given string into `parsed` with given formatting items. Returns `Ok` when the entire string has been parsed (otherwise `parsed` should not be used). There should be no trailing string after parsing; use a stray `Item::Space` to trim whitespaces.",null,{"inputs":[{"name":"parsed"},{"name":"str"},{"name":"i"}],"output":{"name":"parseresult"}}],[5,"format","","Tries to format given arguments with given formatting items. Internally used by `DelayedFormat`.",null,{"inputs":[{"name":"formatter"},{"name":"option"},{"name":"option"},{"name":"option"},{"name":"i"}],"output":{"name":"result"}}],[0,"parsed","","A collection of parsed date and time items. They can be constructed incrementally while being checked for consistency.",null,null],[3,"Parsed","chrono::format::parsed","Parsed parts of date and time. There are two classes of methods:",null,null],[12,"year","","Year.",16,null],[12,"year_div_100","","Year divided by 100. Implies that the year is >= 1 BCE when set.",16,null],[12,"year_mod_100","","Year modulo 100. Implies that the year is >= 1 BCE when set.",16,null],[12,"isoyear","","Year in the ISO week date.",16,null],[12,"isoyear_div_100","","Year in the ISO week date, divided by 100. Implies that the year is >= 1 BCE when set.",16,null],[12,"isoyear_mod_100","","Year in the ISO week date, modulo 100. Implies that the year is >= 1 BCE when set.",16,null],[12,"month","","Month (1--12).",16,null],[12,"week_from_sun","","Week number, where the week 1 starts at the first Sunday of January (0--53, 1--53 or 1--52 depending on the year).",16,null],[12,"week_from_mon","","Week number, where the week 1 starts at the first Monday of January (0--53, 1--53 or 1--52 depending on the year).",16,null],[12,"isoweek","","ISO week number (1--52 or 1--53 depending on the year).",16,null],[12,"weekday","","Day of the week.",16,null],[12,"ordinal","","Day of the year (1--365 or 1--366 depending on the year).",16,null],[12,"day","","Day of the month (1--28, 1--29, 1--30 or 1--31 depending on the month).",16,null],[12,"hour_div_12","","Hour number divided by 12 (0--1). 0 indicates AM and 1 indicates PM.",16,null],[12,"hour_mod_12","","Hour number modulo 12 (0--11).",16,null],[12,"minute","","Minute number (0--59).",16,null],[12,"second","","Second number (0--60, accounting for leap seconds).",16,null],[12,"nanosecond","","The number of nanoseconds since the whole second (0--999,999,999).",16,null],[12,"timestamp","","The number of non-leap seconds since the midnight UTC on January 1, 1970.",16,null],[12,"offset","","Offset from the local time to UTC, in seconds.",16,null],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"parsed"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"parsed"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"parsed"}],"output":{"name":"bool"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",16,{"inputs":[],"output":{"name":"parsed"}}],[11,"new","","Returns the initial value of parsed parts.",16,{"inputs":[],"output":{"name":"parsed"}}],[11,"set_year","","Tries to set the `year` field from given value.",16,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_year_div_100","","Tries to set the `year_div_100` field from given value.",16,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_year_mod_100","","Tries to set the `year_mod_100` field from given value.",16,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_isoyear","","Tries to set the `isoyear` field from given value.",16,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_isoyear_div_100","","Tries to set the `isoyear_div_100` field from given value.",16,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_isoyear_mod_100","","Tries to set the `isoyear_mod_100` field from given value.",16,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_month","","Tries to set the `month` field from given value.",16,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_week_from_sun","","Tries to set the `week_from_sun` field from given value.",16,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_week_from_mon","","Tries to set the `week_from_mon` field from given value.",16,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_isoweek","","Tries to set the `isoweek` field from given value.",16,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_weekday","","Tries to set the `weekday` field from given value.",16,{"inputs":[{"name":"self"},{"name":"weekday"}],"output":{"name":"parseresult"}}],[11,"set_ordinal","","Tries to set the `ordinal` field from given value.",16,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_day","","Tries to set the `day` field from given value.",16,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_ampm","","Tries to set the `hour_div_12` field from given value. (`false` for AM, `true` for PM)",16,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"parseresult"}}],[11,"set_hour12","","Tries to set the `hour_mod_12` field from given hour number in 12-hour clocks.",16,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_hour","","Tries to set both `hour_div_12` and `hour_mod_12` fields from given value.",16,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_minute","","Tries to set the `minute` field from given value.",16,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_second","","Tries to set the `second` field from given value.",16,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_nanosecond","","Tries to set the `nanosecond` field from given value.",16,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_timestamp","","Tries to set the `timestamp` field from given value.",16,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_offset","","Tries to set the `offset` field from given value.",16,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"to_naive_date","","Returns a parsed naive date out of given fields.",16,{"inputs":[{"name":"self"}],"output":{"name":"parseresult"}}],[11,"to_naive_time","","Returns a parsed naive time out of given fields.",16,{"inputs":[{"name":"self"}],"output":{"name":"parseresult"}}],[11,"to_naive_datetime_with_offset","","Returns a parsed naive date and time out of given fields, except for the `offset` field (assumed to have a given value). This is required for parsing a local time or other known-timezone inputs.",16,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"parseresult"}}],[11,"to_fixed_offset","","Returns a parsed fixed time zone offset out of given fields.",16,{"inputs":[{"name":"self"}],"output":{"name":"parseresult"}}],[11,"to_datetime","","Returns a parsed timezone-aware date and time out of given fields.",16,{"inputs":[{"name":"self"}],"output":{"name":"parseresult"}}],[11,"to_datetime_with_timezone","","Returns a parsed timezone-aware date and time out of given fields, with an additional `TimeZone` used to interpret and validate the local date.",16,{"inputs":[{"name":"self"},{"name":"tz"}],"output":{"name":"parseresult"}}],[0,"strftime","chrono::format","`strftime`/`strptime`-inspired date and time formatting syntax.",null,null],[3,"StrftimeItems","chrono::format::strftime","Parsing iterator for `strftime`-like format strings.",null,null],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"strftimeitems"}}],[11,"new","","Creates a new parsing iterator from the `strftime`-like format string.",17,{"inputs":[{"name":"str"}],"output":{"name":"strftimeitems"}}],[11,"next","","",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[6,"ParseResult","chrono::format","Same to `Result<T, ParseError>`.",null,null],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"pad"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"pad"}],"output":{"name":"bool"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"numeric"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"numeric"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"numeric"}],"output":{"name":"bool"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"internalnumeric"}],"output":{"name":"bool"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"fixed"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"fixed"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"fixed"}],"output":{"name":"bool"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"internalfixed"}],"output":{"name":"bool"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"item"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"item"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"item"}],"output":{"name":"bool"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"parseerror"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",20,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Makes a new `DelayedFormat` value out of local date and time.",21,{"inputs":[{"name":"option"},{"name":"option"},{"name":"i"}],"output":{"name":"delayedformat"}}],[11,"new_with_offset","","Makes a new `DelayedFormat` value out of local date and time and UTC offset.",21,{"inputs":[{"name":"option"},{"name":"option"},{"name":"off"},{"name":"i"}],"output":{"name":"delayedformat"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","chrono","",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[8,"Datelike","","The common set of methods for date component.",null,null],[10,"year","","Returns the year number in the calendar date.",22,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"year_ce","","Returns the absolute year number starting from 1 with a boolean flag, which is false when the year predates the epoch (BCE/BC) and true otherwise (CE/AD).",22,null],[10,"month","","Returns the month number starting from 1.",22,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"month0","","Returns the month number starting from 0.",22,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"day","","Returns the day of month starting from 1.",22,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"day0","","Returns the day of month starting from 0.",22,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"ordinal","","Returns the day of year starting from 1.",22,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"ordinal0","","Returns the day of year starting from 0.",22,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"weekday","","Returns the day of week.",22,{"inputs":[{"name":"self"}],"output":{"name":"weekday"}}],[10,"isoweekdate","","Returns the ISO week date: an adjusted year, week number and day of week. The adjusted year may differ from that of the calendar date.",22,null],[10,"with_year","","Makes a new value with the year number changed.",22,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"option"}}],[10,"with_month","","Makes a new value with the month number (starting from 1) changed.",22,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_month0","","Makes a new value with the month number (starting from 0) changed.",22,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_day","","Makes a new value with the day of month (starting from 1) changed.",22,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_day0","","Makes a new value with the day of month (starting from 0) changed.",22,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_ordinal","","Makes a new value with the day of year (starting from 1) changed.",22,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_ordinal0","","Makes a new value with the day of year (starting from 0) changed.",22,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"num_days_from_ce","","Returns the number of days since January 1, 1 (Day 1) in the proleptic Gregorian calendar.",22,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[8,"Timelike","","The common set of methods for time component.",null,null],[10,"hour","","Returns the hour number from 0 to 23.",23,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"hour12","","Returns the hour number from 1 to 12 with a boolean flag, which is false for AM and true for PM.",23,null],[10,"minute","","Returns the minute number from 0 to 59.",23,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"second","","Returns the second number from 0 to 59.",23,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"nanosecond","","Returns the number of nanoseconds since the whole non-leap second. The range from 1,000,000,000 to 1,999,999,999 represents the leap second.",23,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"with_hour","","Makes a new value with the hour number changed.",23,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_minute","","Makes a new value with the minute number changed.",23,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_second","","Makes a new value with the second number changed.",23,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_nanosecond","","Makes a new value with nanoseconds since the whole non-leap second changed.",23,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[11,"num_seconds_from_midnight","","Returns the number of non-leap seconds past the last midnight.",23,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"weekday"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"weekday"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,null],[11,"succ","","The next day in the week.",0,{"inputs":[{"name":"self"}],"output":{"name":"weekday"}}],[11,"pred","","The previous day in the week.",0,{"inputs":[{"name":"self"}],"output":{"name":"weekday"}}],[11,"number_from_monday","","Returns a day-of-week number starting from Monday = 1. (ISO 8601 weekday number)",0,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"number_from_sunday","","Returns a day-of-week number starting from Sunday = 1.",0,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"num_days_from_monday","","Returns a day-of-week number starting from Monday = 0.",0,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"num_days_from_sunday","","Returns a day-of-week number starting from Sunday = 0.",0,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_i64","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"parseweekdayerror"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"parseweekdayerror"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"self"},{"name":"parseweekdayerror"}],"output":{"name":"bool"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"weeks","","Makes a new `Duration` with given number of weeks. Equivalent to `Duration::seconds(weeks * 7 * 24 * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",25,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"days","","Makes a new `Duration` with given number of days. Equivalent to `Duration::seconds(days * 24 * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",25,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"hours","","Makes a new `Duration` with given number of hours. Equivalent to `Duration::seconds(hours * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",25,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"minutes","","Makes a new `Duration` with given number of minutes. Equivalent to `Duration::seconds(minutes * 60)` with overflow checks. Panics when the duration is out of bounds.",25,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"seconds","","Makes a new `Duration` with given number of seconds. Panics when the duration is more than `i64::MAX` milliseconds or less than `i64::MIN` milliseconds.",25,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"milliseconds","","Makes a new `Duration` with given number of milliseconds.",25,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"microseconds","","Makes a new `Duration` with given number of microseconds.",25,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"nanoseconds","","Makes a new `Duration` with given number of nanoseconds.",25,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"span","","Runs a closure, returning the duration of time it took to run the closure.",25,{"inputs":[{"name":"f"}],"output":{"name":"duration"}}],[11,"num_weeks","","Returns the total number of whole weeks in the duration.",25,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_days","","Returns the total number of whole days in the duration.",25,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_hours","","Returns the total number of whole hours in the duration.",25,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_minutes","","Returns the total number of whole minutes in the duration.",25,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_seconds","","Returns the total number of whole seconds in the duration.",25,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_milliseconds","","Returns the total number of whole milliseconds in the duration,",25,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_microseconds","","Returns the total number of whole microseconds in the duration, or `None` on overflow (exceeding 2^63 microseconds in either direction).",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"num_nanoseconds","","Returns the total number of whole nanoseconds in the duration, or `None` on overflow (exceeding 2^63 nanoseconds in either direction).",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"checked_add","","Add two durations, returning `None` if overflow occurred.",25,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"option"}}],[11,"checked_sub","","Subtract two durations, returning `None` if overflow occurred.",25,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"option"}}],[11,"min_value","","The minimum possible `Duration`: `i64::MIN` milliseconds.",25,{"inputs":[],"output":{"name":"duration"}}],[11,"max_value","","The maximum possible `Duration`: `i64::MAX` milliseconds.",25,{"inputs":[],"output":{"name":"duration"}}],[11,"zero","","A duration where the stored seconds and nanoseconds are equal to zero.",25,{"inputs":[],"output":{"name":"duration"}}],[11,"is_zero","","Returns `true` if the duration equals `Duration::zero()`.",25,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_std","","Creates a `time::Duration` object from `std::time::Duration`",25,{"inputs":[{"name":"duration"}],"output":{"name":"result"}}],[11,"to_std","","Creates a `std::time::Duration` object from `time::Duration`",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"partial_cmp","","",25,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"option"}}],[11,"lt","","",25,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"le","","",25,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"gt","","",25,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ge","","",25,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"sub","","",25,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"div","","",25,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"duration"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"add","","",25,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"duration"}}],[11,"mul","","",25,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"duration"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"cmp","","",25,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"ordering"}}],[11,"neg","","",25,{"inputs":[{"name":"self"}],"output":{"name":"duration"}}],[11,"add","chrono::naive::time","",8,{"inputs":[{"name":"self"},{"name":"fixedoffset"}],"output":{"name":"naivetime"}}],[11,"sub","","",8,{"inputs":[{"name":"self"},{"name":"fixedoffset"}],"output":{"name":"naivetime"}}],[11,"add","chrono::naive::datetime","",9,{"inputs":[{"name":"self"},{"name":"fixedoffset"}],"output":{"name":"naivedatetime"}}],[11,"sub","","",9,{"inputs":[{"name":"self"},{"name":"fixedoffset"}],"output":{"name":"naivedatetime"}}],[11,"add","chrono::datetime","",11,{"inputs":[{"name":"self"},{"name":"fixedoffset"}],"output":{"name":"datetime"}}],[11,"sub","","",11,{"inputs":[{"name":"self"},{"name":"fixedoffset"}],"output":{"name":"datetime"}}]],"paths":[[4,"Weekday"],[4,"LocalResult"],[3,"UTC"],[3,"FixedOffset"],[3,"Local"],[8,"Offset"],[8,"TimeZone"],[3,"NaiveDate"],[3,"NaiveTime"],[3,"NaiveDateTime"],[3,"Date"],[3,"DateTime"],[4,"Pad"],[4,"Numeric"],[4,"Fixed"],[4,"Item"],[3,"Parsed"],[3,"StrftimeItems"],[3,"InternalNumeric"],[3,"InternalFixed"],[3,"ParseError"],[3,"DelayedFormat"],[8,"Datelike"],[8,"Timelike"],[3,"ParseWeekdayError"],[3,"Duration"]]};
searchIndex["dtoa"] = {"doc":"","items":[[5,"write","dtoa","",null,{"inputs":[{"name":"w"},{"name":"v"}],"output":{"name":"result"}}],[8,"Floating","","",null,null],[10,"write","","",0,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[14,"diyfp","","",null,null],[14,"dtoa","","",null,null]],"paths":[[8,"Floating"]]};
searchIndex["itoa"] = {"doc":"","items":[[5,"write","itoa","",null,{"inputs":[{"name":"w"},{"name":"v"}],"output":{"name":"result"}}],[8,"Integer","","",null,null],[10,"write","","",0,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}]],"paths":[[8,"Integer"]]};
searchIndex["juju"] = {"doc":"A library to interface with Juju.  For more information about Juju see Juju","items":[[4,"LogLevel","juju","An enum representing the available verbosity levels of the logging framework",null,null],[13,"Error","","The \"error\" level.",0,null],[13,"Warn","","The \"warn\" level.",0,null],[13,"Info","","The \"info\" level.",0,null],[13,"Debug","","The \"debug\" level.",0,null],[13,"Trace","","The \"trace\" level.",0,null],[5,"log","","Log a message, at an optional log::LogLevel, to the Juju log",null,null],[3,"Status","","",null,null],[12,"status_type","","The type of status",1,null],[12,"message","","A message to show alongside the status",1,null],[3,"Context","","",null,null],[12,"relation_type","","The scope for the current relation hook",2,null],[12,"relation_id","","The relation ID for the current relation hook",2,null],[12,"unit","","Local unit ID",2,null],[12,"relations","","relation data for all related units",2,null],[3,"Config","","A HashMap representation of the charm's config.yaml, with some extra features: - See which values in the HashMap have changed since the previous hook. - For values that have changed, see what the previous value was. - Store arbitrary data for use in a later hook.",null,null],[3,"Relation","","",null,null],[12,"name","","The name of a unit related to your service",3,null],[12,"id","","The id of the unit related to your service",3,null],[3,"Hook","","",null,null],[12,"name","","The name of the hook to call",4,null],[12,"callback","","A function to call when Juju calls this hook # Failures Your function passed in needs to return a String on error so that users will know what happened.  Ideally this should also be logged with juju::log",4,null],[4,"JujuError","","",null,null],[13,"AddrParseError","","",5,null],[13,"FromUtf8Error","","",5,null],[13,"IoError","","",5,null],[13,"ParseIntError","","",5,null],[13,"RusqliteError","","",5,null],[13,"SerdeError","","",5,null],[13,"VarError","","",5,null],[4,"Transport","","",null,null],[13,"Tcp","","",6,null],[13,"Udp","","",6,null],[4,"StatusType","","For information about what these StatusType variants mean see: Status reference",null,null],[13,"Maintenance","","",7,null],[13,"Waiting","","",7,null],[13,"Active","","",7,null],[13,"Blocked","","",7,null],[5,"add_metric","","Add metric values See Juju Metrics for more information May only be called from the collect-metrics hook # Failures Returns stderr if the add_metric command fails",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[5,"az_info","","Get the availability zone # Failures Returns stderr if the meter_status command fails",null,{"inputs":[],"output":{"name":"result"}}],[5,"meter_status","","Get the meter status, if running in the meter-status-changed hook # Failures Returns stderr if the meter_status command fails",null,{"inputs":[],"output":{"name":"result"}}],[5,"meter_info","","Get the meter status information, if running in the meter-status-changed hook # Failures Returns stderr if the meter_info command fails",null,{"inputs":[],"output":{"name":"result"}}],[5,"reboot","","This will reboot your juju instance.  Examples of using this are when a new kernel is installed and the virtual machine or server needs to be rebooted to use it. # Failures Returns stderr if the reboot command fails",null,{"inputs":[],"output":{"name":"result"}}],[5,"application_version_set","","Charm authors may trigger this command from any hook to output what version of the application is running. This could be a package version, for instance postgres version 9.5. It could also be a build number or version control revision identifier, for instance git sha 6fb7ba68. # Failures Returns stderr if the action_get command fails",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"action_get_all","","action_get_all gets all values that are set See Juju Actions for more information # Failures Returns stderr if the action_get command fails",null,{"inputs":[],"output":{"name":"result"}}],[5,"action_get","","action_get gets the value of the parameter at the given key See Juju Actions for more information # Failures Returns stderr if the action_get command fails",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"action_name","","Get the name of the currently executing action # Failures Returns JujuError if the environment variable JUJU_ACTION_NAME does not exist",null,{"inputs":[],"output":{"name":"result"}}],[5,"action_uuid","","Get the uuid of the currently executing action # Failures Returns JujuError if the environment variable JUJU_ACTION_UUID does not exist",null,{"inputs":[],"output":{"name":"result"}}],[5,"action_tag","","Get the tag of the currently executing action # Failures Returns JujuError if the environment variable JUJU_ACTION_TAG does not exist",null,{"inputs":[],"output":{"name":"result"}}],[5,"action_set","","action_set permits the Action to set results in a map to be returned at completion of the Action. See Juju Actions for more information # Failures Returns stderr if the action_set command fails",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[5,"action_fail","","See Juju Actions for more information # Failures Returns stderr if the action_fail command fails",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"unit_get_private_addr","","This will return the private IP address associated with the unit. It can be very useful for services that require communicating with the other units related to it. # Failures Will return a String of the stderr if the call fails",null,{"inputs":[],"output":{"name":"result"}}],[5,"unit_get_public_addr","","This will return the public IP address associated with the unit. # Failures Will return a String of the stderr if the call fails",null,{"inputs":[],"output":{"name":"result"}}],[5,"config_get","","This will return a configuration item that corresponds to the key passed in # Failures Will return a String of the stderr if the call fails",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"config_get_all","","config_get_all will return all configuration options as a HashMap<String,String> # Failures Returns a String of if the configuration options are not able to be transformed into a HashMap",null,{"inputs":[],"output":{"name":"result"}}],[5,"open_port","","This will expose a port on the unit.  The transport argument will indicate whether tcp or udp should be exposed # Failures Will return a String of the stderr if the call fails",null,{"inputs":[{"name":"usize"},{"name":"transport"}],"output":{"name":"result"}}],[5,"close_port","","This will hide a port on the unit.  The transport argument will indicate whether tcp or udp should be exposed # Failures Will return a String of the stderr if the call fails",null,{"inputs":[{"name":"usize"},{"name":"transport"}],"output":{"name":"result"}}],[5,"relation_set","","Set relation information for the current unit # Failures Will return a String of the stderr if the call fails",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[5,"relation_set_by_id","","Sets relation information using a specific relation ID. Used outside of relation hooks # Failures Will return a String of the stderr if the call fails",null,{"inputs":[{"name":"str"},{"name":"str"},{"name":"relation"}],"output":{"name":"result"}}],[5,"relation_get","","Get relation information for the current unit # Failures Will return a String of the stderr if the call fails",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"relation_get_by_unit","","Get relation information for a specific unit # Failures Will return a String of the stderr if the call fails",null,{"inputs":[{"name":"str"},{"name":"relation"}],"output":{"name":"result"}}],[5,"relation_get_by_id","","Get relation information using a specific relation ID. Used outside of relation hooks # Failures Will return a String of the stderr if the call fails",null,{"inputs":[{"name":"str"},{"name":"relation"},{"name":"relation"}],"output":{"name":"result"}}],[5,"relation_list","","Returns a list of all related units # Failures Will return a String of the stderr if the call fails",null,{"inputs":[],"output":{"name":"result"}}],[5,"relation_list_by_id","","Returns a list of all related units for the supplied identifier # Failures Will return a String of the stderr if the call fails",null,{"inputs":[{"name":"relation"}],"output":{"name":"result"}}],[5,"relation_ids","","",null,{"inputs":[],"output":{"name":"result"}}],[5,"relation_ids_by_identifier","","Gets the relation IDs by their identifier # Failures Will return a String of the stderr if the call fails",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"status_set","","Set the status of your unit to indicate to the Juju if everything is ok or something is wrong. See the Status enum for information about what can be set. # Failures Will return a String of the stderr if the call fails",null,{"inputs":[{"name":"status"}],"output":{"name":"result"}}],[5,"status_get","","Retrieve the previously set juju workload state # Failures Will return a String of the stderr if the call fails",null,{"inputs":[],"output":{"name":"result"}}],[5,"storage_get_location","","If storage drives were allocated to your unit this will get the path of them. In the storage-attaching hook this will tell you the location where the storage is attached to.  IE: /dev/xvdf for block devices or /mnt/{name} for filesystem devices # Failures Will return a String of the stderr if the call fails",null,{"inputs":[],"output":{"name":"result"}}],[5,"storage_get","","Return the location of the mounted storage device.  The mounted storage devices can be gotten by calling storage_list() and then passed into this function to get their mount location. # Failures Will return a String of the stderr if the call fails",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"storage_list","","Used to list storage instances that are attached to the unit. The names returned may be passed through to storage_get # Failures Will return a String of the stderr if the call fails",null,{"inputs":[],"output":{"name":"result"}}],[5,"process_hooks","","Call this to process your cmd line arguments and call any needed hooks # Examples ```     extern crate juju;     extern crate log;",null,{"inputs":[{"name":"vec"}],"output":{"name":"result"}}],[5,"leader_get","","Juju leader get value(s) # Failures Will return stderr as a String if the function fails to run",null,{"inputs":[{"name":"option"}],"output":{"name":"result"}}],[5,"leader_set","","Juju leader set value(s) # Failures Will return stderr as a String if the function fails to run",null,{"inputs":[{"name":"hashmap"}],"output":{"name":"result"}}],[5,"is_leader","","Returns true/false if this unit is the leader # Failures Will return stderr as a String if the function fails to run # Examples ``` extern crate juju; let leader = match juju::is_leader(){   Ok(l) => l,   Err(e) => {     println!(\"Failed to run.  Error was {:?}\", e);     //Bail     return;   }, }; if leader{   println!(\"I am the leader!\"); }else{   println!(\"I am not the leader.  Maybe later I will be promoted\"); } ```",null,{"inputs":[],"output":{"name":"result"}}],[0,"unitdata","","",null,null],[3,"Storage","juju::unitdata","A connection to the unit's Key/Value data Simple key value database for local unit state within charms. Values are automatically json encoded/decoded.",null,null],[3,"Record","","",null,null],[3,"History","","",null,null],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Connect to the unit's database",8,{"inputs":[{"name":"option"}],"output":{"name":"result"}}],[11,"get","","",8,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"getrange","","Get a range of keys starting with a common prefix as a mapping of keys to values.",8,{"inputs":[{"name":"self"},{"name":"str"},{"name":"bool"}],"output":{"name":"result"}}],[11,"update","","Set the values of multiple keys at once. Accepts an optional prefix to apply to all keys before setting",8,{"inputs":[{"name":"self"},{"name":"hashmap"},{"name":"option"}],"output":{"name":"result"}}],[11,"unset","","Remove a key from the database entirely.",8,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"unsetrange","","Remove a range of keys starting with a common prefix, from the database entirely.  If keys is set to None it will delete all keys Returns number of rows deleted",8,{"inputs":[{"name":"self"},{"name":"option"},{"name":"option"}],"output":{"name":"result"}}],[11,"set","","Set a value in the database.",8,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"gethistory","","",8,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","juju","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_string","","",5,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from","","",5,{"inputs":[{"name":"error"}],"output":{"name":"jujuerror"}}],[11,"from","","",5,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"jujuerror"}}],[11,"from","","",5,{"inputs":[{"name":"parseinterror"}],"output":{"name":"jujuerror"}}],[11,"from","","",5,{"inputs":[{"name":"varerror"}],"output":{"name":"jujuerror"}}],[11,"from","","",5,{"inputs":[{"name":"error"}],"output":{"name":"jujuerror"}}],[11,"from","","",5,{"inputs":[{"name":"error"}],"output":{"name":"jujuerror"}}],[11,"from","","",5,{"inputs":[{"name":"addrparseerror"}],"output":{"name":"jujuerror"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_string","","Returns a String representation of the enum variant",7,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_from_env","","Constructs a new `Context` Creates a context that's filled out from the env variables # Example usage ``` extern crate juju; let context = juju::Context::new_from_env(); ```",2,{"inputs":[],"output":{"name":"context"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new Config and automatically load the previous config values if the .juju-persistent-config is present The .juju-persistent-config is also saved automatically when this struct is dropped.",11,{"inputs":[],"output":{"name":"result"}}],[11,"get","","Return the current value for this key",11,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"changed","","Return true if the current value for this key is different from the previous value.",11,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"previous","","Return previous value for this key, or None if there is no previous value.",11,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"drop","","",11,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"hook"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"hook"}],"output":{"name":"bool"}}],[14,"hook","","",null,null],[14,"log","","",null,null],[14,"status_set","","",null,null],[11,"max","","Returns the most verbose logging level.",0,{"inputs":[],"output":{"name":"loglevel"}}],[11,"to_log_level_filter","","Converts the `LogLevel` to the equivalent `LogLevelFilter`.",0,{"inputs":[{"name":"self"}],"output":{"name":"loglevelfilter"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"name":"option"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":{"name":"option"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"loglevel"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":{"name":"bool"}}],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"name":"ordering"}}]],"paths":[[4,"LogLevel"],[3,"Status"],[3,"Context"],[3,"Relation"],[3,"Hook"],[4,"JujuError"],[4,"Transport"],[4,"StatusType"],[3,"Storage"],[3,"Record"],[3,"History"],[3,"Config"]]};
searchIndex["libc"] = {"doc":"Crate docs","items":[[3,"group","libc","",null,null],[12,"gr_name","","",0,null],[12,"gr_passwd","","",0,null],[12,"gr_gid","","",0,null],[12,"gr_mem","","",0,null],[3,"utimbuf","","",null,null],[12,"actime","","",1,null],[12,"modtime","","",1,null],[3,"timeval","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_usec","","",2,null],[3,"timespec","","",null,null],[12,"tv_sec","","",3,null],[12,"tv_nsec","","",3,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",4,null],[12,"rlim_max","","",4,null],[3,"rusage","","",null,null],[12,"ru_utime","","",5,null],[12,"ru_stime","","",5,null],[12,"ru_maxrss","","",5,null],[12,"ru_ixrss","","",5,null],[12,"ru_idrss","","",5,null],[12,"ru_isrss","","",5,null],[12,"ru_minflt","","",5,null],[12,"ru_majflt","","",5,null],[12,"ru_nswap","","",5,null],[12,"ru_inblock","","",5,null],[12,"ru_oublock","","",5,null],[12,"ru_msgsnd","","",5,null],[12,"ru_msgrcv","","",5,null],[12,"ru_nsignals","","",5,null],[12,"ru_nvcsw","","",5,null],[12,"ru_nivcsw","","",5,null],[3,"in_addr","","",null,null],[12,"s_addr","","",6,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",7,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",8,null],[12,"imr_interface","","",8,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",9,null],[12,"ipv6mr_interface","","",9,null],[3,"hostent","","",null,null],[12,"h_name","","",10,null],[12,"h_aliases","","",10,null],[12,"h_addrtype","","",10,null],[12,"h_length","","",10,null],[12,"h_addr_list","","",10,null],[3,"iovec","","",null,null],[12,"iov_base","","",11,null],[12,"iov_len","","",11,null],[3,"pollfd","","",null,null],[12,"fd","","",12,null],[12,"events","","",12,null],[12,"revents","","",12,null],[3,"winsize","","",null,null],[12,"ws_row","","",13,null],[12,"ws_col","","",13,null],[12,"ws_xpixel","","",13,null],[12,"ws_ypixel","","",13,null],[3,"linger","","",null,null],[12,"l_onoff","","",14,null],[12,"l_linger","","",14,null],[3,"sigval","","",null,null],[12,"sival_ptr","","",15,null],[3,"sockaddr","","",null,null],[12,"sa_family","","",16,null],[12,"sa_data","","",16,null],[3,"sockaddr_in","","",null,null],[12,"sin_family","","",17,null],[12,"sin_port","","",17,null],[12,"sin_addr","","",17,null],[12,"sin_zero","","",17,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_family","","",18,null],[12,"sin6_port","","",18,null],[12,"sin6_flowinfo","","",18,null],[12,"sin6_addr","","",18,null],[12,"sin6_scope_id","","",18,null],[3,"sockaddr_un","","",null,null],[12,"sun_family","","",19,null],[12,"sun_path","","",19,null],[3,"sockaddr_storage","","",null,null],[12,"ss_family","","",20,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",21,null],[12,"ai_family","","",21,null],[12,"ai_socktype","","",21,null],[12,"ai_protocol","","",21,null],[12,"ai_addrlen","","",21,null],[12,"ai_addr","","",21,null],[12,"ai_canonname","","",21,null],[12,"ai_next","","",21,null],[3,"sockaddr_nl","","",null,null],[12,"nl_family","","",22,null],[12,"nl_pid","","",22,null],[12,"nl_groups","","",22,null],[3,"sockaddr_ll","","",null,null],[12,"sll_family","","",23,null],[12,"sll_protocol","","",23,null],[12,"sll_ifindex","","",23,null],[12,"sll_hatype","","",23,null],[12,"sll_pkttype","","",23,null],[12,"sll_halen","","",23,null],[12,"sll_addr","","",23,null],[3,"fd_set","","",null,null],[3,"tm","","",null,null],[12,"tm_sec","","",24,null],[12,"tm_min","","",24,null],[12,"tm_hour","","",24,null],[12,"tm_mday","","",24,null],[12,"tm_mon","","",24,null],[12,"tm_year","","",24,null],[12,"tm_wday","","",24,null],[12,"tm_yday","","",24,null],[12,"tm_isdst","","",24,null],[12,"tm_gmtoff","","",24,null],[12,"tm_zone","","",24,null],[3,"sched_param","","",null,null],[12,"sched_priority","","",25,null],[3,"Dl_info","","",null,null],[12,"dli_fname","","",26,null],[12,"dli_fbase","","",26,null],[12,"dli_sname","","",26,null],[12,"dli_saddr","","",26,null],[3,"epoll_event","","",null,null],[12,"events","","",27,null],[12,"u64","","",27,null],[3,"utsname","","",null,null],[12,"sysname","","",28,null],[12,"nodename","","",28,null],[12,"release","","",28,null],[12,"version","","",28,null],[12,"machine","","",28,null],[12,"domainname","","",28,null],[3,"lconv","","",null,null],[12,"decimal_point","","",29,null],[12,"thousands_sep","","",29,null],[12,"grouping","","",29,null],[12,"int_curr_symbol","","",29,null],[12,"currency_symbol","","",29,null],[12,"mon_decimal_point","","",29,null],[12,"mon_thousands_sep","","",29,null],[12,"mon_grouping","","",29,null],[12,"positive_sign","","",29,null],[12,"negative_sign","","",29,null],[12,"int_frac_digits","","",29,null],[12,"frac_digits","","",29,null],[12,"p_cs_precedes","","",29,null],[12,"p_sep_by_space","","",29,null],[12,"n_cs_precedes","","",29,null],[12,"n_sep_by_space","","",29,null],[12,"p_sign_posn","","",29,null],[12,"n_sign_posn","","",29,null],[12,"int_p_cs_precedes","","",29,null],[12,"int_p_sep_by_space","","",29,null],[12,"int_n_cs_precedes","","",29,null],[12,"int_n_sep_by_space","","",29,null],[12,"int_p_sign_posn","","",29,null],[12,"int_n_sign_posn","","",29,null],[3,"sigevent","","",null,null],[12,"sigev_value","","",30,null],[12,"sigev_signo","","",30,null],[12,"sigev_notify","","",30,null],[12,"sigev_notify_thread_id","","",30,null],[3,"dirent","","",null,null],[12,"d_ino","","",31,null],[12,"d_off","","",31,null],[12,"d_reclen","","",31,null],[12,"d_type","","",31,null],[12,"d_name","","",31,null],[3,"dirent64","","",null,null],[12,"d_ino","","",32,null],[12,"d_off","","",32,null],[12,"d_reclen","","",32,null],[12,"d_type","","",32,null],[12,"d_name","","",32,null],[3,"rlimit64","","",null,null],[12,"rlim_cur","","",33,null],[12,"rlim_max","","",33,null],[3,"glob_t","","",null,null],[12,"gl_pathc","","",34,null],[12,"gl_pathv","","",34,null],[12,"gl_offs","","",34,null],[12,"gl_flags","","",34,null],[3,"ifaddrs","","",null,null],[12,"ifa_next","","",35,null],[12,"ifa_name","","",35,null],[12,"ifa_flags","","",35,null],[12,"ifa_addr","","",35,null],[12,"ifa_netmask","","",35,null],[12,"ifa_ifu","","",35,null],[12,"ifa_data","","",35,null],[3,"pthread_mutex_t","","",null,null],[3,"pthread_rwlock_t","","",null,null],[3,"pthread_mutexattr_t","","",null,null],[3,"pthread_cond_t","","",null,null],[3,"pthread_condattr_t","","",null,null],[3,"passwd","","",null,null],[12,"pw_name","","",36,null],[12,"pw_passwd","","",36,null],[12,"pw_uid","","",36,null],[12,"pw_gid","","",36,null],[12,"pw_gecos","","",36,null],[12,"pw_dir","","",36,null],[12,"pw_shell","","",36,null],[3,"spwd","","",null,null],[12,"sp_namp","","",37,null],[12,"sp_pwdp","","",37,null],[12,"sp_lstchg","","",37,null],[12,"sp_min","","",37,null],[12,"sp_max","","",37,null],[12,"sp_warn","","",37,null],[12,"sp_inact","","",37,null],[12,"sp_expire","","",37,null],[12,"sp_flag","","",37,null],[3,"statvfs","","",null,null],[12,"f_bsize","","",38,null],[12,"f_frsize","","",38,null],[12,"f_blocks","","",38,null],[12,"f_bfree","","",38,null],[12,"f_bavail","","",38,null],[12,"f_files","","",38,null],[12,"f_ffree","","",38,null],[12,"f_favail","","",38,null],[12,"f_fsid","","",38,null],[12,"f_flag","","",38,null],[12,"f_namemax","","",38,null],[3,"dqblk","","",null,null],[12,"dqb_bhardlimit","","",39,null],[12,"dqb_bsoftlimit","","",39,null],[12,"dqb_curspace","","",39,null],[12,"dqb_ihardlimit","","",39,null],[12,"dqb_isoftlimit","","",39,null],[12,"dqb_curinodes","","",39,null],[12,"dqb_btime","","",39,null],[12,"dqb_itime","","",39,null],[12,"dqb_valid","","",39,null],[3,"signalfd_siginfo","","",null,null],[12,"ssi_signo","","",40,null],[12,"ssi_errno","","",40,null],[12,"ssi_code","","",40,null],[12,"ssi_pid","","",40,null],[12,"ssi_uid","","",40,null],[12,"ssi_fd","","",40,null],[12,"ssi_tid","","",40,null],[12,"ssi_band","","",40,null],[12,"ssi_overrun","","",40,null],[12,"ssi_trapno","","",40,null],[12,"ssi_status","","",40,null],[12,"ssi_int","","",40,null],[12,"ssi_ptr","","",40,null],[12,"ssi_utime","","",40,null],[12,"ssi_stime","","",40,null],[12,"ssi_addr","","",40,null],[3,"fsid_t","","",null,null],[3,"mq_attr","","",null,null],[12,"mq_flags","","",41,null],[12,"mq_maxmsg","","",41,null],[12,"mq_msgsize","","",41,null],[12,"mq_curmsgs","","",41,null],[3,"cpu_set_t","","",null,null],[3,"if_nameindex","","",null,null],[12,"if_index","","",42,null],[12,"if_name","","",42,null],[3,"msginfo","","",null,null],[12,"msgpool","","",43,null],[12,"msgmap","","",43,null],[12,"msgmax","","",43,null],[12,"msgmnb","","",43,null],[12,"msgmni","","",43,null],[12,"msgssz","","",43,null],[12,"msgtql","","",43,null],[12,"msgseg","","",43,null],[3,"aiocb","","",null,null],[12,"aio_fildes","","",44,null],[12,"aio_lio_opcode","","",44,null],[12,"aio_reqprio","","",44,null],[12,"aio_buf","","",44,null],[12,"aio_nbytes","","",44,null],[12,"aio_sigevent","","",44,null],[12,"aio_offset","","",44,null],[3,"__exit_status","","",null,null],[12,"e_termination","","",45,null],[12,"e_exit","","",45,null],[3,"__timeval","","",null,null],[12,"tv_sec","","",46,null],[12,"tv_usec","","",46,null],[3,"utmpx","","",null,null],[12,"ut_type","","",47,null],[12,"ut_pid","","",47,null],[12,"ut_line","","",47,null],[12,"ut_id","","",47,null],[12,"ut_user","","",47,null],[12,"ut_host","","",47,null],[12,"ut_exit","","",47,null],[12,"ut_session","","",47,null],[12,"ut_tv","","",47,null],[12,"ut_addr_v6","","",47,null],[3,"sigaction","","",null,null],[12,"sa_sigaction","","",48,null],[12,"sa_mask","","",48,null],[12,"sa_flags","","",48,null],[3,"stack_t","","",null,null],[12,"ss_sp","","",49,null],[12,"ss_flags","","",49,null],[12,"ss_size","","",49,null],[3,"siginfo_t","","",null,null],[12,"si_signo","","",50,null],[12,"si_errno","","",50,null],[12,"si_code","","",50,null],[12,"_pad","","",50,null],[3,"glob64_t","","",null,null],[12,"gl_pathc","","",51,null],[12,"gl_pathv","","",51,null],[12,"gl_offs","","",51,null],[12,"gl_flags","","",51,null],[3,"ucred","","",null,null],[12,"pid","","",52,null],[12,"uid","","",52,null],[12,"gid","","",52,null],[3,"statfs","","",null,null],[12,"f_type","","",53,null],[12,"f_bsize","","",53,null],[12,"f_blocks","","",53,null],[12,"f_bfree","","",53,null],[12,"f_bavail","","",53,null],[12,"f_files","","",53,null],[12,"f_ffree","","",53,null],[12,"f_fsid","","",53,null],[12,"f_namelen","","",53,null],[12,"f_frsize","","",53,null],[3,"msghdr","","",null,null],[12,"msg_name","","",54,null],[12,"msg_namelen","","",54,null],[12,"msg_iov","","",54,null],[12,"msg_iovlen","","",54,null],[12,"msg_control","","",54,null],[12,"msg_controllen","","",54,null],[12,"msg_flags","","",54,null],[3,"cmsghdr","","",null,null],[12,"cmsg_len","","",55,null],[12,"cmsg_level","","",55,null],[12,"cmsg_type","","",55,null],[3,"termios","","",null,null],[12,"c_iflag","","",56,null],[12,"c_oflag","","",56,null],[12,"c_cflag","","",56,null],[12,"c_lflag","","",56,null],[12,"c_line","","",56,null],[12,"c_cc","","",56,null],[12,"c_ispeed","","",56,null],[12,"c_ospeed","","",56,null],[3,"flock","","",null,null],[12,"l_type","","",57,null],[12,"l_whence","","",57,null],[12,"l_start","","",57,null],[12,"l_len","","",57,null],[12,"l_pid","","",57,null],[3,"sem_t","","",null,null],[3,"sigset_t","","",null,null],[3,"sysinfo","","",null,null],[12,"uptime","","",58,null],[12,"loads","","",58,null],[12,"totalram","","",58,null],[12,"freeram","","",58,null],[12,"sharedram","","",58,null],[12,"bufferram","","",58,null],[12,"totalswap","","",58,null],[12,"freeswap","","",58,null],[12,"procs","","",58,null],[12,"pad","","",58,null],[12,"totalhigh","","",58,null],[12,"freehigh","","",58,null],[12,"mem_unit","","",58,null],[12,"_f","","",58,null],[3,"msqid_ds","","",null,null],[12,"msg_perm","","",59,null],[12,"msg_stime","","",59,null],[12,"msg_rtime","","",59,null],[12,"msg_ctime","","",59,null],[12,"msg_qnum","","",59,null],[12,"msg_qbytes","","",59,null],[12,"msg_lspid","","",59,null],[12,"msg_lrpid","","",59,null],[3,"stat","","",null,null],[12,"st_dev","","",60,null],[12,"st_ino","","",60,null],[12,"st_nlink","","",60,null],[12,"st_mode","","",60,null],[12,"st_uid","","",60,null],[12,"st_gid","","",60,null],[12,"st_rdev","","",60,null],[12,"st_size","","",60,null],[12,"st_blksize","","",60,null],[12,"st_blocks","","",60,null],[12,"st_atime","","",60,null],[12,"st_atime_nsec","","",60,null],[12,"st_mtime","","",60,null],[12,"st_mtime_nsec","","",60,null],[12,"st_ctime","","",60,null],[12,"st_ctime_nsec","","",60,null],[3,"stat64","","",null,null],[12,"st_dev","","",61,null],[12,"st_ino","","",61,null],[12,"st_nlink","","",61,null],[12,"st_mode","","",61,null],[12,"st_uid","","",61,null],[12,"st_gid","","",61,null],[12,"st_rdev","","",61,null],[12,"st_size","","",61,null],[12,"st_blksize","","",61,null],[12,"st_blocks","","",61,null],[12,"st_atime","","",61,null],[12,"st_atime_nsec","","",61,null],[12,"st_mtime","","",61,null],[12,"st_mtime_nsec","","",61,null],[12,"st_ctime","","",61,null],[12,"st_ctime_nsec","","",61,null],[3,"pthread_attr_t","","",null,null],[3,"_libc_fpxreg","","",null,null],[12,"significand","","",62,null],[12,"exponent","","",62,null],[3,"_libc_xmmreg","","",null,null],[12,"element","","",63,null],[3,"_libc_fpstate","","",null,null],[12,"cwd","","",64,null],[12,"swd","","",64,null],[12,"ftw","","",64,null],[12,"fop","","",64,null],[12,"rip","","",64,null],[12,"rdp","","",64,null],[12,"mxcsr","","",64,null],[12,"mxcr_mask","","",64,null],[12,"_st","","",64,null],[12,"_xmm","","",64,null],[3,"mcontext_t","","",null,null],[12,"gregs","","",65,null],[12,"fpregs","","",65,null],[3,"ucontext_t","","",null,null],[12,"uc_flags","","",66,null],[12,"uc_link","","",66,null],[12,"uc_stack","","",66,null],[12,"uc_mcontext","","",66,null],[12,"uc_sigmask","","",66,null],[3,"ipc_perm","","",null,null],[12,"__key","","",67,null],[12,"uid","","",67,null],[12,"gid","","",67,null],[12,"cuid","","",67,null],[12,"cgid","","",67,null],[12,"mode","","",67,null],[12,"__seq","","",67,null],[3,"shmid_ds","","",null,null],[12,"shm_perm","","",68,null],[12,"shm_segsz","","",68,null],[12,"shm_atime","","",68,null],[12,"shm_dtime","","",68,null],[12,"shm_ctime","","",68,null],[12,"shm_cpid","","",68,null],[12,"shm_lpid","","",68,null],[12,"shm_nattch","","",68,null],[4,"c_void","","",null,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[4,"DIR","","",null,null],[4,"locale_t","","",null,null],[4,"timezone","","",null,null],[4,"fpos64_t","","",null,null],[5,"FD_CLR","","",null,null],[5,"FD_ISSET","","",null,null],[5,"FD_SET","","",null,null],[5,"FD_ZERO","","",null,null],[5,"WIFSTOPPED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WSTOPSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFCONTINUED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WIFSIGNALED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WTERMSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFEXITED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WEXITSTATUS","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WCOREDUMP","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"CPU_ZERO","","",null,null],[5,"CPU_SET","","",null,null],[5,"CPU_CLR","","",null,null],[5,"CPU_ISSET","","",null,{"inputs":[{"name":"usize"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"CPU_EQUAL","","",null,{"inputs":[{"name":"cpu_set_t"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"isalnum","","",null,null],[5,"isalpha","","",null,null],[5,"iscntrl","","",null,null],[5,"isdigit","","",null,null],[5,"isgraph","","",null,null],[5,"islower","","",null,null],[5,"isprint","","",null,null],[5,"ispunct","","",null,null],[5,"isspace","","",null,null],[5,"isupper","","",null,null],[5,"isxdigit","","",null,null],[5,"tolower","","",null,null],[5,"toupper","","",null,null],[5,"fopen","","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"getchar","","",null,null],[5,"putchar","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"abort","","",null,null],[5,"exit","","",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"strcpy","","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strdup","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strlen","","",null,null],[5,"strnlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"wcstombs","","",null,null],[5,"memchr","","",null,null],[5,"memcmp","","",null,null],[5,"memcpy","","",null,null],[5,"memmove","","",null,null],[5,"memset","","",null,null],[5,"abs","","",null,null],[5,"atof","","",null,null],[5,"labs","","",null,null],[5,"rand","","",null,null],[5,"srand","","",null,null],[5,"getgrnam","","",null,null],[5,"getgrgid","","",null,null],[5,"endpwent","","",null,null],[5,"getpwnam","","",null,null],[5,"getpwuid","","",null,null],[5,"fprintf","","",null,null],[5,"printf","","",null,null],[5,"snprintf","","",null,null],[5,"sprintf","","",null,null],[5,"fscanf","","",null,null],[5,"scanf","","",null,null],[5,"sscanf","","",null,null],[5,"getchar_unlocked","","",null,null],[5,"putchar_unlocked","","",null,null],[5,"socket","","",null,null],[5,"connect","","",null,null],[5,"listen","","",null,null],[5,"accept","","",null,null],[5,"getpeername","","",null,null],[5,"getsockname","","",null,null],[5,"setsockopt","","",null,null],[5,"socketpair","","",null,null],[5,"sendto","","",null,null],[5,"shutdown","","",null,null],[5,"chmod","","",null,null],[5,"fchmod","","",null,null],[5,"fstat","","",null,null],[5,"mkdir","","",null,null],[5,"stat","","",null,null],[5,"popen","","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[5,"open","","",null,null],[5,"creat","","",null,null],[5,"fcntl","","",null,null],[5,"opendir","","",null,null],[5,"readdir","","",null,null],[5,"readdir_r","","",null,null],[5,"closedir","","",null,null],[5,"rewinddir","","",null,null],[5,"openat","","",null,null],[5,"faccessat","","",null,null],[5,"fchmodat","","",null,null],[5,"fchown","","",null,null],[5,"fchownat","","",null,null],[5,"fstatat","","",null,null],[5,"linkat","","",null,null],[5,"mkdirat","","",null,null],[5,"readlinkat","","",null,null],[5,"renameat","","",null,null],[5,"symlinkat","","",null,null],[5,"unlinkat","","",null,null],[5,"access","","",null,null],[5,"alarm","","",null,null],[5,"chdir","","",null,null],[5,"fchdir","","",null,null],[5,"chown","","",null,null],[5,"lchown","","",null,null],[5,"close","","",null,null],[5,"dup","","",null,null],[5,"dup2","","",null,null],[5,"execl","","",null,null],[5,"execle","","",null,null],[5,"execlp","","",null,null],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"fork","","",null,null],[5,"fpathconf","","",null,null],[5,"getcwd","","",null,null],[5,"getegid","","",null,null],[5,"geteuid","","",null,null],[5,"getgid","","",null,null],[5,"getgroups","","",null,null],[5,"getlogin","","",null,null],[5,"getopt","","",null,null],[5,"getpgid","","",null,null],[5,"getpgrp","","",null,null],[5,"getpid","","",null,null],[5,"getppid","","",null,null],[5,"getuid","","",null,null],[5,"isatty","","",null,null],[5,"link","","",null,null],[5,"lseek","","",null,null],[5,"pathconf","","",null,null],[5,"pause","","",null,null],[5,"pipe","","",null,null],[5,"posix_memalign","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"setgid","","",null,null],[5,"setpgid","","",null,null],[5,"setsid","","",null,null],[5,"setuid","","",null,null],[5,"sleep","","",null,null],[5,"nanosleep","","",null,null],[5,"tcgetpgrp","","",null,null],[5,"tcsetpgrp","","",null,null],[5,"ttyname","","",null,null],[5,"unlink","","",null,null],[5,"wait","","",null,null],[5,"waitpid","","",null,null],[5,"write","","",null,null],[5,"pread","","",null,null],[5,"pwrite","","",null,null],[5,"umask","","",null,null],[5,"utime","","",null,null],[5,"kill","","",null,null],[5,"mlock","","",null,null],[5,"munlock","","",null,null],[5,"mlockall","","",null,null],[5,"munlockall","","",null,null],[5,"mmap","","",null,null],[5,"munmap","","",null,null],[5,"if_nametoindex","","",null,null],[5,"if_indextoname","","",null,null],[5,"lstat","","",null,null],[5,"fsync","","",null,null],[5,"setenv","","",null,null],[5,"unsetenv","","",null,null],[5,"symlink","","",null,null],[5,"ftruncate","","",null,null],[5,"signal","","",null,null],[5,"getrlimit","","",null,null],[5,"setrlimit","","",null,null],[5,"getrusage","","",null,null],[5,"getdtablesize","","",null,null],[5,"realpath","","",null,null],[5,"flock","","",null,null],[5,"gettimeofday","","",null,null],[5,"pthread_self","","",null,null],[5,"pthread_create","","",null,null],[5,"pthread_join","","",null,null],[5,"pthread_atfork","","",null,null],[5,"pthread_exit","","",null,null],[5,"pthread_attr_init","","",null,null],[5,"pthread_attr_destroy","","",null,null],[5,"pthread_attr_setstacksize","","",null,null],[5,"pthread_attr_setdetachstate","","",null,null],[5,"pthread_detach","","",null,null],[5,"sched_yield","","",null,null],[5,"pthread_key_create","","",null,null],[5,"pthread_key_delete","","",null,null],[5,"pthread_getspecific","","",null,null],[5,"pthread_setspecific","","",null,null],[5,"pthread_mutex_init","","",null,null],[5,"pthread_mutex_destroy","","",null,null],[5,"pthread_mutex_lock","","",null,null],[5,"pthread_mutex_trylock","","",null,null],[5,"pthread_mutex_unlock","","",null,null],[5,"pthread_mutexattr_init","","",null,null],[5,"pthread_mutexattr_destroy","","",null,null],[5,"pthread_mutexattr_settype","","",null,null],[5,"pthread_cond_init","","",null,null],[5,"pthread_cond_wait","","",null,null],[5,"pthread_cond_timedwait","","",null,null],[5,"pthread_cond_signal","","",null,null],[5,"pthread_cond_broadcast","","",null,null],[5,"pthread_cond_destroy","","",null,null],[5,"pthread_condattr_init","","",null,null],[5,"pthread_condattr_destroy","","",null,null],[5,"pthread_rwlock_destroy","","",null,null],[5,"pthread_rwlock_rdlock","","",null,null],[5,"pthread_rwlock_tryrdlock","","",null,null],[5,"pthread_rwlock_wrlock","","",null,null],[5,"pthread_rwlock_trywrlock","","",null,null],[5,"pthread_rwlock_unlock","","",null,null],[5,"pthread_sigmask","","",null,null],[5,"pthread_kill","","",null,null],[5,"strerror_r","","",null,null],[5,"getsockopt","","",null,null],[5,"raise","","",null,null],[5,"sigaction","","",null,null],[5,"sigaltstack","","",null,null],[5,"sigwait","","",null,null],[5,"utimes","","",null,null],[5,"dlopen","","",null,null],[5,"dlerror","","",null,null],[5,"dlsym","","",null,null],[5,"dlclose","","",null,null],[5,"dladdr","","",null,null],[5,"getaddrinfo","","",null,null],[5,"freeaddrinfo","","",null,null],[5,"gai_strerror","","",null,null],[5,"gmtime_r","","",null,null],[5,"localtime_r","","",null,null],[5,"mktime","","",null,null],[5,"time","","",null,null],[5,"localtime","","",null,null],[5,"mknod","","",null,null],[5,"uname","","",null,null],[5,"daemon","","",null,null],[5,"gethostname","","",null,null],[5,"chroot","","",null,null],[5,"usleep","","",null,null],[5,"send","","",null,null],[5,"recv","","",null,null],[5,"putenv","","",null,null],[5,"poll","","",null,null],[5,"select","","",null,null],[5,"setlocale","","",null,null],[5,"localeconv","","",null,null],[5,"sem_destroy","","",null,null],[5,"sem_open","","",null,null],[5,"sem_close","","",null,null],[5,"sem_unlink","","",null,null],[5,"sem_wait","","",null,null],[5,"sem_trywait","","",null,null],[5,"sem_post","","",null,null],[5,"sem_init","","",null,null],[5,"statvfs","","",null,null],[5,"fstatvfs","","",null,null],[5,"readlink","","",null,null],[5,"sigemptyset","","",null,null],[5,"sigaddset","","",null,null],[5,"sigfillset","","",null,null],[5,"sigdelset","","",null,null],[5,"sigismember","","",null,null],[5,"sigprocmask","","",null,null],[5,"timegm","","",null,null],[5,"getsid","","",null,null],[5,"sysconf","","",null,null],[5,"mkfifo","","",null,null],[5,"pselect","","",null,null],[5,"fseeko","","",null,null],[5,"ftello","","",null,null],[5,"tcdrain","","",null,null],[5,"cfgetispeed","","",null,null],[5,"cfgetospeed","","",null,null],[5,"cfmakeraw","","",null,null],[5,"cfsetispeed","","",null,null],[5,"cfsetospeed","","",null,null],[5,"cfsetspeed","","",null,null],[5,"tcgetattr","","",null,null],[5,"tcsetattr","","",null,null],[5,"tcflow","","",null,null],[5,"tcflush","","",null,null],[5,"tcsendbreak","","",null,null],[5,"mkstemp","","",null,null],[5,"mkdtemp","","",null,null],[5,"tmpnam","","",null,null],[5,"openlog","","",null,null],[5,"closelog","","",null,null],[5,"setlogmask","","",null,null],[5,"syslog","","",null,null],[5,"nice","","",null,null],[5,"grantpt","","",null,null],[5,"posix_openpt","","",null,null],[5,"ptsname","","",null,null],[5,"unlockpt","","",null,null],[5,"getpwnam_r","","",null,null],[5,"getpwuid_r","","",null,null],[5,"fdatasync","","",null,null],[5,"mincore","","",null,null],[5,"clock_getres","","",null,null],[5,"clock_gettime","","",null,null],[5,"clock_nanosleep","","",null,null],[5,"clock_settime","","",null,null],[5,"prctl","","",null,null],[5,"pthread_getattr_np","","",null,null],[5,"pthread_attr_getguardsize","","",null,null],[5,"pthread_attr_getstack","","",null,null],[5,"memalign","","",null,null],[5,"setgroups","","",null,null],[5,"initgroups","","",null,null],[5,"sched_setscheduler","","",null,null],[5,"sched_getscheduler","","",null,null],[5,"sched_get_priority_max","","",null,null],[5,"sched_get_priority_min","","",null,null],[5,"epoll_create","","",null,null],[5,"epoll_create1","","",null,null],[5,"epoll_ctl","","",null,null],[5,"epoll_wait","","",null,null],[5,"pipe2","","",null,null],[5,"mount","","",null,null],[5,"umount","","",null,null],[5,"umount2","","",null,null],[5,"clone","","",null,null],[5,"statfs","","",null,null],[5,"fstatfs","","",null,null],[5,"memrchr","","",null,null],[5,"syscall","","",null,null],[5,"sendfile","","",null,null],[5,"splice","","",null,null],[5,"tee","","",null,null],[5,"vmsplice","","",null,null],[5,"posix_fadvise","","",null,null],[5,"futimens","","",null,null],[5,"utimensat","","",null,null],[5,"duplocale","","",null,null],[5,"freelocale","","",null,null],[5,"newlocale","","",null,null],[5,"uselocale","","",null,null],[5,"creat64","","",null,null],[5,"fstat64","","",null,null],[5,"ftruncate64","","",null,null],[5,"getrlimit64","","",null,null],[5,"lseek64","","",null,null],[5,"lstat64","","",null,null],[5,"mmap64","","",null,null],[5,"open64","","",null,null],[5,"openat64","","",null,null],[5,"pread64","","",null,null],[5,"pwrite64","","",null,null],[5,"readdir64","","",null,null],[5,"readdir64_r","","",null,null],[5,"setrlimit64","","",null,null],[5,"stat64","","",null,null],[5,"truncate64","","",null,null],[5,"eventfd","","",null,null],[5,"sysinfo","","",null,null],[5,"fdopendir","","",null,null],[5,"mknodat","","",null,null],[5,"ppoll","","",null,null],[5,"pthread_condattr_getclock","","",null,null],[5,"pthread_condattr_setclock","","",null,null],[5,"pthread_condattr_setpshared","","",null,null],[5,"pthread_condattr_getpshared","","",null,null],[5,"sched_getaffinity","","",null,null],[5,"sched_setaffinity","","",null,null],[5,"unshare","","",null,null],[5,"setns","","",null,null],[5,"sem_timedwait","","",null,null],[5,"accept4","","",null,null],[5,"pthread_mutex_timedlock","","",null,null],[5,"pthread_mutexattr_setpshared","","",null,null],[5,"pthread_mutexattr_getpshared","","",null,null],[5,"ptsname_r","","",null,null],[5,"clearenv","","",null,null],[5,"waitid","","",null,null],[5,"aio_read","","",null,null],[5,"aio_write","","",null,null],[5,"aio_fsync","","",null,null],[5,"aio_error","","",null,null],[5,"aio_return","","",null,null],[5,"aio_suspend","","",null,null],[5,"aio_cancel","","",null,null],[5,"lio_listio","","",null,null],[5,"lutimes","","",null,null],[5,"setpwent","","",null,null],[5,"getpwent","","",null,null],[5,"setspent","","",null,null],[5,"endspent","","",null,null],[5,"getspent","","",null,null],[5,"getspnam","","",null,null],[5,"shm_open","","",null,null],[5,"shmget","","",null,null],[5,"shmat","","",null,null],[5,"shmdt","","",null,null],[5,"shmctl","","",null,null],[5,"ftok","","",null,null],[5,"msgctl","","",null,null],[5,"msgget","","",null,null],[5,"msgrcv","","",null,null],[5,"msgsnd","","",null,null],[5,"mprotect","","",null,null],[5,"__errno_location","","",null,null],[5,"fopen64","","",null,null],[5,"freopen64","","",null,null],[5,"tmpfile64","","",null,null],[5,"fgetpos64","","",null,null],[5,"fsetpos64","","",null,null],[5,"fseeko64","","",null,null],[5,"ftello64","","",null,null],[5,"fallocate","","",null,null],[5,"posix_fallocate","","",null,null],[5,"readahead","","",null,null],[5,"getxattr","","",null,null],[5,"lgetxattr","","",null,null],[5,"fgetxattr","","",null,null],[5,"setxattr","","",null,null],[5,"lsetxattr","","",null,null],[5,"fsetxattr","","",null,null],[5,"listxattr","","",null,null],[5,"llistxattr","","",null,null],[5,"flistxattr","","",null,null],[5,"removexattr","","",null,null],[5,"lremovexattr","","",null,null],[5,"fremovexattr","","",null,null],[5,"signalfd","","",null,null],[5,"pwritev","","",null,null],[5,"preadv","","",null,null],[5,"quotactl","","",null,null],[5,"mq_open","","",null,null],[5,"mq_close","","",null,null],[5,"mq_unlink","","",null,null],[5,"mq_receive","","",null,null],[5,"mq_send","","",null,null],[5,"mq_getattr","","",null,null],[5,"mq_setattr","","",null,null],[5,"epoll_pwait","","",null,null],[5,"dup3","","",null,null],[5,"sethostname","","",null,null],[5,"mkostemp","","",null,null],[5,"mkostemps","","",null,null],[5,"sigtimedwait","","",null,null],[5,"sigwaitinfo","","",null,null],[5,"openpty","","",null,null],[5,"forkpty","","",null,null],[5,"nl_langinfo_l","","",null,null],[5,"getnameinfo","","",null,null],[5,"prlimit","","",null,null],[5,"prlimit64","","",null,null],[5,"getloadavg","","",null,null],[5,"process_vm_readv","","",null,null],[5,"process_vm_writev","","",null,null],[5,"reboot","","",null,null],[5,"setfsgid","","",null,null],[5,"setfsuid","","",null,null],[5,"setresgid","","",null,null],[5,"setresuid","","",null,null],[5,"mkfifoat","","",null,null],[5,"if_nameindex","","",null,null],[5,"if_freenameindex","","",null,null],[5,"sync_file_range","","",null,null],[5,"getifaddrs","","",null,null],[5,"freeifaddrs","","",null,null],[5,"mremap","","",null,null],[5,"glob","","",null,null],[5,"globfree","","",null,null],[5,"posix_madvise","","",null,null],[5,"shm_unlink","","",null,null],[5,"seekdir","","",null,null],[5,"telldir","","",null,null],[5,"madvise","","",null,null],[5,"msync","","",null,null],[5,"recvfrom","","",null,null],[5,"mkstemps","","",null,null],[5,"futimes","","",null,null],[5,"nl_langinfo","","",null,null],[5,"bind","","",null,null],[5,"writev","","",null,null],[5,"readv","","",null,null],[5,"sendmsg","","",null,null],[5,"recvmsg","","",null,null],[5,"utmpxname","","",null,null],[5,"getutxent","","",null,null],[5,"getutxid","","",null,null],[5,"getutxline","","",null,null],[5,"pututxline","","",null,null],[5,"setutxent","","",null,null],[5,"endutxent","","",null,null],[5,"getpt","","",null,null],[5,"sysctl","","",null,null],[5,"ioctl","","",null,null],[5,"backtrace","","",null,null],[5,"glob64","","",null,null],[5,"globfree64","","",null,null],[5,"ptrace","","",null,null],[5,"pthread_attr_getaffinity_np","","",null,null],[5,"pthread_attr_setaffinity_np","","",null,null],[5,"getpriority","","",null,null],[5,"setpriority","","",null,null],[5,"pthread_getaffinity_np","","",null,null],[5,"pthread_setaffinity_np","","",null,null],[5,"sched_getcpu","","",null,null],[5,"getcontext","","",null,null],[5,"setcontext","","",null,null],[5,"makecontext","","",null,null],[5,"swapcontext","","",null,null],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"stat"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"stat64"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"pthread_attr_t"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"_libc_fpxreg"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"_libc_xmmreg"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"_libc_fpstate"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"mcontext_t"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"ucontext_t"}}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"ipc_perm"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"shmid_ds"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"sigset_t"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"sysinfo"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"msqid_ds"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"aiocb"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"__exit_status"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"__timeval"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"utmpx"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"sigaction"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"stack_t"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"siginfo_t"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"glob64_t"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"ucred"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"statfs"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"msghdr"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"cmsghdr"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"termios"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"flock"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"sem_t"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"dirent"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"dirent64"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"rlimit64"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"glob_t"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"ifaddrs"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"pthread_mutex_t"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"pthread_rwlock_t"}}],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"pthread_mutexattr_t"}}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"pthread_cond_t"}}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"pthread_condattr_t"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"passwd"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"spwd"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"statvfs"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"dqblk"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"signalfd_siginfo"}}],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"fsid_t"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"mq_attr"}}],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"cpu_set_t"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"if_nameindex"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"msginfo"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_in"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_in6"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_un"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_storage"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"addrinfo"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_nl"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_ll"}}],[11,"clone","","",79,{"inputs":[{"name":"self"}],"output":{"name":"fd_set"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"tm"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"sched_param"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"dl_info"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"epoll_event"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"utsname"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"lconv"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"sigevent"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"group"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"utimbuf"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"timeval"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"timespec"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"rlimit"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"rusage"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"in_addr"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"in6_addr"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"ip_mreq"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"ipv6_mreq"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"hostent"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"iovec"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"pollfd"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"winsize"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"linger"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"sigval"}}],[6,"int8_t","","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"ssize_t","","",null,null],[6,"pid_t","","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[6,"in_addr_t","","",null,null],[6,"in_port_t","","",null,null],[6,"sighandler_t","","",null,null],[6,"cc_t","","",null,null],[6,"sa_family_t","","",null,null],[6,"pthread_key_t","","",null,null],[6,"speed_t","","",null,null],[6,"tcflag_t","","",null,null],[6,"loff_t","","",null,null],[6,"clockid_t","","",null,null],[6,"key_t","","",null,null],[6,"id_t","","",null,null],[6,"useconds_t","","",null,null],[6,"dev_t","","",null,null],[6,"socklen_t","","",null,null],[6,"pthread_t","","",null,null],[6,"mode_t","","",null,null],[6,"ino64_t","","",null,null],[6,"off64_t","","",null,null],[6,"blkcnt64_t","","",null,null],[6,"rlim64_t","","",null,null],[6,"shmatt_t","","",null,null],[6,"mqd_t","","",null,null],[6,"msgqnum_t","","",null,null],[6,"msglen_t","","",null,null],[6,"nfds_t","","",null,null],[6,"nl_item","","",null,null],[6,"idtype_t","","",null,null],[6,"fsblkcnt_t","","",null,null],[6,"fsfilcnt_t","","",null,null],[6,"rlim_t","","",null,null],[6,"__priority_which_t","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[6,"clock_t","","",null,null],[6,"time_t","","",null,null],[6,"ino_t","","",null,null],[6,"off_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"__fsword_t","","",null,null],[6,"c_char","","",null,null],[6,"wchar_t","","",null,null],[6,"nlink_t","","",null,null],[6,"blksize_t","","",null,null],[6,"greg_t","","",null,null],[6,"suseconds_t","","",null,null],[17,"SIG_DFL","","",null,null],[17,"SIG_IGN","","",null,null],[17,"SIG_ERR","","",null,null],[17,"DT_FIFO","","",null,null],[17,"DT_CHR","","",null,null],[17,"DT_DIR","","",null,null],[17,"DT_BLK","","",null,null],[17,"DT_REG","","",null,null],[17,"DT_LNK","","",null,null],[17,"DT_SOCK","","",null,null],[17,"FD_CLOEXEC","","",null,null],[17,"USRQUOTA","","",null,null],[17,"GRPQUOTA","","",null,null],[17,"SIGIOT","","",null,null],[17,"S_ISUID","","",null,null],[17,"S_ISGID","","",null,null],[17,"S_ISVTX","","",null,null],[17,"POLLIN","","",null,null],[17,"POLLPRI","","",null,null],[17,"POLLOUT","","",null,null],[17,"POLLERR","","",null,null],[17,"POLLHUP","","",null,null],[17,"POLLNVAL","","",null,null],[17,"IF_NAMESIZE","","",null,null],[17,"RTLD_LAZY","","",null,null],[17,"LOG_EMERG","","",null,null],[17,"LOG_ALERT","","",null,null],[17,"LOG_CRIT","","",null,null],[17,"LOG_ERR","","",null,null],[17,"LOG_WARNING","","",null,null],[17,"LOG_NOTICE","","",null,null],[17,"LOG_INFO","","",null,null],[17,"LOG_DEBUG","","",null,null],[17,"LOG_KERN","","",null,null],[17,"LOG_USER","","",null,null],[17,"LOG_MAIL","","",null,null],[17,"LOG_DAEMON","","",null,null],[17,"LOG_AUTH","","",null,null],[17,"LOG_SYSLOG","","",null,null],[17,"LOG_LPR","","",null,null],[17,"LOG_NEWS","","",null,null],[17,"LOG_UUCP","","",null,null],[17,"LOG_LOCAL0","","",null,null],[17,"LOG_LOCAL1","","",null,null],[17,"LOG_LOCAL2","","",null,null],[17,"LOG_LOCAL3","","",null,null],[17,"LOG_LOCAL4","","",null,null],[17,"LOG_LOCAL5","","",null,null],[17,"LOG_LOCAL6","","",null,null],[17,"LOG_LOCAL7","","",null,null],[17,"LOG_PID","","",null,null],[17,"LOG_CONS","","",null,null],[17,"LOG_ODELAY","","",null,null],[17,"LOG_NDELAY","","",null,null],[17,"LOG_NOWAIT","","",null,null],[17,"LOG_PRIMASK","","",null,null],[17,"LOG_FACMASK","","",null,null],[17,"PRIO_PROCESS","","",null,null],[17,"PRIO_PGRP","","",null,null],[17,"PRIO_USER","","",null,null],[17,"PRIO_MIN","","",null,null],[17,"PRIO_MAX","","",null,null],[17,"EXIT_FAILURE","","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"RAND_MAX","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"F_DUPFD","","",null,null],[17,"F_GETFD","","",null,null],[17,"F_SETFD","","",null,null],[17,"F_GETFL","","",null,null],[17,"F_SETFL","","",null,null],[17,"F_SETLEASE","","",null,null],[17,"F_GETLEASE","","",null,null],[17,"F_NOTIFY","","",null,null],[17,"F_DUPFD_CLOEXEC","","",null,null],[17,"F_SETPIPE_SZ","","",null,null],[17,"F_GETPIPE_SZ","","",null,null],[17,"SIGTRAP","","",null,null],[17,"PTHREAD_CREATE_JOINABLE","","",null,null],[17,"PTHREAD_CREATE_DETACHED","","",null,null],[17,"CLOCK_REALTIME","","",null,null],[17,"CLOCK_MONOTONIC","","",null,null],[17,"CLOCK_PROCESS_CPUTIME_ID","","",null,null],[17,"CLOCK_THREAD_CPUTIME_ID","","",null,null],[17,"CLOCK_MONOTONIC_RAW","","",null,null],[17,"CLOCK_REALTIME_COARSE","","",null,null],[17,"CLOCK_MONOTONIC_COARSE","","",null,null],[17,"CLOCK_BOOTTIME","","",null,null],[17,"CLOCK_REALTIME_ALARM","","",null,null],[17,"CLOCK_BOOTTIME_ALARM","","",null,null],[17,"TIMER_ABSTIME","","",null,null],[17,"RLIMIT_CPU","","",null,null],[17,"RLIMIT_FSIZE","","",null,null],[17,"RLIMIT_DATA","","",null,null],[17,"RLIMIT_STACK","","",null,null],[17,"RLIMIT_CORE","","",null,null],[17,"RLIMIT_LOCKS","","",null,null],[17,"RLIMIT_SIGPENDING","","",null,null],[17,"RLIMIT_MSGQUEUE","","",null,null],[17,"RLIMIT_NICE","","",null,null],[17,"RLIMIT_RTPRIO","","",null,null],[17,"RUSAGE_SELF","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"O_TMPFILE","","",null,null],[17,"SOCK_CLOEXEC","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFLNK","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IROTH","","",null,null],[17,"F_OK","","",null,null],[17,"R_OK","","",null,null],[17,"W_OK","","",null,null],[17,"X_OK","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"STDOUT_FILENO","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"SIGHUP","","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"LC_CTYPE","","",null,null],[17,"LC_NUMERIC","","",null,null],[17,"LC_TIME","","",null,null],[17,"LC_COLLATE","","",null,null],[17,"LC_MONETARY","","",null,null],[17,"LC_MESSAGES","","",null,null],[17,"LC_ALL","","",null,null],[17,"LC_CTYPE_MASK","","",null,null],[17,"LC_NUMERIC_MASK","","",null,null],[17,"LC_TIME_MASK","","",null,null],[17,"LC_COLLATE_MASK","","",null,null],[17,"LC_MONETARY_MASK","","",null,null],[17,"LC_MESSAGES_MASK","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"MS_RDONLY","","",null,null],[17,"MS_NOSUID","","",null,null],[17,"MS_NODEV","","",null,null],[17,"MS_NOEXEC","","",null,null],[17,"MS_SYNCHRONOUS","","",null,null],[17,"MS_REMOUNT","","",null,null],[17,"MS_MANDLOCK","","",null,null],[17,"MS_DIRSYNC","","",null,null],[17,"MS_NOATIME","","",null,null],[17,"MS_NODIRATIME","","",null,null],[17,"MS_BIND","","",null,null],[17,"MS_MOVE","","",null,null],[17,"MS_REC","","",null,null],[17,"MS_SILENT","","",null,null],[17,"MS_POSIXACL","","",null,null],[17,"MS_UNBINDABLE","","",null,null],[17,"MS_PRIVATE","","",null,null],[17,"MS_SLAVE","","",null,null],[17,"MS_SHARED","","",null,null],[17,"MS_RELATIME","","",null,null],[17,"MS_KERNMOUNT","","",null,null],[17,"MS_I_VERSION","","",null,null],[17,"MS_STRICTATIME","","",null,null],[17,"MS_ACTIVE","","",null,null],[17,"MS_NOUSER","","",null,null],[17,"MS_MGC_VAL","","",null,null],[17,"MS_MGC_MSK","","",null,null],[17,"MS_RMT_MASK","","",null,null],[17,"EPERM","","",null,null],[17,"ENOENT","","",null,null],[17,"ESRCH","","",null,null],[17,"EINTR","","",null,null],[17,"EIO","","",null,null],[17,"ENXIO","","",null,null],[17,"E2BIG","","",null,null],[17,"ENOEXEC","","",null,null],[17,"EBADF","","",null,null],[17,"ECHILD","","",null,null],[17,"EAGAIN","","",null,null],[17,"ENOMEM","","",null,null],[17,"EACCES","","",null,null],[17,"EFAULT","","",null,null],[17,"ENOTBLK","","",null,null],[17,"EBUSY","","",null,null],[17,"EEXIST","","",null,null],[17,"EXDEV","","",null,null],[17,"ENODEV","","",null,null],[17,"ENOTDIR","","",null,null],[17,"EISDIR","","",null,null],[17,"EINVAL","","",null,null],[17,"ENFILE","","",null,null],[17,"EMFILE","","",null,null],[17,"ENOTTY","","",null,null],[17,"ETXTBSY","","",null,null],[17,"EFBIG","","",null,null],[17,"ENOSPC","","",null,null],[17,"ESPIPE","","",null,null],[17,"EROFS","","",null,null],[17,"EMLINK","","",null,null],[17,"EPIPE","","",null,null],[17,"EDOM","","",null,null],[17,"ERANGE","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"SCM_RIGHTS","","",null,null],[17,"SCM_CREDENTIALS","","",null,null],[17,"IPPROTO_RAW","","",null,null],[17,"PROT_GROWSDOWN","","",null,null],[17,"PROT_GROWSUP","","",null,null],[17,"MAP_TYPE","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_REMOVE","","",null,null],[17,"MADV_DONTFORK","","",null,null],[17,"MADV_DOFORK","","",null,null],[17,"MADV_MERGEABLE","","",null,null],[17,"MADV_UNMERGEABLE","","",null,null],[17,"MADV_HWPOISON","","",null,null],[17,"IFF_UP","","",null,null],[17,"IFF_BROADCAST","","",null,null],[17,"IFF_DEBUG","","",null,null],[17,"IFF_LOOPBACK","","",null,null],[17,"IFF_POINTOPOINT","","",null,null],[17,"IFF_NOTRAILERS","","",null,null],[17,"IFF_RUNNING","","",null,null],[17,"IFF_NOARP","","",null,null],[17,"IFF_PROMISC","","",null,null],[17,"IFF_ALLMULTI","","",null,null],[17,"IFF_MASTER","","",null,null],[17,"IFF_SLAVE","","",null,null],[17,"IFF_MULTICAST","","",null,null],[17,"IFF_PORTSEL","","",null,null],[17,"IFF_AUTOMEDIA","","",null,null],[17,"IFF_DYNAMIC","","",null,null],[17,"SOL_IP","","",null,null],[17,"SOL_TCP","","",null,null],[17,"SOL_IPV6","","",null,null],[17,"SOL_ICMPV6","","",null,null],[17,"SOL_RAW","","",null,null],[17,"SOL_DECNET","","",null,null],[17,"SOL_X25","","",null,null],[17,"SOL_PACKET","","",null,null],[17,"SOL_ATM","","",null,null],[17,"SOL_AAL","","",null,null],[17,"SOL_IRDA","","",null,null],[17,"SOL_NETBEUI","","",null,null],[17,"SOL_LLC","","",null,null],[17,"SOL_DCCP","","",null,null],[17,"SOL_NETLINK","","",null,null],[17,"SOL_TIPC","","",null,null],[17,"AF_UNSPEC","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_LOCAL","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_AX25","","",null,null],[17,"AF_IPX","","",null,null],[17,"AF_APPLETALK","","",null,null],[17,"AF_NETROM","","",null,null],[17,"AF_BRIDGE","","",null,null],[17,"AF_ATMPVC","","",null,null],[17,"AF_X25","","",null,null],[17,"AF_INET6","","",null,null],[17,"AF_ROSE","","",null,null],[17,"AF_DECnet","","",null,null],[17,"AF_NETBEUI","","",null,null],[17,"AF_SECURITY","","",null,null],[17,"AF_KEY","","",null,null],[17,"AF_NETLINK","","",null,null],[17,"AF_ROUTE","","",null,null],[17,"AF_PACKET","","",null,null],[17,"AF_ASH","","",null,null],[17,"AF_ECONET","","",null,null],[17,"AF_ATMSVC","","",null,null],[17,"AF_RDS","","",null,null],[17,"AF_SNA","","",null,null],[17,"AF_IRDA","","",null,null],[17,"AF_PPPOX","","",null,null],[17,"AF_WANPIPE","","",null,null],[17,"AF_LLC","","",null,null],[17,"AF_CAN","","",null,null],[17,"AF_TIPC","","",null,null],[17,"AF_BLUETOOTH","","",null,null],[17,"AF_IUCV","","",null,null],[17,"AF_RXRPC","","",null,null],[17,"AF_ISDN","","",null,null],[17,"AF_PHONET","","",null,null],[17,"AF_IEEE802154","","",null,null],[17,"AF_CAIF","","",null,null],[17,"AF_ALG","","",null,null],[17,"PF_UNSPEC","","",null,null],[17,"PF_UNIX","","",null,null],[17,"PF_LOCAL","","",null,null],[17,"PF_INET","","",null,null],[17,"PF_AX25","","",null,null],[17,"PF_IPX","","",null,null],[17,"PF_APPLETALK","","",null,null],[17,"PF_NETROM","","",null,null],[17,"PF_BRIDGE","","",null,null],[17,"PF_ATMPVC","","",null,null],[17,"PF_X25","","",null,null],[17,"PF_INET6","","",null,null],[17,"PF_ROSE","","",null,null],[17,"PF_DECnet","","",null,null],[17,"PF_NETBEUI","","",null,null],[17,"PF_SECURITY","","",null,null],[17,"PF_KEY","","",null,null],[17,"PF_NETLINK","","",null,null],[17,"PF_ROUTE","","",null,null],[17,"PF_PACKET","","",null,null],[17,"PF_ASH","","",null,null],[17,"PF_ECONET","","",null,null],[17,"PF_ATMSVC","","",null,null],[17,"PF_RDS","","",null,null],[17,"PF_SNA","","",null,null],[17,"PF_IRDA","","",null,null],[17,"PF_PPPOX","","",null,null],[17,"PF_WANPIPE","","",null,null],[17,"PF_LLC","","",null,null],[17,"PF_CAN","","",null,null],[17,"PF_TIPC","","",null,null],[17,"PF_BLUETOOTH","","",null,null],[17,"PF_IUCV","","",null,null],[17,"PF_RXRPC","","",null,null],[17,"PF_ISDN","","",null,null],[17,"PF_PHONET","","",null,null],[17,"PF_IEEE802154","","",null,null],[17,"PF_CAIF","","",null,null],[17,"PF_ALG","","",null,null],[17,"SOMAXCONN","","",null,null],[17,"MSG_OOB","","",null,null],[17,"MSG_PEEK","","",null,null],[17,"MSG_DONTROUTE","","",null,null],[17,"MSG_CTRUNC","","",null,null],[17,"MSG_TRUNC","","",null,null],[17,"MSG_DONTWAIT","","",null,null],[17,"MSG_EOR","","",null,null],[17,"MSG_WAITALL","","",null,null],[17,"MSG_FIN","","",null,null],[17,"MSG_SYN","","",null,null],[17,"MSG_CONFIRM","","",null,null],[17,"MSG_RST","","",null,null],[17,"MSG_ERRQUEUE","","",null,null],[17,"MSG_NOSIGNAL","","",null,null],[17,"MSG_MORE","","",null,null],[17,"MSG_WAITFORONE","","",null,null],[17,"MSG_FASTOPEN","","",null,null],[17,"MSG_CMSG_CLOEXEC","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"IPPROTO_ICMP","","",null,null],[17,"IPPROTO_ICMPV6","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_TTL","","",null,null],[17,"IP_HDRINCL","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IP_TRANSPARENT","","",null,null],[17,"IPV6_ADD_MEMBERSHIP","","",null,null],[17,"IPV6_DROP_MEMBERSHIP","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"TCP_CORK","","",null,null],[17,"TCP_KEEPIDLE","","",null,null],[17,"TCP_KEEPINTVL","","",null,null],[17,"TCP_KEEPCNT","","",null,null],[17,"TCP_SYNCNT","","",null,null],[17,"TCP_LINGER2","","",null,null],[17,"TCP_DEFER_ACCEPT","","",null,null],[17,"TCP_WINDOW_CLAMP","","",null,null],[17,"TCP_INFO","","",null,null],[17,"TCP_QUICKACK","","",null,null],[17,"TCP_CONGESTION","","",null,null],[17,"IPV6_MULTICAST_LOOP","","",null,null],[17,"IPV6_V6ONLY","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"LOCK_SH","","",null,null],[17,"LOCK_EX","","",null,null],[17,"LOCK_NB","","",null,null],[17,"LOCK_UN","","",null,null],[17,"SS_ONSTACK","","",null,null],[17,"SS_DISABLE","","",null,null],[17,"PATH_MAX","","",null,null],[17,"FD_SETSIZE","","",null,null],[17,"EPOLLIN","","",null,null],[17,"EPOLLPRI","","",null,null],[17,"EPOLLOUT","","",null,null],[17,"EPOLLRDNORM","","",null,null],[17,"EPOLLRDBAND","","",null,null],[17,"EPOLLWRNORM","","",null,null],[17,"EPOLLWRBAND","","",null,null],[17,"EPOLLMSG","","",null,null],[17,"EPOLLERR","","",null,null],[17,"EPOLLHUP","","",null,null],[17,"EPOLLET","","",null,null],[17,"EPOLL_CTL_ADD","","",null,null],[17,"EPOLL_CTL_MOD","","",null,null],[17,"EPOLL_CTL_DEL","","",null,null],[17,"MNT_DETACH","","",null,null],[17,"MNT_EXPIRE","","",null,null],[17,"Q_GETFMT","","",null,null],[17,"Q_GETINFO","","",null,null],[17,"Q_SETINFO","","",null,null],[17,"QIF_BLIMITS","","",null,null],[17,"QIF_SPACE","","",null,null],[17,"QIF_ILIMITS","","",null,null],[17,"QIF_INODES","","",null,null],[17,"QIF_BTIME","","",null,null],[17,"QIF_ITIME","","",null,null],[17,"QIF_LIMITS","","",null,null],[17,"QIF_USAGE","","",null,null],[17,"QIF_TIMES","","",null,null],[17,"QIF_ALL","","",null,null],[17,"MNT_FORCE","","",null,null],[17,"Q_SYNC","","",null,null],[17,"Q_QUOTAON","","",null,null],[17,"Q_QUOTAOFF","","",null,null],[17,"Q_GETQUOTA","","",null,null],[17,"Q_SETQUOTA","","",null,null],[17,"TCIOFF","","",null,null],[17,"TCION","","",null,null],[17,"TCOOFF","","",null,null],[17,"TCOON","","",null,null],[17,"TCIFLUSH","","",null,null],[17,"TCOFLUSH","","",null,null],[17,"TCIOFLUSH","","",null,null],[17,"NL0","","",null,null],[17,"NL1","","",null,null],[17,"TAB0","","",null,null],[17,"CR0","","",null,null],[17,"FF0","","",null,null],[17,"BS0","","",null,null],[17,"VT0","","",null,null],[17,"VERASE","","",null,null],[17,"VKILL","","",null,null],[17,"VINTR","","",null,null],[17,"VQUIT","","",null,null],[17,"VLNEXT","","",null,null],[17,"IGNBRK","","",null,null],[17,"BRKINT","","",null,null],[17,"IGNPAR","","",null,null],[17,"PARMRK","","",null,null],[17,"INPCK","","",null,null],[17,"ISTRIP","","",null,null],[17,"INLCR","","",null,null],[17,"IGNCR","","",null,null],[17,"ICRNL","","",null,null],[17,"IXANY","","",null,null],[17,"IMAXBEL","","",null,null],[17,"IUTF8","","",null,null],[17,"OPOST","","",null,null],[17,"CS5","","",null,null],[17,"CRTSCTS","","",null,null],[17,"ECHO","","",null,null],[17,"CLONE_VM","","",null,null],[17,"CLONE_FS","","",null,null],[17,"CLONE_FILES","","",null,null],[17,"CLONE_SIGHAND","","",null,null],[17,"CLONE_PTRACE","","",null,null],[17,"CLONE_VFORK","","",null,null],[17,"CLONE_PARENT","","",null,null],[17,"CLONE_THREAD","","",null,null],[17,"CLONE_NEWNS","","",null,null],[17,"CLONE_SYSVSEM","","",null,null],[17,"CLONE_SETTLS","","",null,null],[17,"CLONE_PARENT_SETTID","","",null,null],[17,"CLONE_CHILD_CLEARTID","","",null,null],[17,"CLONE_DETACHED","","",null,null],[17,"CLONE_UNTRACED","","",null,null],[17,"CLONE_CHILD_SETTID","","",null,null],[17,"CLONE_NEWUTS","","",null,null],[17,"CLONE_NEWIPC","","",null,null],[17,"CLONE_NEWUSER","","",null,null],[17,"CLONE_NEWPID","","",null,null],[17,"CLONE_NEWNET","","",null,null],[17,"CLONE_IO","","",null,null],[17,"WNOHANG","","",null,null],[17,"WUNTRACED","","",null,null],[17,"WSTOPPED","","",null,null],[17,"WEXITED","","",null,null],[17,"WCONTINUED","","",null,null],[17,"WNOWAIT","","",null,null],[17,"__WNOTHREAD","","",null,null],[17,"__WALL","","",null,null],[17,"__WCLONE","","",null,null],[17,"SPLICE_F_MOVE","","",null,null],[17,"SPLICE_F_NONBLOCK","","",null,null],[17,"SPLICE_F_MORE","","",null,null],[17,"SPLICE_F_GIFT","","",null,null],[17,"RTLD_LOCAL","","",null,null],[17,"POSIX_FADV_NORMAL","","",null,null],[17,"POSIX_FADV_RANDOM","","",null,null],[17,"POSIX_FADV_SEQUENTIAL","","",null,null],[17,"POSIX_FADV_WILLNEED","","",null,null],[17,"AT_FDCWD","","",null,null],[17,"AT_SYMLINK_NOFOLLOW","","",null,null],[17,"AT_REMOVEDIR","","",null,null],[17,"AT_SYMLINK_FOLLOW","","",null,null],[17,"AT_NO_AUTOMOUNT","","",null,null],[17,"AT_EMPTY_PATH","","",null,null],[17,"LOG_CRON","","",null,null],[17,"LOG_AUTHPRIV","","",null,null],[17,"LOG_FTP","","",null,null],[17,"LOG_PERROR","","",null,null],[17,"PIPE_BUF","","",null,null],[17,"SI_LOAD_SHIFT","","",null,null],[17,"SIGEV_SIGNAL","","",null,null],[17,"SIGEV_NONE","","",null,null],[17,"SIGEV_THREAD","","",null,null],[17,"P_ALL","","",null,null],[17,"P_PID","","",null,null],[17,"P_PGID","","",null,null],[17,"UTIME_OMIT","","",null,null],[17,"UTIME_NOW","","",null,null],[17,"ABDAY_1","","",null,null],[17,"ABDAY_2","","",null,null],[17,"ABDAY_3","","",null,null],[17,"ABDAY_4","","",null,null],[17,"ABDAY_5","","",null,null],[17,"ABDAY_6","","",null,null],[17,"ABDAY_7","","",null,null],[17,"DAY_1","","",null,null],[17,"DAY_2","","",null,null],[17,"DAY_3","","",null,null],[17,"DAY_4","","",null,null],[17,"DAY_5","","",null,null],[17,"DAY_6","","",null,null],[17,"DAY_7","","",null,null],[17,"ABMON_1","","",null,null],[17,"ABMON_2","","",null,null],[17,"ABMON_3","","",null,null],[17,"ABMON_4","","",null,null],[17,"ABMON_5","","",null,null],[17,"ABMON_6","","",null,null],[17,"ABMON_7","","",null,null],[17,"ABMON_8","","",null,null],[17,"ABMON_9","","",null,null],[17,"ABMON_10","","",null,null],[17,"ABMON_11","","",null,null],[17,"ABMON_12","","",null,null],[17,"MON_1","","",null,null],[17,"MON_2","","",null,null],[17,"MON_3","","",null,null],[17,"MON_4","","",null,null],[17,"MON_5","","",null,null],[17,"MON_6","","",null,null],[17,"MON_7","","",null,null],[17,"MON_8","","",null,null],[17,"MON_9","","",null,null],[17,"MON_10","","",null,null],[17,"MON_11","","",null,null],[17,"MON_12","","",null,null],[17,"AM_STR","","",null,null],[17,"PM_STR","","",null,null],[17,"D_T_FMT","","",null,null],[17,"D_FMT","","",null,null],[17,"T_FMT","","",null,null],[17,"T_FMT_AMPM","","",null,null],[17,"ERA","","",null,null],[17,"ERA_D_FMT","","",null,null],[17,"ALT_DIGITS","","",null,null],[17,"ERA_D_T_FMT","","",null,null],[17,"ERA_T_FMT","","",null,null],[17,"CODESET","","",null,null],[17,"CRNCYSTR","","",null,null],[17,"RUSAGE_THREAD","","",null,null],[17,"RUSAGE_CHILDREN","","",null,null],[17,"RADIXCHAR","","",null,null],[17,"THOUSEP","","",null,null],[17,"YESEXPR","","",null,null],[17,"NOEXPR","","",null,null],[17,"YESSTR","","",null,null],[17,"NOSTR","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"L_tmpnam","","",null,null],[17,"_PC_LINK_MAX","","",null,null],[17,"_PC_MAX_CANON","","",null,null],[17,"_PC_MAX_INPUT","","",null,null],[17,"_PC_NAME_MAX","","",null,null],[17,"_PC_PATH_MAX","","",null,null],[17,"_PC_PIPE_BUF","","",null,null],[17,"_PC_CHOWN_RESTRICTED","","",null,null],[17,"_PC_NO_TRUNC","","",null,null],[17,"_PC_VDISABLE","","",null,null],[17,"_SC_ARG_MAX","","",null,null],[17,"_SC_CHILD_MAX","","",null,null],[17,"_SC_CLK_TCK","","",null,null],[17,"_SC_NGROUPS_MAX","","",null,null],[17,"_SC_OPEN_MAX","","",null,null],[17,"_SC_STREAM_MAX","","",null,null],[17,"_SC_TZNAME_MAX","","",null,null],[17,"_SC_JOB_CONTROL","","",null,null],[17,"_SC_SAVED_IDS","","",null,null],[17,"_SC_REALTIME_SIGNALS","","",null,null],[17,"_SC_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_TIMERS","","",null,null],[17,"_SC_ASYNCHRONOUS_IO","","",null,null],[17,"_SC_PRIORITIZED_IO","","",null,null],[17,"_SC_SYNCHRONIZED_IO","","",null,null],[17,"_SC_FSYNC","","",null,null],[17,"_SC_MAPPED_FILES","","",null,null],[17,"_SC_MEMLOCK","","",null,null],[17,"_SC_MEMLOCK_RANGE","","",null,null],[17,"_SC_MEMORY_PROTECTION","","",null,null],[17,"_SC_MESSAGE_PASSING","","",null,null],[17,"_SC_SEMAPHORES","","",null,null],[17,"_SC_SHARED_MEMORY_OBJECTS","","",null,null],[17,"_SC_AIO_LISTIO_MAX","","",null,null],[17,"_SC_AIO_MAX","","",null,null],[17,"_SC_AIO_PRIO_DELTA_MAX","","",null,null],[17,"_SC_DELAYTIMER_MAX","","",null,null],[17,"_SC_MQ_OPEN_MAX","","",null,null],[17,"_SC_MQ_PRIO_MAX","","",null,null],[17,"_SC_VERSION","","",null,null],[17,"_SC_PAGESIZE","","",null,null],[17,"_SC_PAGE_SIZE","","",null,null],[17,"_SC_RTSIG_MAX","","",null,null],[17,"_SC_SEM_NSEMS_MAX","","",null,null],[17,"_SC_SEM_VALUE_MAX","","",null,null],[17,"_SC_SIGQUEUE_MAX","","",null,null],[17,"_SC_TIMER_MAX","","",null,null],[17,"_SC_BC_BASE_MAX","","",null,null],[17,"_SC_BC_DIM_MAX","","",null,null],[17,"_SC_BC_SCALE_MAX","","",null,null],[17,"_SC_BC_STRING_MAX","","",null,null],[17,"_SC_COLL_WEIGHTS_MAX","","",null,null],[17,"_SC_EXPR_NEST_MAX","","",null,null],[17,"_SC_LINE_MAX","","",null,null],[17,"_SC_RE_DUP_MAX","","",null,null],[17,"_SC_2_VERSION","","",null,null],[17,"_SC_2_C_BIND","","",null,null],[17,"_SC_2_C_DEV","","",null,null],[17,"_SC_2_FORT_DEV","","",null,null],[17,"_SC_2_FORT_RUN","","",null,null],[17,"_SC_2_SW_DEV","","",null,null],[17,"_SC_2_LOCALEDEF","","",null,null],[17,"_SC_IOV_MAX","","",null,null],[17,"_SC_THREADS","","",null,null],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",null,null],[17,"_SC_GETGR_R_SIZE_MAX","","",null,null],[17,"_SC_GETPW_R_SIZE_MAX","","",null,null],[17,"_SC_LOGIN_NAME_MAX","","",null,null],[17,"_SC_TTY_NAME_MAX","","",null,null],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"_SC_THREAD_KEYS_MAX","","",null,null],[17,"_SC_THREAD_STACK_MIN","","",null,null],[17,"_SC_THREAD_THREADS_MAX","","",null,null],[17,"_SC_THREAD_ATTR_STACKADDR","","",null,null],[17,"_SC_THREAD_ATTR_STACKSIZE","","",null,null],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_THREAD_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_PRIO_PROTECT","","",null,null],[17,"_SC_NPROCESSORS_ONLN","","",null,null],[17,"_SC_ATEXIT_MAX","","",null,null],[17,"_SC_XOPEN_VERSION","","",null,null],[17,"_SC_XOPEN_XCU_VERSION","","",null,null],[17,"_SC_XOPEN_UNIX","","",null,null],[17,"_SC_XOPEN_CRYPT","","",null,null],[17,"_SC_XOPEN_ENH_I18N","","",null,null],[17,"_SC_XOPEN_SHM","","",null,null],[17,"_SC_2_CHAR_TERM","","",null,null],[17,"_SC_2_UPE","","",null,null],[17,"_SC_XBS5_ILP32_OFF32","","",null,null],[17,"_SC_XBS5_ILP32_OFFBIG","","",null,null],[17,"_SC_XBS5_LPBIG_OFFBIG","","",null,null],[17,"_SC_XOPEN_LEGACY","","",null,null],[17,"_SC_XOPEN_REALTIME","","",null,null],[17,"_SC_XOPEN_REALTIME_THREADS","","",null,null],[17,"_SC_HOST_NAME_MAX","","",null,null],[17,"RLIM_SAVED_MAX","","",null,null],[17,"RLIM_SAVED_CUR","","",null,null],[17,"GLOB_ERR","","",null,null],[17,"GLOB_MARK","","",null,null],[17,"GLOB_NOSORT","","",null,null],[17,"GLOB_DOOFFS","","",null,null],[17,"GLOB_NOCHECK","","",null,null],[17,"GLOB_APPEND","","",null,null],[17,"GLOB_NOESCAPE","","",null,null],[17,"GLOB_NOSPACE","","",null,null],[17,"GLOB_ABORTED","","",null,null],[17,"GLOB_NOMATCH","","",null,null],[17,"POSIX_MADV_NORMAL","","",null,null],[17,"POSIX_MADV_RANDOM","","",null,null],[17,"POSIX_MADV_SEQUENTIAL","","",null,null],[17,"POSIX_MADV_WILLNEED","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IWRITE","","",null,null],[17,"S_IREAD","","",null,null],[17,"F_LOCK","","",null,null],[17,"F_TEST","","",null,null],[17,"F_TLOCK","","",null,null],[17,"F_ULOCK","","",null,null],[17,"ST_RDONLY","","",null,null],[17,"ST_NOSUID","","",null,null],[17,"ST_NODEV","","",null,null],[17,"ST_NOEXEC","","",null,null],[17,"ST_SYNCHRONOUS","","",null,null],[17,"ST_MANDLOCK","","",null,null],[17,"ST_WRITE","","",null,null],[17,"ST_APPEND","","",null,null],[17,"ST_IMMUTABLE","","",null,null],[17,"ST_NOATIME","","",null,null],[17,"ST_NODIRATIME","","",null,null],[17,"RTLD_NEXT","","",null,null],[17,"RTLD_DEFAULT","","",null,null],[17,"RTLD_NODELETE","","",null,null],[17,"RTLD_NOW","","",null,null],[17,"TCP_MD5SIG","","",null,null],[17,"PTHREAD_MUTEX_INITIALIZER","","",null,null],[17,"PTHREAD_COND_INITIALIZER","","",null,null],[17,"PTHREAD_RWLOCK_INITIALIZER","","",null,null],[17,"PTHREAD_MUTEX_NORMAL","","",null,null],[17,"PTHREAD_MUTEX_RECURSIVE","","",null,null],[17,"PTHREAD_MUTEX_ERRORCHECK","","",null,null],[17,"PTHREAD_MUTEX_DEFAULT","","",null,null],[17,"__SIZEOF_PTHREAD_COND_T","","",null,null],[17,"SCHED_OTHER","","",null,null],[17,"SCHED_FIFO","","",null,null],[17,"SCHED_RR","","",null,null],[17,"SCHED_BATCH","","",null,null],[17,"SCHED_IDLE","","",null,null],[17,"AF_IB","","",null,null],[17,"AF_MPLS","","",null,null],[17,"AF_NFC","","",null,null],[17,"AF_VSOCK","","",null,null],[17,"PF_IB","","",null,null],[17,"PF_MPLS","","",null,null],[17,"PF_NFC","","",null,null],[17,"PF_VSOCK","","",null,null],[17,"IPC_PRIVATE","","",null,null],[17,"IPC_CREAT","","",null,null],[17,"IPC_EXCL","","",null,null],[17,"IPC_NOWAIT","","",null,null],[17,"IPC_RMID","","",null,null],[17,"IPC_SET","","",null,null],[17,"IPC_STAT","","",null,null],[17,"IPC_INFO","","",null,null],[17,"MSG_STAT","","",null,null],[17,"MSG_INFO","","",null,null],[17,"MSG_NOERROR","","",null,null],[17,"MSG_EXCEPT","","",null,null],[17,"MSG_COPY","","",null,null],[17,"SHM_R","","",null,null],[17,"SHM_W","","",null,null],[17,"SHM_RDONLY","","",null,null],[17,"SHM_RND","","",null,null],[17,"SHM_REMAP","","",null,null],[17,"SHM_EXEC","","",null,null],[17,"SHM_LOCK","","",null,null],[17,"SHM_UNLOCK","","",null,null],[17,"SHM_HUGETLB","","",null,null],[17,"SHM_NORESERVE","","",null,null],[17,"EPOLLRDHUP","","",null,null],[17,"EPOLLEXCLUSIVE","","",null,null],[17,"EPOLLONESHOT","","",null,null],[17,"QFMT_VFS_OLD","","",null,null],[17,"QFMT_VFS_V0","","",null,null],[17,"EFD_SEMAPHORE","","",null,null],[17,"LOG_NFACILITIES","","",null,null],[17,"SEM_FAILED","","",null,null],[17,"RB_AUTOBOOT","","",null,null],[17,"RB_HALT_SYSTEM","","",null,null],[17,"RB_ENABLE_CAD","","",null,null],[17,"RB_DISABLE_CAD","","",null,null],[17,"RB_POWER_OFF","","",null,null],[17,"RB_SW_SUSPEND","","",null,null],[17,"RB_KEXEC","","",null,null],[17,"AI_PASSIVE","","",null,null],[17,"AI_CANONNAME","","",null,null],[17,"AI_NUMERICHOST","","",null,null],[17,"AI_V4MAPPED","","",null,null],[17,"AI_ALL","","",null,null],[17,"AI_ADDRCONFIG","","",null,null],[17,"AI_NUMERICSERV","","",null,null],[17,"EAI_BADFLAGS","","",null,null],[17,"EAI_NONAME","","",null,null],[17,"EAI_AGAIN","","",null,null],[17,"EAI_FAIL","","",null,null],[17,"EAI_FAMILY","","",null,null],[17,"EAI_SOCKTYPE","","",null,null],[17,"EAI_SERVICE","","",null,null],[17,"EAI_MEMORY","","",null,null],[17,"EAI_OVERFLOW","","",null,null],[17,"NI_NUMERICHOST","","",null,null],[17,"NI_NUMERICSERV","","",null,null],[17,"NI_NOFQDN","","",null,null],[17,"NI_NAMEREQD","","",null,null],[17,"NI_DGRAM","","",null,null],[17,"SYNC_FILE_RANGE_WAIT_BEFORE","","",null,null],[17,"SYNC_FILE_RANGE_WRITE","","",null,null],[17,"SYNC_FILE_RANGE_WAIT_AFTER","","",null,null],[17,"EAI_SYSTEM","","",null,null],[17,"AIO_CANCELED","","",null,null],[17,"AIO_NOTCANCELED","","",null,null],[17,"AIO_ALLDONE","","",null,null],[17,"LIO_READ","","",null,null],[17,"LIO_WRITE","","",null,null],[17,"LIO_NOP","","",null,null],[17,"LIO_WAIT","","",null,null],[17,"LIO_NOWAIT","","",null,null],[17,"MREMAP_MAYMOVE","","",null,null],[17,"MREMAP_FIXED","","",null,null],[17,"PR_SET_PDEATHSIG","","",null,null],[17,"PR_GET_PDEATHSIG","","",null,null],[17,"PR_GET_DUMPABLE","","",null,null],[17,"PR_SET_DUMPABLE","","",null,null],[17,"PR_GET_UNALIGN","","",null,null],[17,"PR_SET_UNALIGN","","",null,null],[17,"PR_UNALIGN_NOPRINT","","",null,null],[17,"PR_UNALIGN_SIGBUS","","",null,null],[17,"PR_GET_KEEPCAPS","","",null,null],[17,"PR_SET_KEEPCAPS","","",null,null],[17,"PR_GET_FPEMU","","",null,null],[17,"PR_SET_FPEMU","","",null,null],[17,"PR_FPEMU_NOPRINT","","",null,null],[17,"PR_FPEMU_SIGFPE","","",null,null],[17,"PR_GET_FPEXC","","",null,null],[17,"PR_SET_FPEXC","","",null,null],[17,"PR_FP_EXC_SW_ENABLE","","",null,null],[17,"PR_FP_EXC_DIV","","",null,null],[17,"PR_FP_EXC_OVF","","",null,null],[17,"PR_FP_EXC_UND","","",null,null],[17,"PR_FP_EXC_RES","","",null,null],[17,"PR_FP_EXC_INV","","",null,null],[17,"PR_FP_EXC_DISABLED","","",null,null],[17,"PR_FP_EXC_NONRECOV","","",null,null],[17,"PR_FP_EXC_ASYNC","","",null,null],[17,"PR_FP_EXC_PRECISE","","",null,null],[17,"PR_GET_TIMING","","",null,null],[17,"PR_SET_TIMING","","",null,null],[17,"PR_TIMING_STATISTICAL","","",null,null],[17,"PR_TIMING_TIMESTAMP","","",null,null],[17,"PR_SET_NAME","","",null,null],[17,"PR_GET_NAME","","",null,null],[17,"PR_GET_ENDIAN","","",null,null],[17,"PR_SET_ENDIAN","","",null,null],[17,"PR_ENDIAN_BIG","","",null,null],[17,"PR_ENDIAN_LITTLE","","",null,null],[17,"PR_ENDIAN_PPC_LITTLE","","",null,null],[17,"PR_GET_SECCOMP","","",null,null],[17,"PR_SET_SECCOMP","","",null,null],[17,"PR_CAPBSET_READ","","",null,null],[17,"PR_CAPBSET_DROP","","",null,null],[17,"PR_GET_TSC","","",null,null],[17,"PR_SET_TSC","","",null,null],[17,"PR_TSC_ENABLE","","",null,null],[17,"PR_TSC_SIGSEGV","","",null,null],[17,"PR_GET_SECUREBITS","","",null,null],[17,"PR_SET_SECUREBITS","","",null,null],[17,"PR_SET_TIMERSLACK","","",null,null],[17,"PR_GET_TIMERSLACK","","",null,null],[17,"PR_TASK_PERF_EVENTS_DISABLE","","",null,null],[17,"PR_TASK_PERF_EVENTS_ENABLE","","",null,null],[17,"PR_MCE_KILL","","",null,null],[17,"PR_MCE_KILL_CLEAR","","",null,null],[17,"PR_MCE_KILL_SET","","",null,null],[17,"PR_MCE_KILL_LATE","","",null,null],[17,"PR_MCE_KILL_EARLY","","",null,null],[17,"PR_MCE_KILL_DEFAULT","","",null,null],[17,"PR_MCE_KILL_GET","","",null,null],[17,"PR_SET_MM","","",null,null],[17,"PR_SET_MM_START_CODE","","",null,null],[17,"PR_SET_MM_END_CODE","","",null,null],[17,"PR_SET_MM_START_DATA","","",null,null],[17,"PR_SET_MM_END_DATA","","",null,null],[17,"PR_SET_MM_START_STACK","","",null,null],[17,"PR_SET_MM_START_BRK","","",null,null],[17,"PR_SET_MM_BRK","","",null,null],[17,"PR_SET_MM_ARG_START","","",null,null],[17,"PR_SET_MM_ARG_END","","",null,null],[17,"PR_SET_MM_ENV_START","","",null,null],[17,"PR_SET_MM_ENV_END","","",null,null],[17,"PR_SET_MM_AUXV","","",null,null],[17,"PR_SET_MM_EXE_FILE","","",null,null],[17,"PR_SET_MM_MAP","","",null,null],[17,"PR_SET_MM_MAP_SIZE","","",null,null],[17,"PR_SET_PTRACER","","",null,null],[17,"PR_SET_CHILD_SUBREAPER","","",null,null],[17,"PR_GET_CHILD_SUBREAPER","","",null,null],[17,"PR_SET_NO_NEW_PRIVS","","",null,null],[17,"PR_GET_NO_NEW_PRIVS","","",null,null],[17,"PR_GET_TID_ADDRESS","","",null,null],[17,"PR_SET_THP_DISABLE","","",null,null],[17,"PR_GET_THP_DISABLE","","",null,null],[17,"PR_MPX_ENABLE_MANAGEMENT","","",null,null],[17,"PR_MPX_DISABLE_MANAGEMENT","","",null,null],[17,"PR_SET_FP_MODE","","",null,null],[17,"PR_GET_FP_MODE","","",null,null],[17,"PR_FP_MODE_FR","","",null,null],[17,"PR_FP_MODE_FRE","","",null,null],[17,"PR_CAP_AMBIENT","","",null,null],[17,"PR_CAP_AMBIENT_IS_SET","","",null,null],[17,"PR_CAP_AMBIENT_RAISE","","",null,null],[17,"PR_CAP_AMBIENT_LOWER","","",null,null],[17,"PR_CAP_AMBIENT_CLEAR_ALL","","",null,null],[17,"__UT_LINESIZE","","",null,null],[17,"__UT_NAMESIZE","","",null,null],[17,"__UT_HOSTSIZE","","",null,null],[17,"EMPTY","","",null,null],[17,"RUN_LVL","","",null,null],[17,"BOOT_TIME","","",null,null],[17,"NEW_TIME","","",null,null],[17,"OLD_TIME","","",null,null],[17,"INIT_PROCESS","","",null,null],[17,"LOGIN_PROCESS","","",null,null],[17,"USER_PROCESS","","",null,null],[17,"DEAD_PROCESS","","",null,null],[17,"ACCOUNTING","","",null,null],[17,"RLIMIT_RSS","","",null,null],[17,"RLIMIT_AS","","",null,null],[17,"RLIMIT_MEMLOCK","","",null,null],[17,"RLIM_INFINITY","","",null,null],[17,"RLIMIT_RTTIME","","",null,null],[17,"RLIMIT_NLIMITS","","",null,null],[17,"SOCK_NONBLOCK","","",null,null],[17,"SOL_RXRPC","","",null,null],[17,"SOL_PPPOL2TP","","",null,null],[17,"SOL_BLUETOOTH","","",null,null],[17,"SOL_PNPIPE","","",null,null],[17,"SOL_RDS","","",null,null],[17,"SOL_IUCV","","",null,null],[17,"SOL_CAIF","","",null,null],[17,"SOL_ALG","","",null,null],[17,"SOL_NFC","","",null,null],[17,"MSG_TRYHARD","","",null,null],[17,"LC_PAPER","","",null,null],[17,"LC_NAME","","",null,null],[17,"LC_ADDRESS","","",null,null],[17,"LC_TELEPHONE","","",null,null],[17,"LC_MEASUREMENT","","",null,null],[17,"LC_IDENTIFICATION","","",null,null],[17,"LC_PAPER_MASK","","",null,null],[17,"LC_NAME_MASK","","",null,null],[17,"LC_ADDRESS_MASK","","",null,null],[17,"LC_TELEPHONE_MASK","","",null,null],[17,"LC_MEASUREMENT_MASK","","",null,null],[17,"LC_IDENTIFICATION_MASK","","",null,null],[17,"LC_ALL_MASK","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_ANONYMOUS","","",null,null],[17,"MAP_DENYWRITE","","",null,null],[17,"MAP_EXECUTABLE","","",null,null],[17,"MAP_POPULATE","","",null,null],[17,"MAP_NONBLOCK","","",null,null],[17,"MAP_STACK","","",null,null],[17,"ENOTSUP","","",null,null],[17,"EUCLEAN","","",null,null],[17,"ENOTNAM","","",null,null],[17,"ENAVAIL","","",null,null],[17,"EISNAM","","",null,null],[17,"EREMOTEIO","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOCK_SEQPACKET","","",null,null],[17,"TCP_COOKIE_TRANSACTIONS","","",null,null],[17,"TCP_THIN_LINEAR_TIMEOUTS","","",null,null],[17,"TCP_THIN_DUPACK","","",null,null],[17,"TCP_USER_TIMEOUT","","",null,null],[17,"TCP_REPAIR","","",null,null],[17,"TCP_REPAIR_QUEUE","","",null,null],[17,"TCP_QUEUE_SEQ","","",null,null],[17,"TCP_REPAIR_OPTIONS","","",null,null],[17,"TCP_FASTOPEN","","",null,null],[17,"TCP_TIMESTAMP","","",null,null],[17,"SIGTTIN","","",null,null],[17,"SIGTTOU","","",null,null],[17,"SIGXCPU","","",null,null],[17,"SIGXFSZ","","",null,null],[17,"SIGVTALRM","","",null,null],[17,"SIGPROF","","",null,null],[17,"SIGWINCH","","",null,null],[17,"SIGEV_THREAD_ID","","",null,null],[17,"POLLRDNORM","","",null,null],[17,"POLLRDBAND","","",null,null],[17,"FALLOC_FL_KEEP_SIZE","","",null,null],[17,"FALLOC_FL_PUNCH_HOLE","","",null,null],[17,"BUFSIZ","","",null,null],[17,"TMP_MAX","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"POSIX_FADV_DONTNEED","","",null,null],[17,"POSIX_FADV_NOREUSE","","",null,null],[17,"POSIX_MADV_DONTNEED","","",null,null],[17,"_SC_2_C_VERSION","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"ST_RELATIME","","",null,null],[17,"NI_MAXHOST","","",null,null],[17,"ADFS_SUPER_MAGIC","","",null,null],[17,"AFFS_SUPER_MAGIC","","",null,null],[17,"CODA_SUPER_MAGIC","","",null,null],[17,"CRAMFS_MAGIC","","",null,null],[17,"EFS_SUPER_MAGIC","","",null,null],[17,"EXT2_SUPER_MAGIC","","",null,null],[17,"EXT3_SUPER_MAGIC","","",null,null],[17,"EXT4_SUPER_MAGIC","","",null,null],[17,"HPFS_SUPER_MAGIC","","",null,null],[17,"HUGETLBFS_MAGIC","","",null,null],[17,"ISOFS_SUPER_MAGIC","","",null,null],[17,"JFFS2_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC2","","",null,null],[17,"MINIX2_SUPER_MAGIC","","",null,null],[17,"MINIX2_SUPER_MAGIC2","","",null,null],[17,"MSDOS_SUPER_MAGIC","","",null,null],[17,"NCP_SUPER_MAGIC","","",null,null],[17,"NFS_SUPER_MAGIC","","",null,null],[17,"OPENPROM_SUPER_MAGIC","","",null,null],[17,"PROC_SUPER_MAGIC","","",null,null],[17,"QNX4_SUPER_MAGIC","","",null,null],[17,"REISERFS_SUPER_MAGIC","","",null,null],[17,"SMB_SUPER_MAGIC","","",null,null],[17,"TMPFS_MAGIC","","",null,null],[17,"USBDEVICE_SUPER_MAGIC","","",null,null],[17,"VEOF","","",null,null],[17,"CPU_SETSIZE","","",null,null],[17,"QFMT_VFS_V1","","",null,null],[17,"PTRACE_TRACEME","","",null,null],[17,"PTRACE_PEEKTEXT","","",null,null],[17,"PTRACE_PEEKDATA","","",null,null],[17,"PTRACE_PEEKUSER","","",null,null],[17,"PTRACE_POKETEXT","","",null,null],[17,"PTRACE_POKEDATA","","",null,null],[17,"PTRACE_POKEUSER","","",null,null],[17,"PTRACE_CONT","","",null,null],[17,"PTRACE_KILL","","",null,null],[17,"PTRACE_SINGLESTEP","","",null,null],[17,"PTRACE_ATTACH","","",null,null],[17,"PTRACE_SYSCALL","","",null,null],[17,"PTRACE_SETOPTIONS","","",null,null],[17,"PTRACE_GETEVENTMSG","","",null,null],[17,"PTRACE_GETSIGINFO","","",null,null],[17,"PTRACE_SETSIGINFO","","",null,null],[17,"PTRACE_GETREGSET","","",null,null],[17,"PTRACE_SETREGSET","","",null,null],[17,"PTRACE_SEIZE","","",null,null],[17,"PTRACE_INTERRUPT","","",null,null],[17,"PTRACE_LISTEN","","",null,null],[17,"PTRACE_PEEKSIGINFO","","",null,null],[17,"MADV_DODUMP","","",null,null],[17,"MADV_DONTDUMP","","",null,null],[17,"EPOLLWAKEUP","","",null,null],[17,"MADV_HUGEPAGE","","",null,null],[17,"MADV_NOHUGEPAGE","","",null,null],[17,"MAP_HUGETLB","","",null,null],[17,"SEEK_DATA","","",null,null],[17,"SEEK_HOLE","","",null,null],[17,"TCSANOW","","",null,null],[17,"TCSADRAIN","","",null,null],[17,"TCSAFLUSH","","",null,null],[17,"TIOCLINUX","","",null,null],[17,"TIOCGSERIAL","","",null,null],[17,"RTLD_DEEPBIND","","",null,null],[17,"RTLD_GLOBAL","","",null,null],[17,"RTLD_NOLOAD","","",null,null],[17,"LINUX_REBOOT_MAGIC1","","",null,null],[17,"LINUX_REBOOT_MAGIC2","","",null,null],[17,"LINUX_REBOOT_MAGIC2A","","",null,null],[17,"LINUX_REBOOT_MAGIC2B","","",null,null],[17,"LINUX_REBOOT_MAGIC2C","","",null,null],[17,"LINUX_REBOOT_CMD_RESTART","","",null,null],[17,"LINUX_REBOOT_CMD_HALT","","",null,null],[17,"LINUX_REBOOT_CMD_CAD_ON","","",null,null],[17,"LINUX_REBOOT_CMD_CAD_OFF","","",null,null],[17,"LINUX_REBOOT_CMD_POWER_OFF","","",null,null],[17,"LINUX_REBOOT_CMD_RESTART2","","",null,null],[17,"LINUX_REBOOT_CMD_SW_SUSPEND","","",null,null],[17,"LINUX_REBOOT_CMD_KEXEC","","",null,null],[17,"NETLINK_ROUTE","","",null,null],[17,"NETLINK_UNUSED","","",null,null],[17,"NETLINK_USERSOCK","","",null,null],[17,"NETLINK_FIREWALL","","",null,null],[17,"NETLINK_SOCK_DIAG","","",null,null],[17,"NETLINK_NFLOG","","",null,null],[17,"NETLINK_XFRM","","",null,null],[17,"NETLINK_SELINUX","","",null,null],[17,"NETLINK_ISCSI","","",null,null],[17,"NETLINK_AUDIT","","",null,null],[17,"NETLINK_FIB_LOOKUP","","",null,null],[17,"NETLINK_CONNECTOR","","",null,null],[17,"NETLINK_NETFILTER","","",null,null],[17,"NETLINK_IP6_FW","","",null,null],[17,"NETLINK_DNRTMSG","","",null,null],[17,"NETLINK_KOBJECT_UEVENT","","",null,null],[17,"NETLINK_GENERIC","","",null,null],[17,"NETLINK_SCSITRANSPORT","","",null,null],[17,"NETLINK_ECRYPTFS","","",null,null],[17,"NETLINK_RDMA","","",null,null],[17,"NETLINK_CRYPTO","","",null,null],[17,"NETLINK_INET_DIAG","","",null,null],[17,"MAX_LINKS","","",null,null],[17,"NLM_F_REQUEST","","",null,null],[17,"NLM_F_MULTI","","",null,null],[17,"NLM_F_ACK","","",null,null],[17,"NLM_F_ECHO","","",null,null],[17,"NLM_F_DUMP_INTR","","",null,null],[17,"NLM_F_DUMP_FILTERED","","",null,null],[17,"NLM_F_ROOT","","",null,null],[17,"NLM_F_MATCH","","",null,null],[17,"NLM_F_ATOMIC","","",null,null],[17,"NLM_F_DUMP","","",null,null],[17,"NLM_F_REPLACE","","",null,null],[17,"NLM_F_EXCL","","",null,null],[17,"NLM_F_CREATE","","",null,null],[17,"NLM_F_APPEND","","",null,null],[17,"NLMSG_NOOP","","",null,null],[17,"NLMSG_ERROR","","",null,null],[17,"NLMSG_DONE","","",null,null],[17,"NLMSG_OVERRUN","","",null,null],[17,"NLMSG_MIN_TYPE","","",null,null],[17,"NETLINK_ADD_MEMBERSHIP","","",null,null],[17,"NETLINK_DROP_MEMBERSHIP","","",null,null],[17,"NETLINK_PKTINFO","","",null,null],[17,"NETLINK_BROADCAST_ERROR","","",null,null],[17,"NETLINK_NO_ENOBUFS","","",null,null],[17,"NETLINK_RX_RING","","",null,null],[17,"NETLINK_TX_RING","","",null,null],[17,"NETLINK_LISTEN_ALL_NSID","","",null,null],[17,"NETLINK_LIST_MEMBERSHIPS","","",null,null],[17,"NETLINK_CAP_ACK","","",null,null],[17,"NLA_F_NESTED","","",null,null],[17,"NLA_F_NET_BYTEORDER","","",null,null],[17,"NLA_TYPE_MASK","","",null,null],[17,"PTHREAD_STACK_MIN","","",null,null],[17,"__SIZEOF_PTHREAD_RWLOCK_T","","",null,null],[17,"TIOCGSOFTCAR","","",null,null],[17,"TIOCSSOFTCAR","","",null,null],[17,"RLIMIT_NOFILE","","",null,null],[17,"RLIMIT_NPROC","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_SYNC","","",null,null],[17,"O_RSYNC","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_FSYNC","","",null,null],[17,"MAP_GROWSDOWN","","",null,null],[17,"EDEADLK","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"ENOLCK","","",null,null],[17,"ENOSYS","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"ELOOP","","",null,null],[17,"ENOMSG","","",null,null],[17,"EIDRM","","",null,null],[17,"ECHRNG","","",null,null],[17,"EL2NSYNC","","",null,null],[17,"EL3HLT","","",null,null],[17,"EL3RST","","",null,null],[17,"ELNRNG","","",null,null],[17,"EUNATCH","","",null,null],[17,"ENOCSI","","",null,null],[17,"EL2HLT","","",null,null],[17,"EBADE","","",null,null],[17,"EBADR","","",null,null],[17,"EXFULL","","",null,null],[17,"ENOANO","","",null,null],[17,"EBADRQC","","",null,null],[17,"EBADSLT","","",null,null],[17,"EMULTIHOP","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"ENOTUNIQ","","",null,null],[17,"EBADFD","","",null,null],[17,"EBADMSG","","",null,null],[17,"EREMCHG","","",null,null],[17,"ELIBACC","","",null,null],[17,"ELIBBAD","","",null,null],[17,"ELIBSCN","","",null,null],[17,"ELIBMAX","","",null,null],[17,"ELIBEXEC","","",null,null],[17,"EILSEQ","","",null,null],[17,"ERESTART","","",null,null],[17,"ESTRPIPE","","",null,null],[17,"EUSERS","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"EPROTOTYPE","","",null,null],[17,"ENOPROTOOPT","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"EOPNOTSUPP","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"ENETDOWN","","",null,null],[17,"ENETUNREACH","","",null,null],[17,"ENETRESET","","",null,null],[17,"ECONNABORTED","","",null,null],[17,"ECONNRESET","","",null,null],[17,"ENOBUFS","","",null,null],[17,"EISCONN","","",null,null],[17,"ENOTCONN","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"ETOOMANYREFS","","",null,null],[17,"ETIMEDOUT","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"EALREADY","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"ESTALE","","",null,null],[17,"EDQUOT","","",null,null],[17,"ENOMEDIUM","","",null,null],[17,"EMEDIUMTYPE","","",null,null],[17,"ECANCELED","","",null,null],[17,"ENOKEY","","",null,null],[17,"EKEYEXPIRED","","",null,null],[17,"EKEYREVOKED","","",null,null],[17,"EKEYREJECTED","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[17,"EHWPOISON","","",null,null],[17,"ERFKILL","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_SNDBUFFORCE","","",null,null],[17,"SO_RCVBUFFORCE","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_NO_CHECK","","",null,null],[17,"SO_PRIORITY","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_BSDCOMPAT","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_PASSCRED","","",null,null],[17,"SO_PEERCRED","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"SO_SECURITY_AUTHENTICATION","","",null,null],[17,"SO_SECURITY_ENCRYPTION_TRANSPORT","","",null,null],[17,"SO_SECURITY_ENCRYPTION_NETWORK","","",null,null],[17,"SO_BINDTODEVICE","","",null,null],[17,"SO_ATTACH_FILTER","","",null,null],[17,"SO_DETACH_FILTER","","",null,null],[17,"SO_GET_FILTER","","",null,null],[17,"SO_PEERNAME","","",null,null],[17,"SO_TIMESTAMP","","",null,null],[17,"SCM_TIMESTAMP","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"SO_PEERSEC","","",null,null],[17,"SO_PASSSEC","","",null,null],[17,"SO_TIMESTAMPNS","","",null,null],[17,"SCM_TIMESTAMPNS","","",null,null],[17,"SO_MARK","","",null,null],[17,"SO_TIMESTAMPING","","",null,null],[17,"SCM_TIMESTAMPING","","",null,null],[17,"SO_PROTOCOL","","",null,null],[17,"SO_DOMAIN","","",null,null],[17,"SO_RXQ_OVFL","","",null,null],[17,"SO_WIFI_STATUS","","",null,null],[17,"SCM_WIFI_STATUS","","",null,null],[17,"SO_PEEK_OFF","","",null,null],[17,"SO_NOFCS","","",null,null],[17,"SO_LOCK_FILTER","","",null,null],[17,"SO_SELECT_ERR_QUEUE","","",null,null],[17,"SO_BUSY_POLL","","",null,null],[17,"SO_MAX_PACING_RATE","","",null,null],[17,"SO_BPF_EXTENSIONS","","",null,null],[17,"SO_INCOMING_CPU","","",null,null],[17,"SO_ATTACH_BPF","","",null,null],[17,"SO_DETACH_BPF","","",null,null],[17,"SA_ONSTACK","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[17,"SIGCHLD","","",null,null],[17,"SIGBUS","","",null,null],[17,"SIGUSR1","","",null,null],[17,"SIGUSR2","","",null,null],[17,"SIGCONT","","",null,null],[17,"SIGSTOP","","",null,null],[17,"SIGTSTP","","",null,null],[17,"SIGURG","","",null,null],[17,"SIGIO","","",null,null],[17,"SIGSYS","","",null,null],[17,"SIGSTKFLT","","",null,null],[17,"SIGUNUSED","","",null,null],[17,"SIGPOLL","","",null,null],[17,"SIGPWR","","",null,null],[17,"SIG_SETMASK","","",null,null],[17,"SIG_BLOCK","","",null,null],[17,"SIG_UNBLOCK","","",null,null],[17,"POLLWRNORM","","",null,null],[17,"POLLWRBAND","","",null,null],[17,"O_ASYNC","","",null,null],[17,"O_NDELAY","","",null,null],[17,"PTRACE_DETACH","","",null,null],[17,"EFD_NONBLOCK","","",null,null],[17,"F_GETLK","","",null,null],[17,"F_GETOWN","","",null,null],[17,"F_SETOWN","","",null,null],[17,"F_SETLK","","",null,null],[17,"F_SETLKW","","",null,null],[17,"SFD_NONBLOCK","","",null,null],[17,"TIOCEXCL","","",null,null],[17,"TIOCNXCL","","",null,null],[17,"TIOCSCTTY","","",null,null],[17,"TIOCSTI","","",null,null],[17,"TIOCMGET","","",null,null],[17,"TIOCMBIS","","",null,null],[17,"TIOCMBIC","","",null,null],[17,"TIOCMSET","","",null,null],[17,"TIOCCONS","","",null,null],[17,"CLONE_NEWCGROUP","","",null,null],[17,"SFD_CLOEXEC","","",null,null],[17,"NCCS","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"EBFONT","","",null,null],[17,"ENOSTR","","",null,null],[17,"ENODATA","","",null,null],[17,"ETIME","","",null,null],[17,"ENOSR","","",null,null],[17,"ENONET","","",null,null],[17,"ENOPKG","","",null,null],[17,"EREMOTE","","",null,null],[17,"ENOLINK","","",null,null],[17,"EADV","","",null,null],[17,"ESRMNT","","",null,null],[17,"ECOMM","","",null,null],[17,"EPROTO","","",null,null],[17,"EDOTDOT","","",null,null],[17,"SA_NODEFER","","",null,null],[17,"SA_RESETHAND","","",null,null],[17,"SA_RESTART","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[17,"EPOLL_CLOEXEC","","",null,null],[17,"EFD_CLOEXEC","","",null,null],[17,"__SIZEOF_PTHREAD_CONDATTR_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEX_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEXATTR_T","","",null,null],[17,"O_DIRECT","","",null,null],[17,"O_DIRECTORY","","",null,null],[17,"O_NOFOLLOW","","",null,null],[17,"MAP_LOCKED","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_32BIT","","",null,null],[17,"EDEADLOCK","","",null,null],[17,"FIOCLEX","","",null,null],[17,"FIONBIO","","",null,null],[17,"PTRACE_GETFPREGS","","",null,null],[17,"PTRACE_SETFPREGS","","",null,null],[17,"PTRACE_GETFPXREGS","","",null,null],[17,"PTRACE_SETFPXREGS","","",null,null],[17,"PTRACE_GETREGS","","",null,null],[17,"PTRACE_SETREGS","","",null,null],[17,"PTRACE_O_EXITKILL","","",null,null],[17,"PTRACE_O_TRACECLONE","","",null,null],[17,"PTRACE_O_TRACEEXEC","","",null,null],[17,"PTRACE_O_TRACEEXIT","","",null,null],[17,"PTRACE_O_TRACEFORK","","",null,null],[17,"PTRACE_O_TRACESYSGOOD","","",null,null],[17,"PTRACE_O_TRACEVFORK","","",null,null],[17,"PTRACE_O_TRACEVFORKDONE","","",null,null],[17,"PTRACE_O_TRACESECCOMP","","",null,null],[17,"PTRACE_O_SUSPEND_SECCOMP","","",null,null],[17,"PTRACE_PEEKSIGINFO_SHARED","","",null,null],[17,"SYS_gettid","","",null,null],[17,"SYS_perf_event_open","","",null,null],[17,"MCL_CURRENT","","",null,null],[17,"MCL_FUTURE","","",null,null],[17,"SIGSTKSZ","","",null,null],[17,"MINSIGSTKSZ","","",null,null],[17,"CBAUD","","",null,null],[17,"TAB1","","",null,null],[17,"TAB2","","",null,null],[17,"TAB3","","",null,null],[17,"CR1","","",null,null],[17,"CR2","","",null,null],[17,"CR3","","",null,null],[17,"FF1","","",null,null],[17,"BS1","","",null,null],[17,"VT1","","",null,null],[17,"VWERASE","","",null,null],[17,"VREPRINT","","",null,null],[17,"VSUSP","","",null,null],[17,"VSTART","","",null,null],[17,"VSTOP","","",null,null],[17,"VDISCARD","","",null,null],[17,"VTIME","","",null,null],[17,"IXON","","",null,null],[17,"IXOFF","","",null,null],[17,"ONLCR","","",null,null],[17,"CSIZE","","",null,null],[17,"CS6","","",null,null],[17,"CS7","","",null,null],[17,"CS8","","",null,null],[17,"CSTOPB","","",null,null],[17,"CREAD","","",null,null],[17,"PARENB","","",null,null],[17,"PARODD","","",null,null],[17,"HUPCL","","",null,null],[17,"CLOCAL","","",null,null],[17,"ECHOKE","","",null,null],[17,"ECHOE","","",null,null],[17,"ECHOK","","",null,null],[17,"ECHONL","","",null,null],[17,"ECHOPRT","","",null,null],[17,"ECHOCTL","","",null,null],[17,"ISIG","","",null,null],[17,"ICANON","","",null,null],[17,"PENDIN","","",null,null],[17,"NOFLSH","","",null,null],[17,"B0","","",null,null],[17,"B50","","",null,null],[17,"B75","","",null,null],[17,"B110","","",null,null],[17,"B134","","",null,null],[17,"B150","","",null,null],[17,"B200","","",null,null],[17,"B300","","",null,null],[17,"B600","","",null,null],[17,"B1200","","",null,null],[17,"B1800","","",null,null],[17,"B2400","","",null,null],[17,"B4800","","",null,null],[17,"B9600","","",null,null],[17,"B19200","","",null,null],[17,"B38400","","",null,null],[17,"EXTA","","",null,null],[17,"EXTB","","",null,null],[17,"B57600","","",null,null],[17,"B115200","","",null,null],[17,"B230400","","",null,null],[17,"B460800","","",null,null],[17,"B500000","","",null,null],[17,"B576000","","",null,null],[17,"B921600","","",null,null],[17,"B1000000","","",null,null],[17,"B1152000","","",null,null],[17,"B1500000","","",null,null],[17,"B2000000","","",null,null],[17,"B2500000","","",null,null],[17,"B3000000","","",null,null],[17,"B3500000","","",null,null],[17,"B4000000","","",null,null],[17,"VEOL","","",null,null],[17,"VEOL2","","",null,null],[17,"VMIN","","",null,null],[17,"IEXTEN","","",null,null],[17,"TOSTOP","","",null,null],[17,"FLUSHO","","",null,null],[17,"EXTPROC","","",null,null],[17,"TCGETS","","",null,null],[17,"TCSETS","","",null,null],[17,"TCSETSW","","",null,null],[17,"TCSETSF","","",null,null],[17,"TCGETA","","",null,null],[17,"TCSETA","","",null,null],[17,"TCSETAW","","",null,null],[17,"TCSETAF","","",null,null],[17,"TCSBRK","","",null,null],[17,"TCXONC","","",null,null],[17,"TCFLSH","","",null,null],[17,"TIOCINQ","","",null,null],[17,"TIOCGPGRP","","",null,null],[17,"TIOCSPGRP","","",null,null],[17,"TIOCOUTQ","","",null,null],[17,"TIOCGWINSZ","","",null,null],[17,"TIOCSWINSZ","","",null,null],[17,"FIONREAD","","",null,null]],"paths":[[3,"group"],[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"linger"],[3,"sigval"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"sockaddr_nl"],[3,"sockaddr_ll"],[3,"tm"],[3,"sched_param"],[3,"Dl_info"],[3,"epoll_event"],[3,"utsname"],[3,"lconv"],[3,"sigevent"],[3,"dirent"],[3,"dirent64"],[3,"rlimit64"],[3,"glob_t"],[3,"ifaddrs"],[3,"passwd"],[3,"spwd"],[3,"statvfs"],[3,"dqblk"],[3,"signalfd_siginfo"],[3,"mq_attr"],[3,"if_nameindex"],[3,"msginfo"],[3,"aiocb"],[3,"__exit_status"],[3,"__timeval"],[3,"utmpx"],[3,"sigaction"],[3,"stack_t"],[3,"siginfo_t"],[3,"glob64_t"],[3,"ucred"],[3,"statfs"],[3,"msghdr"],[3,"cmsghdr"],[3,"termios"],[3,"flock"],[3,"sysinfo"],[3,"msqid_ds"],[3,"stat"],[3,"stat64"],[3,"_libc_fpxreg"],[3,"_libc_xmmreg"],[3,"_libc_fpstate"],[3,"mcontext_t"],[3,"ucontext_t"],[3,"ipc_perm"],[3,"shmid_ds"],[3,"pthread_attr_t"],[3,"sigset_t"],[3,"sem_t"],[3,"pthread_mutex_t"],[3,"pthread_rwlock_t"],[3,"pthread_mutexattr_t"],[3,"pthread_cond_t"],[3,"pthread_condattr_t"],[3,"fsid_t"],[3,"cpu_set_t"],[3,"fd_set"]]};
searchIndex["libsqlite3_sys"] = {"doc":"","items":[[3,"Error","libsqlite3_sys","",null,null],[12,"code","","",0,null],[12,"extended_code","","",0,null],[3,"sqlite3","","",null,null],[3,"sqlite3_file","","",null,null],[12,"pMethods","","",1,null],[3,"sqlite3_file_sqlite3_io_methods","","",null,null],[12,"iVersion","","",2,null],[12,"xClose","","",2,null],[12,"xRead","","",2,null],[12,"xWrite","","",2,null],[12,"xTruncate","","",2,null],[12,"xSync","","",2,null],[12,"xFileSize","","",2,null],[12,"xLock","","",2,null],[12,"xUnlock","","",2,null],[12,"xCheckReservedLock","","",2,null],[12,"xFileControl","","",2,null],[12,"xSectorSize","","",2,null],[12,"xDeviceCharacteristics","","",2,null],[3,"sqlite3_mutex","","",null,null],[3,"sqlite3_vfs","","",null,null],[12,"iVersion","","",3,null],[12,"szOsFile","","",3,null],[12,"mxPathname","","",3,null],[12,"pNext","","",3,null],[12,"zName","","",3,null],[12,"pAppData","","",3,null],[12,"xOpen","","",3,null],[12,"xDelete","","",3,null],[12,"xAccess","","",3,null],[12,"xFullPathname","","",3,null],[12,"xDlOpen","","",3,null],[12,"xDlError","","",3,null],[12,"xDlSym","","",3,null],[12,"xDlClose","","",3,null],[12,"xRandomness","","",3,null],[12,"xSleep","","",3,null],[12,"xCurrentTime","","",3,null],[12,"xGetLastError","","",3,null],[3,"sqlite3_mem_methods","","",null,null],[12,"xMalloc","","",4,null],[12,"xFree","","",4,null],[12,"xRealloc","","",4,null],[12,"xSize","","",4,null],[12,"xRoundup","","",4,null],[12,"xInit","","",4,null],[12,"xShutdown","","",4,null],[12,"pAppData","","",4,null],[3,"sqlite3_stmt","","",null,null],[3,"Mem","","",null,null],[3,"sqlite3_context","","",null,null],[3,"sqlite3_vtab","","",null,null],[12,"pModule","","",5,null],[12,"nRef","","",5,null],[12,"zErrMsg","","",5,null],[3,"sqlite3_index_info","","",null,null],[12,"nConstraint","","",6,null],[12,"aConstraint","","",6,null],[12,"nOrderBy","","",6,null],[12,"aOrderBy","","",6,null],[12,"aConstraintUsage","","",6,null],[12,"idxNum","","",6,null],[12,"idxStr","","",6,null],[12,"needToFreeIdxStr","","",6,null],[12,"orderByConsumed","","",6,null],[12,"estimatedCost","","",6,null],[3,"sqlite3_index_info_sqlite3_index_constraint","","",null,null],[12,"iColumn","","",7,null],[12,"op","","",7,null],[12,"usable","","",7,null],[12,"iTermOffset","","",7,null],[3,"sqlite3_index_info_sqlite3_index_orderby","","",null,null],[12,"iColumn","","",8,null],[12,"desc","","",8,null],[3,"sqlite3_index_info_sqlite3_index_constraint_usage","","",null,null],[12,"argvIndex","","",9,null],[12,"omit","","",9,null],[3,"sqlite3_vtab_cursor","","",null,null],[12,"pVtab","","",10,null],[3,"sqlite3_module","","",null,null],[12,"iVersion","","",11,null],[12,"xCreate","","",11,null],[12,"xConnect","","",11,null],[12,"xBestIndex","","",11,null],[12,"xDisconnect","","",11,null],[12,"xDestroy","","",11,null],[12,"xOpen","","",11,null],[12,"xClose","","",11,null],[12,"xFilter","","",11,null],[12,"xNext","","",11,null],[12,"xEof","","",11,null],[12,"xColumn","","",11,null],[12,"xRowid","","",11,null],[12,"xUpdate","","",11,null],[12,"xBegin","","",11,null],[12,"xSync","","",11,null],[12,"xCommit","","",11,null],[12,"xRollback","","",11,null],[12,"xFindFunction","","",11,null],[12,"xRename","","",11,null],[3,"sqlite3_blob","","",null,null],[3,"sqlite3_mutex_methods","","",null,null],[12,"xMutexInit","","",12,null],[12,"xMutexEnd","","",12,null],[12,"xMutexAlloc","","",12,null],[12,"xMutexFree","","",12,null],[12,"xMutexEnter","","",12,null],[12,"xMutexTry","","",12,null],[12,"xMutexLeave","","",12,null],[12,"xMutexHeld","","",12,null],[12,"xMutexNotheld","","",12,null],[3,"sqlite3_pcache","","",null,null],[3,"sqlite3_pcache_methods","","",null,null],[12,"pArg","","",13,null],[12,"xInit","","",13,null],[12,"xShutdown","","",13,null],[12,"xCreate","","",13,null],[12,"xCachesize","","",13,null],[12,"xPagecount","","",13,null],[12,"xFetch","","",13,null],[12,"xUnpin","","",13,null],[12,"xRekey","","",13,null],[12,"xTruncate","","",13,null],[12,"xDestroy","","",13,null],[3,"__va_list_tag","","",null,null],[12,"gp_offset","","",14,null],[12,"fp_offset","","",14,null],[12,"overflow_arg_area","","",14,null],[12,"reg_save_area","","",14,null],[4,"ErrorCode","","Error Codes",null,null],[13,"InternalMalfunction","","Internal logic error in SQLite",15,null],[13,"PermissionDenied","","Access permission denied",15,null],[13,"OperationAborted","","Callback routine requested an abort",15,null],[13,"DatabaseBusy","","The database file is locked",15,null],[13,"DatabaseLocked","","A table in the database is locked",15,null],[13,"OutOfMemory","","A malloc() failed",15,null],[13,"ReadOnly","","Attempt to write a readonly database",15,null],[13,"OperationInterrupted","","Operation terminated by sqlite3_interrupt()",15,null],[13,"SystemIOFailure","","Some kind of disk I/O error occurred",15,null],[13,"DatabaseCorrupt","","The database disk image is malformed",15,null],[13,"NotFound","","Unknown opcode in sqlite3_file_control()",15,null],[13,"DiskFull","","Insertion failed because database is full",15,null],[13,"CannotOpen","","Unable to open the database file",15,null],[13,"FileLockingProtocolFailed","","Database lock protocol error",15,null],[13,"SchemaChanged","","The database schema changed",15,null],[13,"TooBig","","String or BLOB exceeds size limit",15,null],[13,"ConstraintViolation","","Abort due to constraint violation",15,null],[13,"TypeMismatch","","Data type mismatch",15,null],[13,"APIMisuse","","Library used incorrectly",15,null],[13,"NoLargeFileSupport","","Uses OS features not supported on host",15,null],[13,"AuthorizationForStatementDenied","","Authorization denied",15,null],[13,"ParameterOutOfRange","","2nd parameter to sqlite3_bind out of range",15,null],[13,"NotADatabase","","File opened that is not a database file",15,null],[13,"Unknown","","SQL error or missing database",15,null],[4,"Limit","","Run-Time Limit Categories",null,null],[13,"SQLITE_LIMIT_LENGTH","","The maximum size of any string or BLOB or table row, in bytes.",16,null],[13,"SQLITE_LIMIT_SQL_LENGTH","","The maximum length of an SQL statement, in bytes.",16,null],[13,"SQLITE_LIMIT_COLUMN","","The maximum number of columns in a table definition or in the result set of a SELECT or the maximum number of columns in an index or in an ORDER BY or GROUP BY clause.",16,null],[13,"SQLITE_LIMIT_EXPR_DEPTH","","The maximum depth of the parse tree on any expression.",16,null],[13,"SQLITE_LIMIT_COMPOUND_SELECT","","The maximum number of terms in a compound SELECT statement.",16,null],[13,"SQLITE_LIMIT_VDBE_OP","","The maximum number of instructions in a virtual machine program used to implement an SQL statement.",16,null],[13,"SQLITE_LIMIT_FUNCTION_ARG","","The maximum number of arguments on a function.",16,null],[13,"SQLITE_LIMIT_ATTACHED","","The maximum number of attached databases.",16,null],[13,"SQLITE_LIMIT_LIKE_PATTERN_LENGTH","","The maximum length of the pattern argument to the LIKE or GLOB operators.",16,null],[13,"SQLITE_LIMIT_VARIABLE_NUMBER","","The maximum index number of any parameter in an SQL statement.",16,null],[13,"SQLITE_LIMIT_TRIGGER_DEPTH","","The maximum depth of recursion for triggers.",16,null],[13,"SQLITE_LIMIT_WORKER_THREADS","","The maximum number of auxiliary worker threads that a single prepared statement may start.",16,null],[5,"code_to_str","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"str"}}],[5,"SQLITE_STATIC","","",null,{"inputs":[],"output":{"name":"sqlite3_destructor_type"}}],[5,"SQLITE_TRANSIENT","","",null,{"inputs":[],"output":{"name":"sqlite3_destructor_type"}}],[7,"sqlite3_version","","",null,null],[5,"sqlite3_libversion","","",null,null],[5,"sqlite3_libversion_number","","",null,null],[5,"sqlite3_threadsafe","","",null,null],[5,"sqlite3_close","","",null,null],[5,"sqlite3_exec","","",null,null],[5,"sqlite3_initialize","","",null,null],[5,"sqlite3_shutdown","","",null,null],[5,"sqlite3_os_init","","",null,null],[5,"sqlite3_os_end","","",null,null],[5,"sqlite3_config","","",null,null],[5,"sqlite3_db_config","","",null,null],[5,"sqlite3_extended_result_codes","","",null,null],[5,"sqlite3_last_insert_rowid","","",null,null],[5,"sqlite3_changes","","",null,null],[5,"sqlite3_total_changes","","",null,null],[5,"sqlite3_interrupt","","",null,null],[5,"sqlite3_complete","","",null,null],[5,"sqlite3_complete16","","",null,null],[5,"sqlite3_busy_handler","","",null,null],[5,"sqlite3_busy_timeout","","",null,null],[5,"sqlite3_get_table","","",null,null],[5,"sqlite3_free_table","","",null,null],[5,"sqlite3_mprintf","","",null,null],[5,"sqlite3_vmprintf","","",null,null],[5,"sqlite3_snprintf","","",null,null],[5,"sqlite3_malloc","","",null,null],[5,"sqlite3_realloc","","",null,null],[5,"sqlite3_free","","",null,null],[5,"sqlite3_memory_used","","",null,null],[5,"sqlite3_memory_highwater","","",null,null],[5,"sqlite3_randomness","","",null,null],[5,"sqlite3_set_authorizer","","",null,null],[5,"sqlite3_trace","","",null,null],[5,"sqlite3_profile","","",null,null],[5,"sqlite3_progress_handler","","",null,null],[5,"sqlite3_open","","",null,null],[5,"sqlite3_open16","","",null,null],[5,"sqlite3_open_v2","","",null,null],[5,"sqlite3_errcode","","",null,null],[5,"sqlite3_extended_errcode","","",null,null],[5,"sqlite3_errmsg","","",null,null],[5,"sqlite3_errmsg16","","",null,null],[5,"sqlite3_limit","","",null,null],[5,"sqlite3_prepare","","",null,null],[5,"sqlite3_prepare_v2","","",null,null],[5,"sqlite3_prepare16","","",null,null],[5,"sqlite3_prepare16_v2","","",null,null],[5,"sqlite3_sql","","",null,null],[5,"sqlite3_bind_blob","","",null,null],[5,"sqlite3_bind_double","","",null,null],[5,"sqlite3_bind_int","","",null,null],[5,"sqlite3_bind_int64","","",null,null],[5,"sqlite3_bind_null","","",null,null],[5,"sqlite3_bind_text","","",null,null],[5,"sqlite3_bind_text16","","",null,null],[5,"sqlite3_bind_value","","",null,null],[5,"sqlite3_bind_zeroblob","","",null,null],[5,"sqlite3_bind_parameter_count","","",null,null],[5,"sqlite3_bind_parameter_name","","",null,null],[5,"sqlite3_bind_parameter_index","","",null,null],[5,"sqlite3_clear_bindings","","",null,null],[5,"sqlite3_column_count","","",null,null],[5,"sqlite3_column_name","","",null,null],[5,"sqlite3_column_name16","","",null,null],[5,"sqlite3_column_database_name","","",null,null],[5,"sqlite3_column_database_name16","","",null,null],[5,"sqlite3_column_table_name","","",null,null],[5,"sqlite3_column_table_name16","","",null,null],[5,"sqlite3_column_origin_name","","",null,null],[5,"sqlite3_column_origin_name16","","",null,null],[5,"sqlite3_column_decltype","","",null,null],[5,"sqlite3_column_decltype16","","",null,null],[5,"sqlite3_step","","",null,null],[5,"sqlite3_data_count","","",null,null],[5,"sqlite3_column_blob","","",null,null],[5,"sqlite3_column_bytes","","",null,null],[5,"sqlite3_column_bytes16","","",null,null],[5,"sqlite3_column_double","","",null,null],[5,"sqlite3_column_int","","",null,null],[5,"sqlite3_column_int64","","",null,null],[5,"sqlite3_column_text","","",null,null],[5,"sqlite3_column_text16","","",null,null],[5,"sqlite3_column_type","","",null,null],[5,"sqlite3_column_value","","",null,null],[5,"sqlite3_finalize","","",null,null],[5,"sqlite3_reset","","",null,null],[5,"sqlite3_create_function","","",null,null],[5,"sqlite3_create_function16","","",null,null],[5,"sqlite3_aggregate_count","","",null,null],[5,"sqlite3_expired","","",null,null],[5,"sqlite3_transfer_bindings","","",null,null],[5,"sqlite3_global_recover","","",null,null],[5,"sqlite3_thread_cleanup","","",null,null],[5,"sqlite3_memory_alarm","","",null,null],[5,"sqlite3_value_blob","","",null,null],[5,"sqlite3_value_bytes","","",null,null],[5,"sqlite3_value_bytes16","","",null,null],[5,"sqlite3_value_double","","",null,null],[5,"sqlite3_value_int","","",null,null],[5,"sqlite3_value_int64","","",null,null],[5,"sqlite3_value_text","","",null,null],[5,"sqlite3_value_text16","","",null,null],[5,"sqlite3_value_text16le","","",null,null],[5,"sqlite3_value_text16be","","",null,null],[5,"sqlite3_value_type","","",null,null],[5,"sqlite3_value_numeric_type","","",null,null],[5,"sqlite3_aggregate_context","","",null,null],[5,"sqlite3_user_data","","",null,null],[5,"sqlite3_context_db_handle","","",null,null],[5,"sqlite3_get_auxdata","","",null,null],[5,"sqlite3_set_auxdata","","",null,null],[5,"sqlite3_result_blob","","",null,null],[5,"sqlite3_result_double","","",null,null],[5,"sqlite3_result_error","","",null,null],[5,"sqlite3_result_error16","","",null,null],[5,"sqlite3_result_error_toobig","","",null,null],[5,"sqlite3_result_error_nomem","","",null,null],[5,"sqlite3_result_error_code","","",null,null],[5,"sqlite3_result_int","","",null,null],[5,"sqlite3_result_int64","","",null,null],[5,"sqlite3_result_null","","",null,null],[5,"sqlite3_result_text","","",null,null],[5,"sqlite3_result_text16","","",null,null],[5,"sqlite3_result_text16le","","",null,null],[5,"sqlite3_result_text16be","","",null,null],[5,"sqlite3_result_value","","",null,null],[5,"sqlite3_result_zeroblob","","",null,null],[5,"sqlite3_create_collation","","",null,null],[5,"sqlite3_create_collation_v2","","",null,null],[5,"sqlite3_create_collation16","","",null,null],[5,"sqlite3_collation_needed","","",null,null],[5,"sqlite3_collation_needed16","","",null,null],[5,"sqlite3_key","","",null,null],[5,"sqlite3_rekey","","",null,null],[5,"sqlite3_sleep","","",null,null],[7,"sqlite3_temp_directory","","",null,null],[5,"sqlite3_get_autocommit","","",null,null],[5,"sqlite3_db_handle","","",null,null],[5,"sqlite3_next_stmt","","",null,null],[5,"sqlite3_commit_hook","","",null,null],[5,"sqlite3_rollback_hook","","",null,null],[5,"sqlite3_update_hook","","",null,null],[5,"sqlite3_enable_shared_cache","","",null,null],[5,"sqlite3_release_memory","","",null,null],[5,"sqlite3_soft_heap_limit","","",null,null],[5,"sqlite3_table_column_metadata","","",null,null],[5,"sqlite3_load_extension","","",null,null],[5,"sqlite3_enable_load_extension","","",null,null],[5,"sqlite3_auto_extension","","",null,null],[5,"sqlite3_reset_auto_extension","","",null,null],[5,"sqlite3_create_module","","",null,null],[5,"sqlite3_create_module_v2","","",null,null],[5,"sqlite3_declare_vtab","","",null,null],[5,"sqlite3_overload_function","","",null,null],[5,"sqlite3_blob_open","","",null,null],[5,"sqlite3_blob_close","","",null,null],[5,"sqlite3_blob_bytes","","",null,null],[5,"sqlite3_blob_read","","",null,null],[5,"sqlite3_blob_write","","",null,null],[5,"sqlite3_vfs_find","","",null,null],[5,"sqlite3_vfs_register","","",null,null],[5,"sqlite3_vfs_unregister","","",null,null],[5,"sqlite3_mutex_alloc","","",null,null],[5,"sqlite3_mutex_free","","",null,null],[5,"sqlite3_mutex_enter","","",null,null],[5,"sqlite3_mutex_try","","",null,null],[5,"sqlite3_mutex_leave","","",null,null],[5,"sqlite3_mutex_held","","",null,null],[5,"sqlite3_mutex_notheld","","",null,null],[5,"sqlite3_db_mutex","","",null,null],[5,"sqlite3_file_control","","",null,null],[5,"sqlite3_test_control","","",null,null],[5,"sqlite3_status","","",null,null],[5,"sqlite3_db_status","","",null,null],[5,"sqlite3_stmt_status","","",null,null],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"errorcode"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"errorcode"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"new","","",0,{"inputs":[{"name":"c_int"}],"output":{"name":"error"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[6,"va_list","","",null,null],[6,"__gnuc_va_list","","",null,null],[6,"sqlite_int64","","",null,null],[6,"sqlite_uint64","","",null,null],[6,"sqlite3_int64","","",null,null],[6,"sqlite3_uint64","","",null,null],[6,"sqlite3_callback","","",null,null],[6,"sqlite3_io_methods","","",null,null],[6,"sqlite3_value","","",null,null],[6,"sqlite3_destructor_type","","",null,null],[6,"__builtin_va_list","","",null,null],[17,"SQLITE_NOTICE","","",null,null],[17,"SQLITE_WARNING","","",null,null],[17,"SQLITE_IOERR_SHMOPEN","","",null,null],[17,"SQLITE_IOERR_SHMSIZE","","",null,null],[17,"SQLITE_IOERR_SHMLOCK","","",null,null],[17,"SQLITE_IOERR_SHMMAP","","",null,null],[17,"SQLITE_IOERR_SEEK","","",null,null],[17,"SQLITE_IOERR_DELETE_NOENT","","",null,null],[17,"SQLITE_IOERR_MMAP","","",null,null],[17,"SQLITE_IOERR_GETTEMPPATH","","",null,null],[17,"SQLITE_IOERR_CONVPATH","","",null,null],[17,"SQLITE_IOERR_VNODE","","",null,null],[17,"SQLITE_LOCKED_SHAREDCACHE","","",null,null],[17,"SQLITE_BUSY_RECOVERY","","",null,null],[17,"SQLITE_BUSY_SNAPSHOT","","",null,null],[17,"SQLITE_CANTOPEN_NOTEMPDIR","","",null,null],[17,"SQLITE_CANTOPEN_ISDIR","","",null,null],[17,"SQLITE_CANTOPEN_FULLPATH","","",null,null],[17,"SQLITE_CANTOPEN_CONVPATH","","",null,null],[17,"SQLITE_CORRUPT_VTAB","","",null,null],[17,"SQLITE_READONLY_RECOVERY","","",null,null],[17,"SQLITE_READONLY_CANTLOCK","","",null,null],[17,"SQLITE_READONLY_ROLLBACK","","",null,null],[17,"SQLITE_READONLY_DBMOVED","","",null,null],[17,"SQLITE_ABORT_ROLLBACK","","",null,null],[17,"SQLITE_CONSTRAINT_CHECK","","",null,null],[17,"SQLITE_CONSTRAINT_COMMITHOOK","","",null,null],[17,"SQLITE_CONSTRAINT_FOREIGNKEY","","",null,null],[17,"SQLITE_CONSTRAINT_FUNCTION","","",null,null],[17,"SQLITE_CONSTRAINT_NOTNULL","","",null,null],[17,"SQLITE_CONSTRAINT_PRIMARYKEY","","",null,null],[17,"SQLITE_CONSTRAINT_TRIGGER","","",null,null],[17,"SQLITE_CONSTRAINT_UNIQUE","","",null,null],[17,"SQLITE_CONSTRAINT_VTAB","","",null,null],[17,"SQLITE_CONSTRAINT_ROWID","","",null,null],[17,"SQLITE_NOTICE_RECOVER_WAL","","",null,null],[17,"SQLITE_NOTICE_RECOVER_ROLLBACK","","",null,null],[17,"SQLITE_WARNING_AUTOINDEX","","",null,null],[17,"SQLITE_AUTH_USER","","",null,null],[17,"__GNUC_VA_LIST","","",null,null],[17,"SQLITE_VERSION","","",null,null],[17,"SQLITE_VERSION_NUMBER","","",null,null],[17,"SQLITE_OK","","",null,null],[17,"SQLITE_ERROR","","",null,null],[17,"SQLITE_INTERNAL","","",null,null],[17,"SQLITE_PERM","","",null,null],[17,"SQLITE_ABORT","","",null,null],[17,"SQLITE_BUSY","","",null,null],[17,"SQLITE_LOCKED","","",null,null],[17,"SQLITE_NOMEM","","",null,null],[17,"SQLITE_READONLY","","",null,null],[17,"SQLITE_INTERRUPT","","",null,null],[17,"SQLITE_IOERR","","",null,null],[17,"SQLITE_CORRUPT","","",null,null],[17,"SQLITE_NOTFOUND","","",null,null],[17,"SQLITE_FULL","","",null,null],[17,"SQLITE_CANTOPEN","","",null,null],[17,"SQLITE_PROTOCOL","","",null,null],[17,"SQLITE_EMPTY","","",null,null],[17,"SQLITE_SCHEMA","","",null,null],[17,"SQLITE_TOOBIG","","",null,null],[17,"SQLITE_CONSTRAINT","","",null,null],[17,"SQLITE_MISMATCH","","",null,null],[17,"SQLITE_MISUSE","","",null,null],[17,"SQLITE_NOLFS","","",null,null],[17,"SQLITE_AUTH","","",null,null],[17,"SQLITE_FORMAT","","",null,null],[17,"SQLITE_RANGE","","",null,null],[17,"SQLITE_NOTADB","","",null,null],[17,"SQLITE_ROW","","",null,null],[17,"SQLITE_DONE","","",null,null],[17,"SQLITE_IOERR_READ","","",null,null],[17,"SQLITE_IOERR_SHORT_READ","","",null,null],[17,"SQLITE_IOERR_WRITE","","",null,null],[17,"SQLITE_IOERR_FSYNC","","",null,null],[17,"SQLITE_IOERR_DIR_FSYNC","","",null,null],[17,"SQLITE_IOERR_TRUNCATE","","",null,null],[17,"SQLITE_IOERR_FSTAT","","",null,null],[17,"SQLITE_IOERR_UNLOCK","","",null,null],[17,"SQLITE_IOERR_RDLOCK","","",null,null],[17,"SQLITE_IOERR_DELETE","","",null,null],[17,"SQLITE_IOERR_BLOCKED","","",null,null],[17,"SQLITE_IOERR_NOMEM","","",null,null],[17,"SQLITE_IOERR_ACCESS","","",null,null],[17,"SQLITE_IOERR_CHECKRESERVEDLOCK","","",null,null],[17,"SQLITE_IOERR_LOCK","","",null,null],[17,"SQLITE_IOERR_CLOSE","","",null,null],[17,"SQLITE_IOERR_DIR_CLOSE","","",null,null],[17,"SQLITE_OPEN_READONLY","","",null,null],[17,"SQLITE_OPEN_READWRITE","","",null,null],[17,"SQLITE_OPEN_CREATE","","",null,null],[17,"SQLITE_OPEN_DELETEONCLOSE","","",null,null],[17,"SQLITE_OPEN_EXCLUSIVE","","",null,null],[17,"SQLITE_OPEN_MAIN_DB","","",null,null],[17,"SQLITE_OPEN_TEMP_DB","","",null,null],[17,"SQLITE_OPEN_TRANSIENT_DB","","",null,null],[17,"SQLITE_OPEN_MAIN_JOURNAL","","",null,null],[17,"SQLITE_OPEN_TEMP_JOURNAL","","",null,null],[17,"SQLITE_OPEN_SUBJOURNAL","","",null,null],[17,"SQLITE_OPEN_MASTER_JOURNAL","","",null,null],[17,"SQLITE_OPEN_NOMUTEX","","",null,null],[17,"SQLITE_OPEN_FULLMUTEX","","",null,null],[17,"SQLITE_IOCAP_ATOMIC","","",null,null],[17,"SQLITE_IOCAP_ATOMIC512","","",null,null],[17,"SQLITE_IOCAP_ATOMIC1K","","",null,null],[17,"SQLITE_IOCAP_ATOMIC2K","","",null,null],[17,"SQLITE_IOCAP_ATOMIC4K","","",null,null],[17,"SQLITE_IOCAP_ATOMIC8K","","",null,null],[17,"SQLITE_IOCAP_ATOMIC16K","","",null,null],[17,"SQLITE_IOCAP_ATOMIC32K","","",null,null],[17,"SQLITE_IOCAP_ATOMIC64K","","",null,null],[17,"SQLITE_IOCAP_SAFE_APPEND","","",null,null],[17,"SQLITE_IOCAP_SEQUENTIAL","","",null,null],[17,"SQLITE_LOCK_NONE","","",null,null],[17,"SQLITE_LOCK_SHARED","","",null,null],[17,"SQLITE_LOCK_RESERVED","","",null,null],[17,"SQLITE_LOCK_PENDING","","",null,null],[17,"SQLITE_LOCK_EXCLUSIVE","","",null,null],[17,"SQLITE_SYNC_NORMAL","","",null,null],[17,"SQLITE_SYNC_FULL","","",null,null],[17,"SQLITE_SYNC_DATAONLY","","",null,null],[17,"SQLITE_FCNTL_LOCKSTATE","","",null,null],[17,"SQLITE_GET_LOCKPROXYFILE","","",null,null],[17,"SQLITE_SET_LOCKPROXYFILE","","",null,null],[17,"SQLITE_LAST_ERRNO","","",null,null],[17,"SQLITE_ACCESS_EXISTS","","",null,null],[17,"SQLITE_ACCESS_READWRITE","","",null,null],[17,"SQLITE_ACCESS_READ","","",null,null],[17,"SQLITE_CONFIG_SINGLETHREAD","","",null,null],[17,"SQLITE_CONFIG_MULTITHREAD","","",null,null],[17,"SQLITE_CONFIG_SERIALIZED","","",null,null],[17,"SQLITE_CONFIG_MALLOC","","",null,null],[17,"SQLITE_CONFIG_GETMALLOC","","",null,null],[17,"SQLITE_CONFIG_SCRATCH","","",null,null],[17,"SQLITE_CONFIG_PAGECACHE","","",null,null],[17,"SQLITE_CONFIG_HEAP","","",null,null],[17,"SQLITE_CONFIG_MEMSTATUS","","",null,null],[17,"SQLITE_CONFIG_MUTEX","","",null,null],[17,"SQLITE_CONFIG_GETMUTEX","","",null,null],[17,"SQLITE_CONFIG_LOOKASIDE","","",null,null],[17,"SQLITE_CONFIG_PCACHE","","",null,null],[17,"SQLITE_CONFIG_GETPCACHE","","",null,null],[17,"SQLITE_DBCONFIG_LOOKASIDE","","",null,null],[17,"SQLITE_DENY","","",null,null],[17,"SQLITE_IGNORE","","",null,null],[17,"SQLITE_CREATE_INDEX","","",null,null],[17,"SQLITE_CREATE_TABLE","","",null,null],[17,"SQLITE_CREATE_TEMP_INDEX","","",null,null],[17,"SQLITE_CREATE_TEMP_TABLE","","",null,null],[17,"SQLITE_CREATE_TEMP_TRIGGER","","",null,null],[17,"SQLITE_CREATE_TEMP_VIEW","","",null,null],[17,"SQLITE_CREATE_TRIGGER","","",null,null],[17,"SQLITE_CREATE_VIEW","","",null,null],[17,"SQLITE_DELETE","","",null,null],[17,"SQLITE_DROP_INDEX","","",null,null],[17,"SQLITE_DROP_TABLE","","",null,null],[17,"SQLITE_DROP_TEMP_INDEX","","",null,null],[17,"SQLITE_DROP_TEMP_TABLE","","",null,null],[17,"SQLITE_DROP_TEMP_TRIGGER","","",null,null],[17,"SQLITE_DROP_TEMP_VIEW","","",null,null],[17,"SQLITE_DROP_TRIGGER","","",null,null],[17,"SQLITE_DROP_VIEW","","",null,null],[17,"SQLITE_INSERT","","",null,null],[17,"SQLITE_PRAGMA","","",null,null],[17,"SQLITE_READ","","",null,null],[17,"SQLITE_SELECT","","",null,null],[17,"SQLITE_TRANSACTION","","",null,null],[17,"SQLITE_UPDATE","","",null,null],[17,"SQLITE_ATTACH","","",null,null],[17,"SQLITE_DETACH","","",null,null],[17,"SQLITE_ALTER_TABLE","","",null,null],[17,"SQLITE_REINDEX","","",null,null],[17,"SQLITE_ANALYZE","","",null,null],[17,"SQLITE_CREATE_VTABLE","","",null,null],[17,"SQLITE_DROP_VTABLE","","",null,null],[17,"SQLITE_FUNCTION","","",null,null],[17,"SQLITE_SAVEPOINT","","",null,null],[17,"SQLITE_COPY","","",null,null],[17,"SQLITE_LIMIT_LENGTH","","",null,null],[17,"SQLITE_LIMIT_SQL_LENGTH","","",null,null],[17,"SQLITE_LIMIT_COLUMN","","",null,null],[17,"SQLITE_LIMIT_EXPR_DEPTH","","",null,null],[17,"SQLITE_LIMIT_COMPOUND_SELECT","","",null,null],[17,"SQLITE_LIMIT_VDBE_OP","","",null,null],[17,"SQLITE_LIMIT_FUNCTION_ARG","","",null,null],[17,"SQLITE_LIMIT_ATTACHED","","",null,null],[17,"SQLITE_LIMIT_LIKE_PATTERN_LENGTH","","",null,null],[17,"SQLITE_LIMIT_VARIABLE_NUMBER","","",null,null],[17,"SQLITE_INTEGER","","",null,null],[17,"SQLITE_FLOAT","","",null,null],[17,"SQLITE_BLOB","","",null,null],[17,"SQLITE_NULL","","",null,null],[17,"SQLITE_TEXT","","",null,null],[17,"SQLITE3_TEXT","","",null,null],[17,"SQLITE_UTF8","","",null,null],[17,"SQLITE_UTF16LE","","",null,null],[17,"SQLITE_UTF16BE","","",null,null],[17,"SQLITE_UTF16","","",null,null],[17,"SQLITE_ANY","","",null,null],[17,"SQLITE_UTF16_ALIGNED","","",null,null],[17,"SQLITE_INDEX_CONSTRAINT_EQ","","",null,null],[17,"SQLITE_INDEX_CONSTRAINT_GT","","",null,null],[17,"SQLITE_INDEX_CONSTRAINT_LE","","",null,null],[17,"SQLITE_INDEX_CONSTRAINT_LT","","",null,null],[17,"SQLITE_INDEX_CONSTRAINT_GE","","",null,null],[17,"SQLITE_INDEX_CONSTRAINT_MATCH","","",null,null],[17,"SQLITE_MUTEX_FAST","","",null,null],[17,"SQLITE_MUTEX_RECURSIVE","","",null,null],[17,"SQLITE_MUTEX_STATIC_MASTER","","",null,null],[17,"SQLITE_MUTEX_STATIC_MEM","","",null,null],[17,"SQLITE_MUTEX_STATIC_MEM2","","",null,null],[17,"SQLITE_MUTEX_STATIC_PRNG","","",null,null],[17,"SQLITE_MUTEX_STATIC_LRU","","",null,null],[17,"SQLITE_MUTEX_STATIC_LRU2","","",null,null],[17,"SQLITE_TESTCTRL_PRNG_SAVE","","",null,null],[17,"SQLITE_TESTCTRL_PRNG_RESTORE","","",null,null],[17,"SQLITE_TESTCTRL_PRNG_RESET","","",null,null],[17,"SQLITE_TESTCTRL_BITVEC_TEST","","",null,null],[17,"SQLITE_TESTCTRL_FAULT_INSTALL","","",null,null],[17,"SQLITE_TESTCTRL_BENIGN_MALLOC_HOOKS","","",null,null],[17,"SQLITE_STATUS_MEMORY_USED","","",null,null],[17,"SQLITE_STATUS_PAGECACHE_USED","","",null,null],[17,"SQLITE_STATUS_PAGECACHE_OVERFLOW","","",null,null],[17,"SQLITE_STATUS_SCRATCH_USED","","",null,null],[17,"SQLITE_STATUS_SCRATCH_OVERFLOW","","",null,null],[17,"SQLITE_STATUS_MALLOC_SIZE","","",null,null],[17,"SQLITE_STATUS_PARSER_STACK","","",null,null],[17,"SQLITE_STATUS_PAGECACHE_SIZE","","",null,null],[17,"SQLITE_STATUS_SCRATCH_SIZE","","",null,null],[17,"SQLITE_DBSTATUS_LOOKASIDE_USED","","",null,null],[17,"SQLITE_STMTSTATUS_FULLSCAN_STEP","","",null,null],[17,"SQLITE_STMTSTATUS_SORT","","",null,null],[17,"SQLITE_DETERMINISTIC","","",null,null],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"sqlite3"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"sqlite3_mutex"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"sqlite3_stmt"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"mem"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"sqlite3_context"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"sqlite3_blob"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"sqlite3_pcache"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}]],"paths":[[3,"Error"],[3,"sqlite3_file"],[3,"sqlite3_file_sqlite3_io_methods"],[3,"sqlite3_vfs"],[3,"sqlite3_mem_methods"],[3,"sqlite3_vtab"],[3,"sqlite3_index_info"],[3,"sqlite3_index_info_sqlite3_index_constraint"],[3,"sqlite3_index_info_sqlite3_index_orderby"],[3,"sqlite3_index_info_sqlite3_index_constraint_usage"],[3,"sqlite3_vtab_cursor"],[3,"sqlite3_module"],[3,"sqlite3_mutex_methods"],[3,"sqlite3_pcache_methods"],[3,"__va_list_tag"],[4,"ErrorCode"],[4,"Limit"],[3,"sqlite3"],[3,"sqlite3_mutex"],[3,"sqlite3_stmt"],[3,"Mem"],[3,"sqlite3_context"],[3,"sqlite3_blob"],[3,"sqlite3_pcache"]]};
searchIndex["linked_hash_map"] = {"doc":"A `HashMap` wrapper that holds key-value pairs in insertion order.","items":[[3,"LinkedHashMap","linked_hash_map","A linked hash map.",null,null],[3,"Iter","","An insertion-order iterator over a `LinkedHashMap`'s entries, with immutable references to the values.",null,null],[3,"IterMut","","An insertion-order iterator over a `LinkedHashMap`'s entries, with mutable references to the values.",null,null],[3,"IntoIter","","A consuming insertion-order iterator over a `LinkedHashMap`'s entries.",null,null],[3,"Entries","","An insertion-order iterator over a `LinkedHashMap`'s entries represented as an `OccupiedEntry`.",null,null],[3,"Keys","","An insertion-order iterator over a `LinkedHashMap`'s keys.",null,null],[3,"Values","","An insertion-order iterator over a `LinkedHashMap`'s values.",null,null],[3,"OccupiedEntry","","A view into a single occupied location in a `LinkedHashMap`.",null,null],[3,"VacantEntry","","A view into a single empty location in a `LinkedHashMap`.",null,null],[4,"Entry","","A view into a single location in a map, which may be vacant or occupied.",null,null],[13,"Occupied","","An occupied Entry.",0,null],[13,"Vacant","","A vacant Entry.",0,null],[11,"new","","Creates a linked hash map.",1,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Creates an empty linked hash map with the given initial capacity.",1,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"with_hasher","","Creates an empty linked hash map with the given initial hash builder.",1,{"inputs":[{"name":"s"}],"output":{"name":"self"}}],[11,"with_capacity_and_hasher","","Creates an empty linked hash map with the given initial capacity and hash builder.",1,{"inputs":[{"name":"usize"},{"name":"s"}],"output":{"name":"self"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted into the map. The map may reserve more space to avoid frequent allocations.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shrink_to_fit","","Shrinks the capacity of the map as much as possible. It will drop down as much as possible while maintaining the internal rules and possibly leaving some space in accordance with the resize policy.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",1,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"entry"}}],[11,"entries","","Returns an iterator visiting all entries in insertion order. Iterator element type is `OccupiedEntry<K, V, S>`. Allows for removal as well as replacing the entry.",1,{"inputs":[{"name":"self"}],"output":{"name":"entries"}}],[11,"insert","","Inserts a key-value pair into the map. If the key already existed, the old value is returned.",1,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"option"}}],[11,"contains_key","","Checks if the map contains the given key.",1,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get","","Returns the value corresponding to the key in the map.",1,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"get_mut","","Returns the mutable reference corresponding to the key in the map.",1,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"get_refresh","","Returns the value corresponding to the key in the map.",1,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"remove","","Removes and returns the value corresponding to the key from the map.",1,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"capacity","","Returns the maximum number of key-value pairs the map can hold without reallocating.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"pop_front","","Removes the first entry.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"front","","Gets the first entry.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"pop_back","","Removes the last entry.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"back","","Gets the last entry.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","Returns the number of key-value pairs in the map.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns whether the map is currently empty.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"hasher","","Returns a reference to the map's hasher.",1,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"clear","","Clears the map of all key-value pairs.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"iter","","Returns a double-ended iterator visiting all key-value pairs in order of insertion. Iterator element type is `(&'a K, &'a V)`",1,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a double-ended iterator visiting all key-value pairs in order of insertion. Iterator element type is `(&'a K, &'a mut V)` # Examples ``` use linked_hash_map::LinkedHashMap;",1,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"keys","","Returns a double-ended iterator visiting all key in order of insertion.",1,{"inputs":[{"name":"self"}],"output":{"name":"keys"}}],[11,"values","","Returns a double-ended iterator visiting all values in order of insertion.",1,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"index","","",1,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"v"}}],[11,"index_mut","","",1,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"v"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"self"}}],[11,"extend","","",1,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"extend","","",1,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"from_iter","","",1,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"fmt","","Returns a string that lists the key-value pairs in insertion order.",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"hash","","",1,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"drop","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",2,null],[11,"next","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",4,null],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",3,null],[11,"next","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",5,null],[11,"next_back","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","","",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","","",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"drop","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"next","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",6,null],[11,"next_back","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"next","","",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",7,null],[11,"next_back","","",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",7,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"into_iter","","",1,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"key","","Returns the entry key",0,{"inputs":[{"name":"self"}],"output":{"name":"k"}}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns a mutable reference to the value in the entry.",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty, and returns a mutable reference to the value in the entry.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"v"}}],[11,"key","","Gets a reference to the entry key",8,{"inputs":[{"name":"self"}],"output":{"name":"k"}}],[11,"get","","Gets a reference to the value in the entry.",8,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",8,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"into_mut","","Converts the OccupiedEntry into a mutable reference to the value in the entry with a lifetime bound to the map itself",8,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry, and returns the entry's old value",8,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"remove","","Takes the value out of the entry, and returns it",8,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"key","","Gets a reference to the entry key",9,{"inputs":[{"name":"self"}],"output":{"name":"k"}}],[11,"insert","","Sets the value of the entry with the VacantEntry's key, and returns a mutable reference to it",9,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}]],"paths":[[4,"Entry"],[3,"LinkedHashMap"],[3,"Iter"],[3,"IntoIter"],[3,"IterMut"],[3,"Entries"],[3,"Keys"],[3,"Values"],[3,"OccupiedEntry"],[3,"VacantEntry"]]};
searchIndex["log"] = {"doc":"A lightweight logging facade.","items":[[3,"LogRecord","log","The \"payload\" of a log message.",null,null],[3,"LogMetadata","","Metadata about a log message.",null,null],[3,"LogLocation","","The location of a log message.",null,null],[3,"MaxLogLevelFilter","","A token providing read and write access to the global maximum log level filter.",null,null],[3,"SetLoggerError","","The type returned by `set_logger` if `set_logger` has already been called.",null,null],[3,"ShutdownLoggerError","","The type returned by `shutdown_logger_raw` if `shutdown_logger_raw` has already been called or if `set_logger_raw` has not been called yet.",null,null],[4,"LogLevel","","An enum representing the available verbosity levels of the logging framework",null,null],[13,"Error","","The \"error\" level.",0,null],[13,"Warn","","The \"warn\" level.",0,null],[13,"Info","","The \"info\" level.",0,null],[13,"Debug","","The \"debug\" level.",0,null],[13,"Trace","","The \"trace\" level.",0,null],[4,"LogLevelFilter","","An enum representing the available verbosity level filters of the logging framework.",null,null],[13,"Off","","A level lower than all log levels.",1,null],[13,"Error","","Corresponds to the `Error` log level.",1,null],[13,"Warn","","Corresponds to the `Warn` log level.",1,null],[13,"Info","","Corresponds to the `Info` log level.",1,null],[13,"Debug","","Corresponds to the `Debug` log level.",1,null],[13,"Trace","","Corresponds to the `Trace` log level.",1,null],[5,"max_log_level","","Returns the current maximum log level.",null,{"inputs":[],"output":{"name":"loglevelfilter"}}],[5,"set_logger","","Sets the global logger.",null,{"inputs":[{"name":"m"}],"output":{"name":"result"}}],[5,"set_logger_raw","","Sets the global logger from a raw pointer.",null,{"inputs":[{"name":"m"}],"output":{"name":"result"}}],[5,"shutdown_logger","","Shuts down the global logger.",null,{"inputs":[],"output":{"name":"result"}}],[5,"shutdown_logger_raw","","Shuts down the global logger.",null,{"inputs":[],"output":{"name":"result"}}],[8,"Log","","A trait encapsulating the operations required of a logger",null,null],[10,"enabled","","Determines if a log message with the specified metadata would be logged.",2,{"inputs":[{"name":"self"},{"name":"logmetadata"}],"output":{"name":"bool"}}],[10,"log","","Logs the `LogRecord`.",2,{"inputs":[{"name":"self"},{"name":"logrecord"}],"output":null}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"loglevel"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"name":"option"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":{"name":"option"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"name":"ordering"}}],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"max","","Returns the most verbose logging level.",0,{"inputs":[],"output":{"name":"loglevel"}}],[11,"to_log_level_filter","","Converts the `LogLevel` to the equivalent `LogLevelFilter`.",0,{"inputs":[{"name":"self"}],"output":{"name":"loglevelfilter"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"loglevelfilter"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":{"name":"option"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":{"name":"ordering"}}],[11,"from_str","","",1,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"max","","Returns the most verbose logging level filter.",1,{"inputs":[],"output":{"name":"loglevelfilter"}}],[11,"to_log_level","","Converts `self` to the equivalent `LogLevel`.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"args","","The message body.",3,{"inputs":[{"name":"self"}],"output":{"name":"arguments"}}],[11,"metadata","","Metadata about the log directive.",3,{"inputs":[{"name":"self"}],"output":{"name":"logmetadata"}}],[11,"location","","The location of the log directive.",3,{"inputs":[{"name":"self"}],"output":{"name":"loglocation"}}],[11,"level","","The verbosity level of the message.",3,{"inputs":[{"name":"self"}],"output":{"name":"loglevel"}}],[11,"target","","The name of the target of the directive.",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"level","","The verbosity level of the message.",4,{"inputs":[{"name":"self"}],"output":{"name":"loglevel"}}],[11,"target","","The name of the target of the directive.",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"loglocation"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"module_path","","The module path of the message.",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"file","","The source file containing the message.",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"line","","The line containing the message.",5,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get","","Gets the current maximum log level filter.",6,{"inputs":[{"name":"self"}],"output":{"name":"loglevelfilter"}}],[11,"set","","Sets the maximum log level.",6,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":null}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",7,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",8,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[14,"log","","The standard logging macro.",null,null],[14,"error","","Logs a message at the error level.",null,null],[14,"warn","","Logs a message at the warn level.",null,null],[14,"info","","Logs a message at the info level.",null,null],[14,"debug","","Logs a message at the debug level.",null,null],[14,"trace","","Logs a message at the trace level.",null,null],[14,"log_enabled","","Determines if a message logged at the specified level in that module will be logged.",null,null]],"paths":[[4,"LogLevel"],[4,"LogLevelFilter"],[8,"Log"],[3,"LogRecord"],[3,"LogMetadata"],[3,"LogLocation"],[3,"MaxLogLevelFilter"],[3,"SetLoggerError"],[3,"ShutdownLoggerError"]]};
searchIndex["lru_cache"] = {"doc":"A cache that holds a limited number of key-value pairs. When the capacity of the cache is exceeded, the least-recently-used (where \"used\" means a look-up or putting the pair into the cache) pair is automatically removed.","items":[[3,"LruCache","lru_cache","An LRU cache.",null,null],[3,"IntoIter","","An iterator over a cache's key-value pairs in least- to most-recently-used order.",null,null],[3,"Iter","","An iterator over a cache's key-value pairs in least- to most-recently-used order.",null,null],[3,"IterMut","","An iterator over a cache's key-value pairs in least- to most-recently-used order with mutable references to the values.",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"lrucache"}}],[11,"new","","Creates an empty cache that can hold at most `capacity` items.",0,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"with_hasher","","Creates an empty cache that can hold at most `capacity` items with the given hash builder.",0,{"inputs":[{"name":"usize"},{"name":"s"}],"output":{"name":"self"}}],[11,"contains_key","","Checks if the map contains the given key.",0,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"bool"}}],[11,"insert","","Inserts a key-value pair into the cache. If the key already existed, the old value is returned.",0,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"option"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the given key in the cache, if any.",0,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"remove","","Removes the given key from the cache and returns its corresponding value.",0,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"capacity","","Returns the maximum number of key-value pairs the cache can hold.",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_capacity","","Sets the number of key-value pairs the cache can hold. Removes least-recently-used key-value pairs if necessary.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"remove_lru","","Removes and returns the least recently used key-value pair as a tuple.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","Returns the number of key-value pairs in the cache.",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the cache contains no key-value pairs.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear","","Removes all key-value pairs from the cache.",0,{"inputs":[{"name":"self"}],"output":null}],[11,"iter","","Returns an iterator over the cache's key-value pairs in least- to most-recently-used order.",0,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns an iterator over the cache's key-value pairs in least- to most-recently-used order, with mutable references to the values.",0,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"extend","","",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_iter","","",0,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",1,null],[11,"next_back","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",2,null],[11,"next_back","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",3,null],[11,"next_back","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}]],"paths":[[3,"LruCache"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"]]};
searchIndex["memchr"] = {"doc":"This crate defines two functions, `memchr` and `memrchr`, which expose a safe interface to the corresponding functions in `libc`.","items":[[3,"Memchr","memchr","An iterator for memchr",null,null],[3,"Memchr2","","An iterator for Memchr2",null,null],[3,"Memchr3","","An iterator for Memchr3",null,null],[5,"memchr","","A safe interface to `memchr`.",null,null],[5,"memrchr","","A safe interface to `memrchr`.",null,null],[5,"memchr2","","Like `memchr`, but searches for two bytes instead of one.",null,null],[5,"memchr3","","Like `memchr`, but searches for three bytes instead of one.",null,null],[11,"new","","Creates a new iterator that yields all positions of needle in haystack.",0,null],[11,"next","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","Creates a new iterator that yields all positions of needle in haystack.",1,null],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","Create a new Memchr2 that's initalized to zero with a haystack",2,null],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[3,"Memchr"],[3,"Memchr2"],[3,"Memchr3"]]};
searchIndex["num"] = {"doc":"A collection of numeric types and traits for Rust.","items":[[8,"Integer","num","",null,null],[10,"div_floor","","Floored integer division.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"mod_floor","","Floored integer modulo, satisfying:",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"gcd","","Greatest Common Divisor (GCD).",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"lcm","","Lowest Common Multiple (LCM).",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"divides","","Deprecated, use `is_multiple_of` instead.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_multiple_of","","Returns `true` if `other` is a multiple of `self`.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_even","","Returns `true` if the number is even.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_odd","","Returns `true` if the number is odd.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"div_rem","","Simultaneous truncated integer division and modulus. Returns `(quotient, remainder)`.",0,null],[11,"div_mod_floor","","Simultaneous floored integer division and modulus. Returns `(quotient, remainder)`.",0,null],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting at start (inclusive), and ending at stop (exclusive)).",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"range"}}],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"rangeinclusive"}}],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestep"}}],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestepinclusive"}}],[8,"Num","","The base trait for numeric types",null,null],[16,"FromStrRadixErr","","",1,null],[10,"from_str_radix","","Convert from a string and radix <= 36.",1,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",3,{"inputs":[],"output":{"name":"self"}}],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns the sign of the number.",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[8,"Bounded","","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",5,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",5,{"inputs":[],"output":{"name":"self"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"zero","","Returns the additive identity, `0`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"abs","","Computes the absolute value.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[8,"Saturating","","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at the numeric bounds instead of overflowing.",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating at the numeric bounds instead of overflowing.",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"CheckedAdd","","Performs addition that returns `None` instead of wrapping around on overflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is returned.",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens, `None` is returned.",8,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or overflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow or overflow happens, `None` is returned.",9,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by zero. If any of that happens, `None` is returned.",10,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"PrimInt","","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",11,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping the truncated bits to the end of the resulting integer.",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying the \"sign bit\" in the most significant bits even for unsigned types.",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling zeros in the most significant bits.",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"swap_bytes","","Reverses the byte order of the integer.",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_be","","Convert an integer from big endian to the target's endianness.",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target's endianness.",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target's endianness.",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_le","","Convert `self` to little endian from the target's endianness.",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",11,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[8,"Float","","",null,null],[10,"nan","","Returns the `NaN` value.",12,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",12,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",12,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",12,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",12,{"inputs":[],"output":{"name":"self"}}],[11,"epsilon","","Returns epsilon, a small positive value.",12,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",12,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and false otherwise.",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_normal","","Returns `true` if the number is neither zero, infinite, [subnormal][subnormal], or `NaN`.",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",12,{"inputs":[{"name":"self"}],"output":{"name":"fpcategory"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"trunc","","Return the integer part of a number.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"fract","","Returns the fractional part of a number.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and `Float::infinity()`.",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and `Float::neg_infinity()`.",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error. This produces a more accurate result with better performance than a separate multiplication operation followed by an add.",12,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"powi","","Raise a number to an integer power.",12,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"self"}}],[10,"powf","","Raise a number to a floating point power.",12,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sqrt","","Take the square root of a number.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp2","","Returns `2^(self)`.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",12,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_degrees","","Converts radians to degrees.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_radians","","Converts degrees to radians.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"max","","Returns the maximum of the two numbers.",12,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"min","","Returns the minimum of the two numbers.",12,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",12,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"cbrt","","Take the cubic root of a number.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",12,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",12,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",12,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"sinh","","Hyperbolic sine function.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cosh","","Hyperbolic cosine function.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tanh","","Hyperbolic tangent function.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`. The floating point encoding is documented in the [Reference][floating-point].",12,null],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",15,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[0,"cast","","",null,null],[8,"ToPrimitive","num::cast","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[5,"cast","","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",15,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[0,"pow","num","",null,null],[5,"pow","num::pow","Raises a value to the power of exp, using exponentiation by squaring.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"t"}}],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}],[5,"checked_pow","num","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}],[5,"clamp","","A value bounded by a minimum and a maximum",null,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[0,"integer","","",null,null],[0,"iter","","",null,null],[0,"traits","","",null,null]],"paths":[[8,"Integer"],[8,"Num"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Bounded"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"PrimInt"],[8,"Float"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"]]};
searchIndex["num_integer"] = {"doc":"Integer trait and functions.","items":[[3,"IterBinomial","num_integer","An iterator over binomial coefficients.",null,null],[5,"div_rem","","Simultaneous integer division and modulus",null,null],[5,"div_floor","","Floored integer division",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"mod_floor","","Floored integer modulus",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"div_mod_floor","","Simultaneous floored integer division and modulus",null,null],[5,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`. The result is always positive.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"binomial","","Calculate the binomial coefficient.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"multinomial","","Calculate the multinomial coefficient.",null,null],[8,"Integer","","",null,null],[10,"div_floor","","Floored integer division.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"mod_floor","","Floored integer modulo, satisfying:",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"gcd","","Greatest Common Divisor (GCD).",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"lcm","","Lowest Common Multiple (LCM).",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"divides","","Deprecated, use `is_multiple_of` instead.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_multiple_of","","Returns `true` if `other` is a multiple of `self`.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_even","","Returns `true` if the number is even.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_odd","","Returns `true` if the number is odd.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"div_rem","","Simultaneous truncated integer division and modulus. Returns `(quotient, remainder)`.",0,null],[11,"div_mod_floor","","Simultaneous floored integer division and modulus. Returns `(quotient, remainder)`.",0,null],[11,"new","","For a given n, iterate over all binomial coefficients binomial(n, k), for k=0...n.",1,{"inputs":[{"name":"t"}],"output":{"name":"iterbinomial"}}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[8,"Integer"],[3,"IterBinomial"]]};
searchIndex["num_iter"] = {"doc":"External iterators for generic mathematics","items":[[3,"Range","num_iter","An iterator over the range [start, stop)",null,null],[3,"RangeInclusive","","An iterator over the range [start, stop]",null,null],[3,"RangeStep","","An iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,null],[3,"RangeStepInclusive","","An iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,null],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting at start (inclusive), and ending at stop (exclusive)).",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"range"}}],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"rangeinclusive"}}],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestep"}}],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestepinclusive"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"next","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",0,null],[11,"next_back","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"rangeinclusive"}}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",1,null],[11,"next_back","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"rangestep"}}],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"rangestepinclusive"}}],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"]]};
searchIndex["num_traits"] = {"doc":"Numeric traits for generic mathematics","items":[[3,"ParseFloatError","num_traits","",null,null],[12,"kind","","",0,null],[4,"FloatErrorKind","","",null,null],[13,"Empty","","",1,null],[13,"Invalid","","",1,null],[5,"clamp","","A value bounded by a minimum and a maximum",null,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[0,"identities","","",null,null],[5,"zero","num_traits::identities","Returns the additive identity, `0`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"inputs":[],"output":{"name":"t"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",3,{"inputs":[],"output":{"name":"self"}}],[0,"sign","num_traits","",null,null],[5,"abs","num_traits::sign","Computes the absolute value.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns the sign of the number.",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[0,"ops","num_traits","",null,null],[0,"saturating","num_traits::ops","",null,null],[8,"Saturating","num_traits::ops::saturating","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at the numeric bounds instead of overflowing.",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating at the numeric bounds instead of overflowing.",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[0,"checked","num_traits::ops","",null,null],[8,"CheckedAdd","num_traits::ops::checked","Performs addition that returns `None` instead of wrapping around on overflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is returned.",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens, `None` is returned.",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or overflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow or overflow happens, `None` is returned.",8,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by zero. If any of that happens, `None` is returned.",9,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[0,"wrapping","num_traits::ops","",null,null],[8,"WrappingAdd","num_traits::ops::wrapping","Performs addition that wraps around on overflow.",null,null],[10,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of the type.",10,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"WrappingSub","","Performs subtraction that wraps around on overflow.",null,null],[10,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary of the type.",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"WrappingMul","","Performs multiplication that wraps around on overflow.",null,null],[10,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary of the type.",12,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[0,"bounds","num_traits","",null,null],[8,"Bounded","num_traits::bounds","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",13,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",13,{"inputs":[],"output":{"name":"self"}}],[0,"float","num_traits","",null,null],[8,"Float","num_traits::float","",null,null],[10,"nan","","Returns the `NaN` value.",14,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",14,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",14,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",14,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",14,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",14,{"inputs":[],"output":{"name":"self"}}],[11,"epsilon","","Returns epsilon, a small positive value.",14,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",14,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and false otherwise.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_normal","","Returns `true` if the number is neither zero, infinite, [subnormal][subnormal], or `NaN`.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",14,{"inputs":[{"name":"self"}],"output":{"name":"fpcategory"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"trunc","","Return the integer part of a number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"fract","","Returns the fractional part of a number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and `Float::infinity()`.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and `Float::neg_infinity()`.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error. This produces a more accurate result with better performance than a separate multiplication operation followed by an add.",14,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"powi","","Raise a number to an integer power.",14,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"self"}}],[10,"powf","","Raise a number to a floating point power.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sqrt","","Take the square root of a number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp2","","Returns `2^(self)`.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_degrees","","Converts radians to degrees.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_radians","","Converts degrees to radians.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"max","","Returns the maximum of the two numbers.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"min","","Returns the minimum of the two numbers.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"cbrt","","Take the cubic root of a number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",14,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"sinh","","Hyperbolic sine function.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cosh","","Hyperbolic cosine function.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tanh","","Hyperbolic tangent function.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`. The floating point encoding is documented in the [Reference][floating-point].",14,null],[8,"FloatConst","","",null,null],[10,"E","","Return Euler’s number.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_1_PI","","Return `1.0 / π`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_1_SQRT_2","","Return `1.0 / sqrt(2.0)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_2_PI","","Return `2.0 / π`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_2_SQRT_PI","","Return `2.0 / sqrt(π)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_2","","Return `π / 2.0`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_3","","Return `π / 3.0`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_4","","Return `π / 4.0`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_6","","Return `π / 6.0`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_8","","Return `π / 8.0`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"LN_10","","Return `ln(10.0)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"LN_2","","Return `ln(2.0)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"LOG10_E","","Return `log10(e)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"LOG2_E","","Return `log2(e)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"PI","","Return Archimedes’ constant.",15,{"inputs":[],"output":{"name":"self"}}],[10,"SQRT_2","","Return `sqrt(2.0)`.",15,{"inputs":[],"output":{"name":"self"}}],[0,"cast","num_traits","",null,null],[5,"cast","num_traits::cast","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",18,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[0,"int","num_traits","",null,null],[8,"PrimInt","num_traits::int","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping the truncated bits to the end of the resulting integer.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying the \"sign bit\" in the most significant bits even for unsigned types.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling zeros in the most significant bits.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"swap_bytes","","Reverses the byte order of the integer.",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_be","","Convert an integer from big endian to the target's endianness.",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target's endianness.",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target's endianness.",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_le","","Convert `self` to little endian from the target's endianness.",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[0,"pow","num_traits","",null,null],[5,"pow","num_traits::pow","Raises a value to the power of exp, using exponentiation by squaring.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"t"}}],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}],[8,"Num","num_traits","The base trait for numeric types",null,null],[16,"FromStrRadixErr","","",20,null],[10,"from_str_radix","","Convert from a string and radix <= 36.",20,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"ParseFloatError"],[4,"FloatErrorKind"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"WrappingAdd"],[8,"WrappingSub"],[8,"WrappingMul"],[8,"Bounded"],[8,"Float"],[8,"FloatConst"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"PrimInt"],[8,"Num"]]};
searchIndex["quote"] = {"doc":"Quasi-quoting without a Syntex dependency, intended for use with Macros 1.1.","items":[[3,"Tokens","quote","Tokens produced by a `quote!(...)` invocation.",null,null],[3,"ByteStr","","Wrap a `&str` so it interpolates as a byte-string: `b\"abc\"`.",null,null],[12,"0","","",0,null],[3,"Hex","","Wrap an integer so it interpolates as a hexadecimal.",null,null],[12,"0","","",1,null],[3,"Ident","","An identifier that should be interpolated without quotes.",null,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"tokens"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":{"name":"bool"}}],[11,"new","","Empty tokens.",2,{"inputs":[],"output":{"name":"self"}}],[11,"append","","For use by `ToTokens` implementations.",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"append_all","","For use by `ToTokens` implementations.",2,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"append_separated","","For use by `ToTokens` implementations.",2,{"inputs":[{"name":"self"},{"name":"i"},{"name":"s"}],"output":null}],[11,"append_terminated","","For use by `ToTokens` implementations.",2,{"inputs":[{"name":"self"},{"name":"i"},{"name":"s"}],"output":null}],[11,"as_str","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"into_string","","",2,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"parse","","",2,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_tokens","","",0,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",2,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"ident"}}],[11,"hash","","",3,null],[11,"new","","",3,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"cow"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"as_ref","","",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"to_tokens","","",3,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[8,"ToTokens","","Types that can be interpolated inside a `quote!(...)` invocation.",null,null],[10,"to_tokens","","Write `self` to the given `Tokens`.",4,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[14,"quote","","The whole point.",null,null]],"paths":[[3,"ByteStr"],[3,"Hex"],[3,"Tokens"],[3,"Ident"],[8,"ToTokens"]]};
searchIndex["rusqlite"] = {"doc":"Rusqlite is an ergonomic wrapper for using SQLite from Rust. It attempts to expose an interface similar to rust-postgres.","items":[[4,"ErrorCode","rusqlite","Error Codes",null,null],[13,"InternalMalfunction","","Internal logic error in SQLite",0,null],[13,"PermissionDenied","","Access permission denied",0,null],[13,"OperationAborted","","Callback routine requested an abort",0,null],[13,"DatabaseBusy","","The database file is locked",0,null],[13,"DatabaseLocked","","A table in the database is locked",0,null],[13,"OutOfMemory","","A malloc() failed",0,null],[13,"ReadOnly","","Attempt to write a readonly database",0,null],[13,"OperationInterrupted","","Operation terminated by sqlite3_interrupt()",0,null],[13,"SystemIOFailure","","Some kind of disk I/O error occurred",0,null],[13,"DatabaseCorrupt","","The database disk image is malformed",0,null],[13,"NotFound","","Unknown opcode in sqlite3_file_control()",0,null],[13,"DiskFull","","Insertion failed because database is full",0,null],[13,"CannotOpen","","Unable to open the database file",0,null],[13,"FileLockingProtocolFailed","","Database lock protocol error",0,null],[13,"SchemaChanged","","The database schema changed",0,null],[13,"TooBig","","String or BLOB exceeds size limit",0,null],[13,"ConstraintViolation","","Abort due to constraint violation",0,null],[13,"TypeMismatch","","Data type mismatch",0,null],[13,"APIMisuse","","Library used incorrectly",0,null],[13,"NoLargeFileSupport","","Uses OS features not supported on host",0,null],[13,"AuthorizationForStatementDenied","","Authorization denied",0,null],[13,"ParameterOutOfRange","","2nd parameter to sqlite3_bind out of range",0,null],[13,"NotADatabase","","File opened that is not a database file",0,null],[13,"Unknown","","SQL error or missing database",0,null],[3,"Savepoint","","Represents a savepoint on a database connection.",null,null],[3,"Transaction","","Represents a transaction on a database connection.",null,null],[3,"CachedStatement","","Cacheable statement.",null,null],[3,"Connection","","A connection to a SQLite database.",null,null],[3,"OpenFlags","","Flags for opening SQLite database connections. See sqlite3_open_v2 for details.",null,null],[3,"Statement","","A prepared statement.",null,null],[3,"MappedRows","","An iterator over the mapped resulting rows of a query.",null,null],[3,"AndThenRows","","An iterator over the mapped resulting rows of a query, with an Error type unifying with Error.",null,null],[3,"Rows","","An handle for the resulting rows of a query.",null,null],[3,"Row","","A single result row of a query.",null,null],[4,"DropBehavior","","Options for how a Transaction or Savepoint should behave when it is dropped.",null,null],[13,"Rollback","","Roll back the changes. This is the default.",1,null],[13,"Commit","","Commit the changes.",1,null],[13,"Ignore","","Do not commit or roll back changes - this will leave the transaction or savepoint open, so should be used with care.",1,null],[4,"TransactionBehavior","","Options for transaction behavior. See BEGIN TRANSACTION for details.",null,null],[13,"Deferred","","",2,null],[13,"Immediate","","",2,null],[13,"Exclusive","","",2,null],[4,"Error","","Enum listing possible errors from rusqlite.",null,null],[13,"SqliteFailure","","An error from an underlying SQLite call.",3,null],[13,"SqliteSingleThreadedMode","","Error reported when attempting to open a connection when SQLite was configured to allow single-threaded use only.",3,null],[13,"FromSqlConversionFailure","","Error when the value of a particular column is requested, but it cannot be converted to the requested Rust type.",3,null],[13,"IntegralValueOutOfRange","","Error when SQLite gives us an integral value outside the range of the requested type (e.g., trying to get the value 1000 into a `u8`).  The associated `c_int` is the column index, and the associated `i64` is the value returned by SQLite.",3,null],[13,"Utf8Error","","Error converting a string to UTF-8.",3,null],[13,"NulError","","Error converting a string to a C-compatible string because it contained an embedded nul.",3,null],[13,"InvalidParameterName","","Error when using SQL named parameters and passing a parameter name not present in the SQL.",3,null],[13,"InvalidPath","","Error converting a file path to a string.",3,null],[13,"ExecuteReturnedResults","","Error returned when an `execute` call returns rows.",3,null],[13,"QueryReturnedNoRows","","Error when a query that was expected to return at least one row (e.g., for `query_row`) did not return any.",3,null],[13,"InvalidColumnIndex","","Error when the value of a particular column is requested, but the index is out of range for the statement.",3,null],[13,"InvalidColumnName","","Error when the value of a named column is requested, but no column matches the name for the statement.",3,null],[13,"InvalidColumnType","","Error when the value of a particular column is requested, but the type of the result in that column cannot be converted to the requested Rust type.",3,null],[13,"StatementChangedRows","","Error when a query that was expected to insert one row did not insert any or insert many.",3,null],[4,"DatabaseName","","Name for a database within a SQLite connection.",null,null],[13,"Main","","The main database.",4,null],[13,"Temp","","The temporary database (e.g., any \"CREATE TEMPORARY TABLE\" tables).",4,null],[13,"Attached","","A database that has been attached via \"ATTACH DATABASE ...\".",4,null],[5,"version_number","","Returns the SQLite version as an integer; e.g., `3016002` for version 3.16.2.",null,{"inputs":[],"output":{"name":"i32"}}],[5,"version","","Returns the SQLite version as a string; e.g., `\"3.16.2\"` for version 3.16.2.",null,{"inputs":[],"output":{"name":"str"}}],[5,"bypass_sqlite_initialization","","rusqlite's check for a safe SQLite threading mode requires SQLite 3.7.0 or later. If you are running against a SQLite older than that, rusqlite attempts to ensure safety by performing configuration and initialization of SQLite itself the first time you attempt to open a connection. By default, rusqlite panics if that initialization fails, since that could mean SQLite has been initialized in single-thread mode.",null,{"inputs":[],"output":null}],[5,"bypass_sqlite_version_check","","rusqlite performs a one-time check that the runtime SQLite version is at least as new as the version of SQLite found when rusqlite was built. Bypassing this check may be dangerous; e.g., if you use features of SQLite that are not present in the runtime version. If you are sure the runtime version is compatible with the build-time version for your usage, you can bypass the version check by calling this function before your first connection attempt.",null,{"inputs":[],"output":null}],[0,"types","","Traits dealing with SQLite data types.",null,null],[3,"Null","rusqlite::types","Empty struct that can be used to fill in a query parameter as `NULL`.",null,null],[4,"FromSqlError","","Enum listing possible errors from `FromSql` trait.",null,null],[13,"InvalidType","","Error when an SQLite value is requested, but the type of the result cannot be converted to the requested Rust type.",5,null],[13,"OutOfRange","","Error when the i64 value returned by SQLite cannot be stored into the requested type.",5,null],[13,"Other","","An error case available for implementors of the `FromSql` trait.",5,null],[4,"ToSqlOutput","","`ToSqlOutput` represents the possible output types for implementors of the `ToSql` trait.",null,null],[13,"Borrowed","","A borrowed SQLite-representable value.",6,null],[13,"Owned","","An owned SQLite-representable value.",6,null],[4,"Value","","Owning dynamic type value. Value's type is typically dictated by SQLite (not by the caller).",null,null],[13,"Null","","The value is a `NULL` value.",7,null],[13,"Integer","","The value is a signed integer.",7,null],[13,"Real","","The value is a floating point number.",7,null],[13,"Text","","The value is a text string.",7,null],[13,"Blob","","The value is a blob of data",7,null],[4,"ValueRef","","A non-owning dynamic type value. Typically the memory backing this value is owned by SQLite.",null,null],[13,"Null","","The value is a `NULL` value.",8,null],[13,"Integer","","The value is a signed integer.",8,null],[13,"Real","","The value is a floating point number.",8,null],[13,"Text","","The value is a text string.",8,null],[13,"Blob","","The value is a blob of data",8,null],[4,"Type","","",null,null],[13,"Null","","",9,null],[13,"Integer","","",9,null],[13,"Real","","",9,null],[13,"Text","","",9,null],[13,"Blob","","",9,null],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"from","","",7,{"inputs":[{"name":"null"}],"output":{"name":"value"}}],[11,"from","","",7,{"inputs":[{"name":"bool"}],"output":{"name":"value"}}],[11,"from","","",7,{"inputs":[{"name":"i8"}],"output":{"name":"value"}}],[11,"from","","",7,{"inputs":[{"name":"i16"}],"output":{"name":"value"}}],[11,"from","","",7,{"inputs":[{"name":"i32"}],"output":{"name":"value"}}],[11,"from","","",7,{"inputs":[{"name":"u8"}],"output":{"name":"value"}}],[11,"from","","",7,{"inputs":[{"name":"u16"}],"output":{"name":"value"}}],[11,"from","","",7,{"inputs":[{"name":"u32"}],"output":{"name":"value"}}],[11,"from","","",7,{"inputs":[{"name":"i64"}],"output":{"name":"value"}}],[11,"from","","",7,{"inputs":[{"name":"f64"}],"output":{"name":"value"}}],[11,"from","","",7,{"inputs":[{"name":"string"}],"output":{"name":"value"}}],[11,"from","","",7,{"inputs":[{"name":"vec"}],"output":{"name":"value"}}],[11,"data_type","","",7,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"valueref"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"valueref"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"valueref"}],"output":{"name":"bool"}}],[11,"data_type","","",8,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"as_i64","","If `self` is case `Integer`, returns the integral value. Otherwise, returns `Err(Error::InvalidColumnType)`.",8,{"inputs":[{"name":"self"}],"output":{"name":"fromsqlresult"}}],[11,"as_f64","","If `self` is case `Real`, returns the floating point value. Otherwise, returns `Err(Error::InvalidColumnType)`.",8,{"inputs":[{"name":"self"}],"output":{"name":"fromsqlresult"}}],[11,"as_str","","If `self` is case `Text`, returns the string value. Otherwise, returns `Err(Error::InvalidColumnType)`.",8,{"inputs":[{"name":"self"}],"output":{"name":"fromsqlresult"}}],[11,"as_blob","","If `self` is case `Blob`, returns the byte slice. Otherwise, returns `Err(Error::InvalidColumnType)`.",8,{"inputs":[{"name":"self"}],"output":{"name":"fromsqlresult"}}],[11,"from","","",7,{"inputs":[{"name":"valueref"}],"output":{"name":"value"}}],[11,"from","","",8,{"inputs":[{"name":"str"}],"output":{"name":"valueref"}}],[11,"from","","",8,null],[11,"from","","",8,{"inputs":[{"name":"value"}],"output":{"name":"valueref"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"column_result","","",7,{"inputs":[{"name":"valueref"}],"output":{"name":"fromsqlresult"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"tosqloutput"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"tosqloutput"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"tosqloutput"}],"output":{"name":"bool"}}],[11,"from","","",6,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"to_sql","","",6,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"to_sql","","",10,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"to_sql","","",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[6,"FromSqlResult","","Result type for implementors of the `FromSql` trait.",null,null],[8,"FromSql","","A trait for types that can be created from a SQLite value.",null,null],[10,"column_result","","",11,{"inputs":[{"name":"valueref"}],"output":{"name":"fromsqlresult"}}],[8,"ToSql","","A trait for types that can be converted into SQLite values.",null,null],[10,"to_sql","","",12,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"null"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","rusqlite","",2,{"inputs":[{"name":"self"}],"output":{"name":"transactionbehavior"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"dropbehavior"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"dropbehavior"}],"output":{"name":"bool"}}],[11,"new","","Begin a new transaction. Cannot be nested; see `savepoint` for nested transactions.",13,{"inputs":[{"name":"connection"},{"name":"transactionbehavior"}],"output":{"name":"result"}}],[11,"savepoint","","Starts a new savepoint, allowing nested transactions.",13,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"savepoint_with_name","","Create a new savepoint with a custom savepoint name. See `savepoint()`.",13,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"drop_behavior","","Get the current setting for what happens to the transaction when it is dropped.",13,{"inputs":[{"name":"self"}],"output":{"name":"dropbehavior"}}],[11,"set_drop_behavior","","Configure the transaction to perform the specified action when it is dropped.",13,{"inputs":[{"name":"self"},{"name":"dropbehavior"}],"output":null}],[11,"commit","","A convenience method which consumes and commits a transaction.",13,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"rollback","","A convenience method which consumes and rolls back a transaction.",13,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"finish","","Consumes the transaction, committing or rolling back according to the current setting (see `drop_behavior`).",13,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"deref","","",13,{"inputs":[{"name":"self"}],"output":{"name":"connection"}}],[11,"drop","","",13,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Begin a new savepoint. Can be nested.",14,{"inputs":[{"name":"connection"}],"output":{"name":"result"}}],[11,"with_name","","Begin a new savepoint with a user-provided savepoint name.",14,{"inputs":[{"name":"connection"},{"name":"t"}],"output":{"name":"result"}}],[11,"savepoint","","Begin a nested savepoint.",14,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"savepoint_with_name","","Begin a nested savepoint with a user-provided savepoint name.",14,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"drop_behavior","","Get the current setting for what happens to the savepoint when it is dropped.",14,{"inputs":[{"name":"self"}],"output":{"name":"dropbehavior"}}],[11,"set_drop_behavior","","Configure the savepoint to perform the specified action when it is dropped.",14,{"inputs":[{"name":"self"},{"name":"dropbehavior"}],"output":null}],[11,"commit","","A convenience method which consumes and commits a savepoint.",14,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"rollback","","A convenience method which rolls back a savepoint.",14,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"finish","","Consumes the savepoint, committing or rolling back according to the current setting (see `drop_behavior`).",14,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"deref","","",14,{"inputs":[{"name":"self"}],"output":{"name":"connection"}}],[11,"drop","","",14,{"inputs":[{"name":"self"}],"output":null}],[11,"transaction","","Begin a new transaction with the default behavior (DEFERRED).",15,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"transaction_with_behavior","","Begin a new transaction with a specified behavior.",15,{"inputs":[{"name":"self"},{"name":"transactionbehavior"}],"output":{"name":"result"}}],[11,"savepoint","","Begin a new savepoint with the default behavior (DEFERRED).",15,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"savepoint_with_name","","Begin a new savepoint with a specified name.",15,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"prepare_cached","","Prepare a SQL statement for execution, returning a previously prepared (but not currently in-use) statement if one is available. The returned statement will be cached for reuse by future calls to `prepare_cached` once it is dropped.",15,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"set_prepared_statement_cache_capacity","","Set the maximum number of cached prepared statements this connection will hold. By default, a connection will hold a relatively small number of cached statements. If you need more, or know that you will not use cached statements, you can set the capacity manually using this method.",15,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"flush_prepared_statement_cache","","",15,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",16,{"inputs":[{"name":"self"}],"output":{"name":"statement"}}],[11,"deref_mut","","",16,{"inputs":[{"name":"self"}],"output":{"name":"statement"}}],[11,"drop","","",16,{"inputs":[{"name":"self"}],"output":null}],[11,"discard","","Discard the statement, preventing it from being returned to its `Connection`'s collection of cached statements.",16,{"inputs":[{"name":"self"}],"output":null}],[11,"execute_named","","Convenience method to prepare and execute a single SQL statement with named parameter(s).",15,null],[11,"query_row_named","","Convenience method to execute a query with named parameter(s) that is expected to return a single row.",15,null],[11,"parameter_index","","Return the index of an SQL parameter given its name.",17,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"execute_named","","Execute the prepared statement with named parameter(s). If any parameters that were in the prepared statement are not included in `params`, they will continue to use the most-recently bound value from a previous call to `execute_named`, or `NULL` if they have never been bound.",17,null],[11,"query_named","","Execute the prepared statement with named parameter(s), returning a handle for the resulting rows. If any parameters that were in the prepared statement are not included in `params`, they will continue to use the most-recently bound value from a previous call to `query_named`, or `NULL` if they have never been bound.",17,null],[11,"query_map_named","","Execute the prepared statement with named parameter(s), returning an iterator over the result of calling the mapping function over the query's rows. If any parameters that were in the prepared statement are not included in `params`, they will continue to use the most-recently bound value from a previous call to `query_named`, or `NULL` if they have never been bound.",17,null],[11,"query_and_then_named","","Execute the prepared statement with named parameter(s), returning an iterator over the result of calling the mapping function over the query's rows. If any parameters that were in the prepared statement are not included in `params`, they will continue to use the most-recently bound value from a previous call to `query_named`, or `NULL` if they have never been bound.",17,null],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",3,{"inputs":[{"name":"utf8error"}],"output":{"name":"error"}}],[11,"from","","",3,{"inputs":[{"name":"nulerror"}],"output":{"name":"error"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"insert","","Execute an INSERT and return the ROWID.",17,null],[11,"exists","","Return `true` if a query in the SQL statement it executes returns one or more rows and `false` if the SQL returns an empty set.",17,null],[11,"query_row","","Convenience method to execute a query that is expected to return a single row.",17,null],[6,"SqliteTransaction","","Old name for `Transaction`. `SqliteTransaction` is deprecated.",null,null],[6,"SqliteTransactionBehavior","","Old name for `TransactionBehavior`. `SqliteTransactionBehavior` is deprecated.",null,null],[6,"SqliteError","","Old name for `Error`. `SqliteError` is deprecated.",null,null],[6,"SqliteResult","","Old name for `Result`. `SqliteResult` is deprecated.",null,null],[6,"Result","","A typedef of the result returned by many methods.",null,null],[6,"SqliteConnection","","Old name for `Connection`. `SqliteConnection` is deprecated.",null,null],[6,"SqliteOpenFlags","","Old name for `OpenFlags`. `SqliteOpenFlags` is deprecated.",null,null],[6,"SqliteStatement","","Old name for `Statement`. `SqliteStatement` is deprecated.",null,null],[6,"SqliteRows","","Old name for `Rows`. `SqliteRows` is deprecated.",null,null],[6,"SqliteRow","","Old name for `Row`. `SqliteRow` is deprecated.",null,null],[17,"SQLITE_OPEN_READ_ONLY","","",null,null],[17,"SQLITE_OPEN_READ_WRITE","","",null,null],[17,"SQLITE_OPEN_CREATE","","",null,null],[17,"SQLITE_OPEN_URI","","",null,null],[17,"SQLITE_OPEN_MEMORY","","",null,null],[17,"SQLITE_OPEN_NO_MUTEX","","",null,null],[17,"SQLITE_OPEN_FULL_MUTEX","","",null,null],[17,"SQLITE_OPEN_SHARED_CACHE","","",null,null],[17,"SQLITE_OPEN_PRIVATE_CACHE","","",null,null],[8,"RowIndex","","A trait implemented by types that can index into columns of a row.",null,null],[10,"idx","","Returns the index of the appropriate column, or `None` if no such column exists.",18,{"inputs":[{"name":"self"},{"name":"statement"}],"output":{"name":"result"}}],[11,"open","","Open a new connection to a SQLite database.",15,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"open_in_memory","","Open a new connection to an in-memory SQLite database.",15,{"inputs":[],"output":{"name":"result"}}],[11,"open_with_flags","","Open a new connection to a SQLite database.",15,{"inputs":[{"name":"p"},{"name":"openflags"}],"output":{"name":"result"}}],[11,"open_in_memory_with_flags","","Open a new connection to an in-memory SQLite database.",15,{"inputs":[{"name":"openflags"}],"output":{"name":"result"}}],[11,"execute_batch","","Convenience method to run multiple SQL statements (that cannot take any parameters).",15,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"execute","","Convenience method to prepare and execute a single SQL statement.",15,null],[11,"last_insert_rowid","","Get the SQLite rowid of the most recent successful INSERT.",15,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"query_row","","Convenience method to execute a query that is expected to return a single row.",15,null],[11,"query_row_and_then","","Convenience method to execute a query that is expected to return a single row, and execute a mapping via `f` on that returned row with the possibility of failure. The `Result` type of `f` must implement `std::convert::From<Error>`.",15,null],[11,"query_row_safe","","Convenience method to execute a query that is expected to return a single row.",15,null],[11,"prepare","","Prepare a SQL statement for execution.",15,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"close","","Close the SQLite connection.",15,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"handle","","Get access to the underlying SQLite database connection handle.",15,null],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"openflags"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"self"},{"name":"openflags"}],"output":{"name":"bool"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"openflags"}}],[11,"partial_cmp","","",19,{"inputs":[{"name":"self"},{"name":"openflags"}],"output":{"name":"option"}}],[11,"lt","","",19,{"inputs":[{"name":"self"},{"name":"openflags"}],"output":{"name":"bool"}}],[11,"le","","",19,{"inputs":[{"name":"self"},{"name":"openflags"}],"output":{"name":"bool"}}],[11,"gt","","",19,{"inputs":[{"name":"self"},{"name":"openflags"}],"output":{"name":"bool"}}],[11,"ge","","",19,{"inputs":[{"name":"self"},{"name":"openflags"}],"output":{"name":"bool"}}],[11,"cmp","","",19,{"inputs":[{"name":"self"},{"name":"openflags"}],"output":{"name":"ordering"}}],[11,"hash","","",19,null],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",19,{"inputs":[],"output":{"name":"openflags"}}],[11,"all","","Returns the set containing all flags.",19,{"inputs":[],"output":{"name":"openflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",19,{"inputs":[{"name":"self"}],"output":{"name":"c_int"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",19,{"inputs":[{"name":"c_int"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",19,{"inputs":[{"name":"c_int"}],"output":{"name":"openflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",19,{"inputs":[{"name":"self"},{"name":"openflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",19,{"inputs":[{"name":"self"},{"name":"openflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",19,{"inputs":[{"name":"self"},{"name":"openflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",19,{"inputs":[{"name":"self"},{"name":"openflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",19,{"inputs":[{"name":"self"},{"name":"openflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",19,{"inputs":[{"name":"self"},{"name":"openflags"}],"output":{"name":"openflags"}}],[11,"bitor_assign","","Adds the set of flags.",19,{"inputs":[{"name":"self"},{"name":"openflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",19,{"inputs":[{"name":"self"},{"name":"openflags"}],"output":{"name":"openflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",19,{"inputs":[{"name":"self"},{"name":"openflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",19,{"inputs":[{"name":"self"},{"name":"openflags"}],"output":{"name":"openflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",19,{"inputs":[{"name":"self"},{"name":"openflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",19,{"inputs":[{"name":"self"},{"name":"openflags"}],"output":{"name":"openflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",19,{"inputs":[{"name":"self"},{"name":"openflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",19,{"inputs":[{"name":"self"}],"output":{"name":"openflags"}}],[11,"extend","","",19,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",19,{"inputs":[{"name":"t"}],"output":{"name":"openflags"}}],[11,"default","","",19,{"inputs":[],"output":{"name":"openflags"}}],[11,"column_names","","Get all the column names in the result set of the prepared statement.",17,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"column_count","","Return the number of columns in the result set returned by the prepared statement.",17,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"column_index","","Returns the column index in the result set for a given column name.",17,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"execute","","Execute the prepared statement.",17,null],[11,"query","","Execute the prepared statement, returning a handle to the resulting rows.",17,null],[11,"query_map","","Executes the prepared statement and maps a function over the resulting rows, returning an iterator over the mapped function results.",17,null],[11,"query_and_then","","Executes the prepared statement and maps a function over the resulting rows, where the function returns a `Result` with `Error` type implementing `std::convert::From<Error>` (so errors can be unified).",17,null],[11,"finalize","","Consumes the statement.",17,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"into","","",17,{"inputs":[{"name":"self"}],"output":{"name":"rawstatement"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",17,{"inputs":[{"name":"self"}],"output":null}],[11,"next","","",20,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",21,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","Attempt to get the next row from the query. Returns `Some(Ok(Row))` if there is another row, `Some(Err(...))` if there was an error getting the next row, and `None` if all rows have been retrieved.",22,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop","","",22,{"inputs":[{"name":"self"}],"output":null}],[11,"get","","Get the value of a particular column of the result row.",23,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"t"}}],[11,"get_checked","","Get the value of a particular column of the result row.",23,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"result"}}],[11,"column_count","","Return the number of columns in the current row.",23,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"errorcode"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"errorcode"}],"output":{"name":"bool"}}]],"paths":[[4,"ErrorCode"],[4,"DropBehavior"],[4,"TransactionBehavior"],[4,"Error"],[4,"DatabaseName"],[4,"FromSqlError"],[4,"ToSqlOutput"],[4,"Value"],[4,"ValueRef"],[4,"Type"],[3,"Null"],[8,"FromSql"],[8,"ToSql"],[3,"Transaction"],[3,"Savepoint"],[3,"Connection"],[3,"CachedStatement"],[3,"Statement"],[8,"RowIndex"],[3,"OpenFlags"],[3,"MappedRows"],[3,"AndThenRows"],[3,"Rows"],[3,"Row"]]};
searchIndex["serde"] = {"doc":"Serde","items":[[0,"bytes","serde","Wrapper types to enable optimized handling of `&[u8]` and `Vec<u8>`.",null,null],[3,"ByteBuf","serde::bytes","Wraps a `Vec<u8>` in order to serialize and deserialize in an efficient way.",null,null],[3,"Bytes","","Wraps a `&[u8]` in order to serialize in an efficient way. Does not support deserialization.",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bytebuf"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"bytebuf"}}],[11,"hash","","",0,null],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"bytebuf"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"bytebuf"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"bytebuf"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"bytebuf"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"bytebuf"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"bytebuf"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"bytebuf"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"bytebuf"}],"output":{"name":"ordering"}}],[11,"new","","Construct a new, empty `ByteBuf`.",0,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Construct a new, empty `ByteBuf` with the specified capacity.",0,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from","","Wrap existing bytes in a `ByteBuf`.",0,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into","","",0,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"from","","",0,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"as_ref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"as_ref","","",0,null],[11,"as_mut","","",0,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"as_mut","","",0,null],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"serialize","","",0,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",0,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"bytes"}}],[11,"hash","","",1,null],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"ordering"}}],[11,"new","","Wrap an existing `&[u8]`.",1,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",1,null],[11,"from","","",1,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"into","","",1,null],[11,"deref","","",1,null],[11,"serialize","","",1,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[0,"de","serde","Generic data structure deserialization framework.",null,null],[4,"Unexpected","serde::de","`Unexpected` represents an unexpected invocation of any one of the `Visitor` trait methods.",null,null],[13,"Bool","","The input contained a boolean value that was not expected.",2,null],[13,"Unsigned","","The input contained an unsigned integer `u8`, `u16`, `u32` or `u64` that was not expected.",2,null],[13,"Signed","","The input contained a signed integer `i8`, `i16`, `i32` or `i64` that was not expected.",2,null],[13,"Float","","The input contained a floating point `f32` or `f64` that was not expected.",2,null],[13,"Char","","The input contained a `char` that was not expected.",2,null],[13,"Str","","The input contained a `&str` or `String` that was not expected.",2,null],[13,"Bytes","","The input contained a `&[u8]` or `Vec<u8>` that was not expected.",2,null],[13,"Unit","","The input contained a unit `()` that was not expected.",2,null],[13,"Option","","The input contained an `Option<T>` that was not expected.",2,null],[13,"NewtypeStruct","","The input contained a newtype struct that was not expected.",2,null],[13,"Seq","","The input contained a sequence that was not expected.",2,null],[13,"Map","","The input contained a map that was not expected.",2,null],[13,"Enum","","The input contained an enum that was not expected.",2,null],[13,"UnitVariant","","The input contained a unit variant that was not expected.",2,null],[13,"NewtypeVariant","","The input contained a newtype variant that was not expected.",2,null],[13,"TupleVariant","","The input contained a tuple variant that was not expected.",2,null],[13,"StructVariant","","The input contained a struct variant that was not expected.",2,null],[13,"Other","","A message stating what uncategorized thing the input contained that was not expected.",2,null],[0,"value","","This module supports deserializing from primitives with the `ValueDeserializer` trait.",null,null],[3,"Error","serde::de::value","This represents all the possible errors that can occur using the `ValueDeserializer`.",null,null],[3,"UnitDeserializer","","A helper deserializer that deserializes a `()`.",null,null],[3,"BoolDeserializer","","A helper deserializer that deserializes a number.",null,null],[3,"I8Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"I16Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"I32Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"I64Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"IsizeDeserializer","","A helper deserializer that deserializes a number.",null,null],[3,"U8Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"U16Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"U64Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"UsizeDeserializer","","A helper deserializer that deserializes a number.",null,null],[3,"F32Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"F64Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"CharDeserializer","","A helper deserializer that deserializes a number.",null,null],[3,"U32Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"StrDeserializer","","A helper deserializer that deserializes a `&str`.",null,null],[3,"StringDeserializer","","A helper deserializer that deserializes a `String`.",null,null],[3,"CowStrDeserializer","","A helper deserializer that deserializes a `String`.",null,null],[3,"SeqDeserializer","","A helper deserializer that deserializes a sequence.",null,null],[3,"SeqVisitorDeserializer","","A helper deserializer that deserializes a sequence using a `SeqVisitor`.",null,null],[3,"MapDeserializer","","A helper deserializer that deserializes a map.",null,null],[3,"MapVisitorDeserializer","","A helper deserializer that deserializes a map using a `MapVisitor`.",null,null],[3,"BytesDeserializer","","A helper deserializer that deserializes a `&[u8]`.",null,null],[3,"ByteBufDeserializer","","A helper deserializer that deserializes a `Vec<u8>`.",null,null],[8,"ValueDeserializer","","This trait converts primitive types into a deserializer.",null,null],[16,"Deserializer","","The actual deserializer type.",3,null],[10,"into_deserializer","","Convert this value into a deserializer.",3,null],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"custom","","",4,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"deserialize_bool","","",5,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",5,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",5,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",5,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",5,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",5,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",5,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",5,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",5,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",5,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",5,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",5,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",5,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",5,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",5,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",5,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",5,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",5,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",5,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",5,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",5,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",5,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",5,null],[11,"deserialize_struct_field","","",5,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",5,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",5,null],[11,"deserialize_ignored_any","","",5,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",5,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",5,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",6,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",6,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",6,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",6,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",6,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",6,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",6,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",6,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",6,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",6,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",6,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",6,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",6,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",6,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",6,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",6,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",6,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",6,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",6,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",6,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",6,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",6,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",6,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",6,null],[11,"deserialize_struct_field","","",6,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",6,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",6,null],[11,"deserialize_ignored_any","","",6,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",6,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize","","",6,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",7,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",7,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",7,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",7,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",7,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",7,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",7,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",7,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",7,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",7,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",7,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",7,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",7,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",7,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",7,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",7,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",7,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",7,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",7,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",7,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",7,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",7,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",7,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",7,null],[11,"deserialize_struct_field","","",7,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",7,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",7,null],[11,"deserialize_ignored_any","","",7,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",7,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize","","",7,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",8,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",8,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",8,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",8,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",8,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",8,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",8,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",8,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",8,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",8,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",8,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",8,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",8,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",8,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",8,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",8,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",8,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",8,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",8,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",8,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",8,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",8,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",8,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",8,null],[11,"deserialize_struct_field","","",8,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",8,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",8,null],[11,"deserialize_ignored_any","","",8,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",8,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize","","",8,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",9,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",9,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",9,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",9,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",9,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",9,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",9,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",9,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",9,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",9,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",9,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",9,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",9,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",9,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",9,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",9,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",9,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",9,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",9,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",9,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",9,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",9,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",9,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",9,null],[11,"deserialize_struct_field","","",9,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",9,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",9,null],[11,"deserialize_ignored_any","","",9,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",9,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize","","",9,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",10,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",10,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",10,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",10,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",10,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",10,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",10,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",10,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",10,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",10,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",10,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",10,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",10,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",10,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",10,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",10,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",10,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",10,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",10,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",10,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",10,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",10,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",10,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",10,null],[11,"deserialize_struct_field","","",10,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",10,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",10,null],[11,"deserialize_ignored_any","","",10,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",10,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize","","",10,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",11,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",11,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",11,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",11,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",11,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",11,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",11,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",11,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",11,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",11,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",11,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",11,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",11,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",11,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",11,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",11,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",11,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",11,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",11,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",11,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",11,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",11,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",11,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",11,null],[11,"deserialize_struct_field","","",11,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",11,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",11,null],[11,"deserialize_ignored_any","","",11,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",11,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize","","",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",12,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",12,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",12,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",12,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",12,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",12,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",12,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",12,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",12,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",12,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",12,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",12,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",12,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",12,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",12,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",12,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",12,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",12,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",12,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",12,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",12,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",12,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",12,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",12,null],[11,"deserialize_struct_field","","",12,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",12,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",12,null],[11,"deserialize_ignored_any","","",12,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",12,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize","","",12,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",13,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",13,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",13,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",13,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",13,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",13,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",13,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",13,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",13,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",13,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",13,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",13,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",13,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",13,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",13,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",13,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",13,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",13,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",13,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",13,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",13,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",13,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",13,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",13,null],[11,"deserialize_struct_field","","",13,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",13,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",13,null],[11,"deserialize_ignored_any","","",13,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",13,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",14,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",14,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",14,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",14,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",14,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",14,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",14,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",14,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",14,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",14,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",14,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",14,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",14,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",14,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",14,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",14,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",14,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",14,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",14,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",14,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",14,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",14,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",14,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",14,null],[11,"deserialize_struct_field","","",14,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",14,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",14,null],[11,"deserialize_ignored_any","","",14,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",14,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",15,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",15,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",15,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",15,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",15,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",15,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",15,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",15,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",15,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",15,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",15,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",15,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",15,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",15,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",15,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",15,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",15,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",15,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",15,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",15,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",15,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",15,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",15,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",15,null],[11,"deserialize_struct_field","","",15,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",15,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",15,null],[11,"deserialize_ignored_any","","",15,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",15,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",16,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",16,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",16,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",16,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",16,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",16,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",16,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",16,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",16,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",16,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",16,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",16,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",16,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",16,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",16,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",16,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",16,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",16,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",16,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",16,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",16,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",16,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",16,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",16,null],[11,"deserialize_struct_field","","",16,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",16,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",16,null],[11,"deserialize_ignored_any","","",16,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",16,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",17,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",17,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",17,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",17,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",17,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",17,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",17,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",17,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",17,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",17,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",17,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",17,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",17,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",17,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",17,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",17,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",17,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",17,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",17,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",17,null],[11,"deserialize_struct_field","","",17,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",17,null],[11,"deserialize_ignored_any","","",17,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",17,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",18,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",18,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",18,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",18,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",18,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",18,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",18,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",18,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",18,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",18,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",18,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",18,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",18,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",18,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",18,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",18,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",18,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",18,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",18,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",18,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",18,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",18,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",18,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",18,null],[11,"deserialize_struct_field","","",18,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",18,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",18,null],[11,"deserialize_ignored_any","","",18,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",18,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",19,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",19,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",19,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",19,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",19,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",19,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",19,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",19,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",19,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",19,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",19,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",19,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",19,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",19,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",19,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",19,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",19,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",19,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",19,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",19,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",19,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",19,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",19,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",19,null],[11,"deserialize_struct_field","","",19,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",19,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",19,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",19,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",19,null],[11,"visit_variant_seed","","",19,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"deserialize","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",20,null],[11,"deserialize_bool","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",20,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",20,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",20,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",20,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",20,null],[11,"deserialize_struct_field","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",20,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"visit_variant_seed","","",20,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"deserialize","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",21,null],[11,"deserialize_bool","","",21,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",21,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",21,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",21,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",21,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",21,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",21,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",21,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",21,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",21,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",21,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",21,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",21,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",21,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",21,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",21,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",21,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",21,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",21,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",21,null],[11,"deserialize_struct_field","","",21,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",21,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",21,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"visit_variant_seed","","",21,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"deserialize","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",22,null],[11,"deserialize_bool","","",22,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",22,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",22,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",22,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",22,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",22,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",22,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",22,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",22,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",22,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",22,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",22,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",22,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",22,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",22,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",22,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",22,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",22,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",22,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",22,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",22,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",22,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",22,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",22,null],[11,"deserialize_struct_field","","",22,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",22,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",22,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",22,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"visit_variant_seed","","",22,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"new","","Construct a new `SeqDeserializer<I>`.",23,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"end","","Check for remaining elements after passing a `SeqDeserializer` to `Visitor::visit_seq`.",23,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"deserialize","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",23,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",23,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",23,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",23,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",23,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",23,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",23,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",23,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",23,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",23,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",23,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",23,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",23,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",23,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",23,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",23,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",23,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",23,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",23,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",23,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",23,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",23,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",23,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",23,null],[11,"deserialize_struct_field","","",23,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",23,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",23,null],[11,"deserialize_ignored_any","","",23,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",23,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"visit_seed","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"size_hint","","",23,null],[11,"new","","Construct a new `SeqVisitorDeserializer<V_, E>`.",24,{"inputs":[{"name":"v_"}],"output":{"name":"self"}}],[11,"deserialize","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",24,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",24,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",24,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",24,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",24,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",24,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",24,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",24,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",24,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",24,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",24,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",24,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",24,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",24,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",24,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",24,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",24,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",24,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",24,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",24,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",24,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",24,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",24,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",24,null],[11,"deserialize_struct_field","","",24,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",24,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",24,null],[11,"deserialize_ignored_any","","",24,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",24,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"new","","Construct a new `MapDeserializer<I, K, V, E>`.",25,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"end","","Check for remaining elements after passing a `MapDeserializer` to `Visitor::visit_map`.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"deserialize","","",25,{"inputs":[{"name":"self"},{"name":"v_"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",25,{"inputs":[{"name":"self"},{"name":"v_"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v_"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",25,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",25,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",25,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",25,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",25,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",25,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",25,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",25,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",25,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",25,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",25,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",25,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",25,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",25,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",25,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",25,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",25,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",25,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",25,null],[11,"deserialize_struct_field","","",25,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",25,null],[11,"deserialize_ignored_any","","",25,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",25,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"visit_key_seed","","",25,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"visit_value_seed","","",25,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"visit_seed","","",25,{"inputs":[{"name":"self"},{"name":"tk"},{"name":"tv"}],"output":{"name":"result"}}],[11,"size_hint","","",25,null],[11,"visit_seed","","",25,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"size_hint","","",25,null],[11,"new","","Construct a new `MapVisitorDeserializer<V_, E>`.",26,{"inputs":[{"name":"v_"}],"output":{"name":"self"}}],[11,"deserialize","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",26,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",26,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",26,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",26,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",26,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",26,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",26,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",26,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",26,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",26,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",26,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",26,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",26,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",26,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",26,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",26,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",26,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",26,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",26,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",26,null],[11,"deserialize_struct_field","","",26,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",26,null],[11,"deserialize_ignored_any","","",26,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",26,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"into_deserializer","serde::bytes","",1,{"inputs":[{"name":"self"}],"output":{"name":"bytesdeserializer"}}],[11,"deserialize","serde::de::value","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",27,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",27,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",27,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",27,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",27,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",27,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",27,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",27,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",27,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",27,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",27,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",27,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",27,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",27,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",27,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",27,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",27,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",27,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",27,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",27,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",27,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",27,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",27,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",27,null],[11,"deserialize_struct_field","","",27,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",27,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",27,null],[11,"deserialize_ignored_any","","",27,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",27,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"into_deserializer","serde::bytes","",0,null],[11,"deserialize","serde::de::value","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",28,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",28,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",28,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",28,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",28,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",28,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",28,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",28,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",28,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",28,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",28,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",28,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",28,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",28,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",28,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",28,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",28,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",28,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",28,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",28,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",28,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",28,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",28,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",28,null],[11,"deserialize_struct_field","","",28,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",28,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",28,null],[11,"deserialize_ignored_any","","",28,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",28,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[8,"Error","serde::de","The `Error` trait allows `Deserialize` implementations to create descriptive error messages belonging to the `Deserializer` against which they are currently running.",null,null],[10,"custom","","Raised when there is general error when deserializing a type.",29,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"invalid_type","","Raised when a `Deserialize` receives a type different from what it was expecting.",29,{"inputs":[{"name":"unexpected"},{"name":"expected"}],"output":{"name":"self"}}],[11,"invalid_value","","Raised when a `Deserialize` receives a value of the right type but that is wrong for some other reason.",29,{"inputs":[{"name":"unexpected"},{"name":"expected"}],"output":{"name":"self"}}],[11,"invalid_length","","Raised when deserializing a sequence or map and the input data contains too many or too few elements.",29,{"inputs":[{"name":"usize"},{"name":"expected"}],"output":{"name":"self"}}],[11,"unknown_variant","","Raised when a `Deserialize` enum type received a variant with an unrecognized name.",29,null],[11,"unknown_field","","Raised when a `Deserialize` struct type received a field with an unrecognized name.",29,null],[11,"missing_field","","Raised when a `Deserialize` struct type expected to receive a required field with a particular name but that field was not present in the input.",29,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"duplicate_field","","Raised when a `Deserialize` struct type received more than one of the same field.",29,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[8,"Expected","","`Expected` represents an explanation of what data a `Visitor` was expecting to receive.",null,null],[10,"fmt","","Format an explanation of what data was being expected. Same signature as the `Display` and `Debug` traits.",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Deserialize","","A **data structure** that can be deserialized from any data format supported by Serde.",null,null],[10,"deserialize","","Deserialize this value from the given Serde deserializer.",31,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"DeserializeSeed","","`DeserializeSeed` is the stateful form of the `Deserialize` trait. If you ever find yourself looking for a way to pass data into a `Deserialize` impl, this trait is the way to do it.",null,null],[16,"Value","","The type produced by using this seed.",32,null],[10,"deserialize","","Equivalent to the more common `Deserialize::deserialize` method, except with some initial piece of data (the seed) passed in.",32,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"result"}}],[8,"Deserializer","","A **data format** that can deserialize any data structure supported by Serde.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",33,null],[10,"deserialize","","Require the `Deserializer` to figure out how to drive the visitor based on what data type is in the input.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_bool","","Hint that the `Deserialize` type is expecting a `bool` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u8","","Hint that the `Deserialize` type is expecting a `u8` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u16","","Hint that the `Deserialize` type is expecting a `u16` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u32","","Hint that the `Deserialize` type is expecting a `u32` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u64","","Hint that the `Deserialize` type is expecting a `u64` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i8","","Hint that the `Deserialize` type is expecting an `i8` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i16","","Hint that the `Deserialize` type is expecting an `i16` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i32","","Hint that the `Deserialize` type is expecting an `i32` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i64","","Hint that the `Deserialize` type is expecting an `i64` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_f32","","Hint that the `Deserialize` type is expecting a `f32` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_f64","","Hint that the `Deserialize` type is expecting a `f64` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_char","","Hint that the `Deserialize` type is expecting a `char` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_str","","Hint that the `Deserialize` type is expecting a string value and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_string","","Hint that the `Deserialize` type is expecting a string value and would benefit from taking ownership of buffered data owned by the `Deserializer`.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_bytes","","Hint that the `Deserialize` type is expecting a byte array and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_byte_buf","","Hint that the `Deserialize` type is expecting a byte array and would benefit from taking ownership of buffered data owned by the `Deserializer`.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_option","","Hint that the `Deserialize` type is expecting an optional value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_unit","","Hint that the `Deserialize` type is expecting a unit value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_unit_struct","","Hint that the `Deserialize` type is expecting a unit struct with a particular name.",33,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_newtype_struct","","Hint that the `Deserialize` type is expecting a newtype struct with a particular name.",33,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_seq","","Hint that the `Deserialize` type is expecting a sequence of values.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_seq_fixed_size","","Hint that the `Deserialize` type is expecting a sequence of values and knows how many values there are without looking at the serialized data.",33,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_tuple","","Hint that the `Deserialize` type is expecting a tuple value with a particular number of elements.",33,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_tuple_struct","","Hint that the `Deserialize` type is expecting a tuple struct with a particular name and number of fields.",33,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_map","","Hint that the `Deserialize` type is expecting a map of key-value pairs.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_struct","","Hint that the `Deserialize` type is expecting a struct with a particular name and fields.",33,null],[10,"deserialize_struct_field","","Hint that the `Deserialize` type is expecting the name of a struct field.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_enum","","Hint that the `Deserialize` type is expecting an enum value with a particular name and possible variants.",33,null],[10,"deserialize_ignored_any","","Hint that the `Deserialize` type needs to deserialize a value whose type doesn't matter because it is ignored.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[8,"Visitor","","This trait represents a visitor that walks through a deserializer.",null,null],[16,"Value","","The value produced by this visitor.",34,null],[10,"expecting","","Format a message stating what data this Visitor expects to receive.",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_bool","","Deserialize a `bool` into a `Value`.",34,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"visit_i8","","Deserialize an `i8` into a `Value`.",34,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[11,"visit_i16","","Deserialize an `i16` into a `Value`.",34,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[11,"visit_i32","","Deserialize an `i32` into a `Value`.",34,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"visit_i64","","Deserialize an `i64` into a `Value`.",34,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[11,"visit_u8","","Deserialize a `u8` into a `Value`.",34,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"visit_u16","","Deserialize a `u16` into a `Value`.",34,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[11,"visit_u32","","Deserialize a `u32` into a `Value`.",34,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"visit_u64","","Deserialize a `u64` into a `Value`.",34,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"visit_f32","","Deserialize a `f32` into a `Value`.",34,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[11,"visit_f64","","Deserialize a `f64` into a `Value`.",34,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[11,"visit_char","","Deserialize a `char` into a `Value`.",34,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[11,"visit_str","","Deserialize a `&str` into a `Value`.",34,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"visit_string","","Deserialize a `String` into a `Value`.",34,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"result"}}],[11,"visit_unit","","Deserialize a `()` into a `Value`.",34,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_none","","Deserialize an absent optional `Value`.",34,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_some","","Deserialize a present optional `Value`.",34,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"result"}}],[11,"visit_newtype_struct","","Deserialize `Value` as a newtype struct.",34,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"result"}}],[11,"visit_seq","","Deserialize `Value` as a sequence of elements.",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_map","","Deserialize `Value` as a key-value map.",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_enum","","Deserialize `Value` as an enum.",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_bytes","","Deserialize a `&[u8]` into a `Value`.",34,null],[11,"visit_byte_buf","","Deserialize a `Vec<u8>` into a `Value`.",34,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"result"}}],[8,"SeqVisitor","","`SeqVisitor` visits each item in a sequence.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",35,null],[10,"visit_seed","","This returns `Ok(Some(value))` for the next value in the sequence, or `Ok(None)` if there are no more remaining items.",35,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"visit","","This returns `Ok(Some(value))` for the next value in the sequence, or `Ok(None)` if there are no more remaining items.",35,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"size_hint","","Return the lower and upper bound of items remaining in the sequence.",35,null],[8,"MapVisitor","","`MapVisitor` visits each item in a sequence.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",36,null],[10,"visit_key_seed","","This returns `Ok(Some(key))` for the next key in the map, or `Ok(None)` if there are no more remaining entries.",36,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"result"}}],[10,"visit_value_seed","","This returns a `Ok(value)` for the next value in the map.",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_seed","","This returns `Ok(Some((key, value)))` for the next (key-value) pair in the map, or `Ok(None)` if there are no more remaining items.",36,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_key","","This returns `Ok(Some(key))` for the next key in the map, or `Ok(None)` if there are no more remaining entries.",36,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_value","","This returns a `Ok(value)` for the next value in the map.",36,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit","","This returns `Ok(Some((key, value)))` for the next (key-value) pair in the map, or `Ok(None)` if there are no more remaining items.",36,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"size_hint","","Return the lower and upper bound of items remaining in the sequence.",36,null],[8,"EnumVisitor","","`EnumVisitor` is a visitor that is created by the `Deserializer` and passed to the `Deserialize` in order to identify which variant of an enum to deserialize.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",37,null],[16,"Variant","","The `Visitor` that will be used to deserialize the content of the enum variant.",37,null],[10,"visit_variant_seed","","`visit_variant` is called to identify which variant to deserialize.",37,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_variant","","`visit_variant` is called to identify which variant to deserialize.",37,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"VariantVisitor","","`VariantVisitor` is a visitor that is created by the `Deserializer` and passed to the `Deserialize` to deserialize the content of a particular enum variant.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization. Must match the error type of our `EnumVisitor`.",38,null],[10,"visit_unit","","Called when deserializing a variant with no values.",38,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"visit_newtype_seed","","Called when deserializing a variant with a single value.",38,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"visit_newtype","","Called when deserializing a variant with a single value.",38,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"visit_tuple","","Called when deserializing a tuple-like variant.",38,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[10,"visit_struct","","Called when deserializing a struct-like variant.",38,null],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"unexpected"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"unexpected"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"unexpected"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"ser","serde","Generic data structure serialization framework.",null,null],[3,"Impossible","serde::ser","Helper type for implementing a `Serializer` that does not support serializing one of the compound types.",null,null],[11,"serialize_element","","",39,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",39,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_element","","",39,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",39,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_field","","",39,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",39,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_field","","",39,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",39,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_key","","",39,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"serialize_value","","",39,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",39,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_field","","",39,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",39,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_field","","",39,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",39,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"Error","","Trait used by `Serialize` implementations to generically construct errors belonging to the `Serializer` against which they are currently running.",null,null],[10,"custom","","Raised when a `Serialize` implementation encounters a general error while serializing a type.",40,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[8,"Serialize","","A **data structure** that can be serialized into any data format supported by Serde.",null,null],[10,"serialize","","Serialize this value into the given Serde serializer.",41,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[8,"Serializer","","A **data format** that can serialize any data structure supported by Serde.",null,null],[16,"Ok","","The output type produced by this `Serializer` during successful serialization. Most serializers that produce text or binary output should set `Ok = ()` and serialize into an `io::Write` or buffer contained within the `Serializer` instance. Serializers that build in-memory data structures may be simplified by using `Ok` to propagate the data structure around.",42,null],[16,"Error","","The error type when some error occurs during serialization.",42,null],[16,"SerializeSeq","","Type returned from `serialize_seq` and `serialize_seq_fixed_size` for serializing the content of the sequence.",42,null],[16,"SerializeTuple","","Type returned from `serialize_tuple` for serializing the content of the tuple.",42,null],[16,"SerializeTupleStruct","","Type returned from `serialize_tuple_struct` for serializing the content of the tuple struct.",42,null],[16,"SerializeTupleVariant","","Type returned from `serialize_tuple_variant` for serializing the content of the tuple variant.",42,null],[16,"SerializeMap","","Type returned from `serialize_map` for serializing the content of the map.",42,null],[16,"SerializeStruct","","Type returned from `serialize_struct` for serializing the content of the struct.",42,null],[16,"SerializeStructVariant","","Type returned from `serialize_struct_variant` for serializing the content of the struct variant.",42,null],[10,"serialize_bool","","Serialize a `bool` value.",42,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"serialize_i8","","Serialize an `i8` value.",42,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[10,"serialize_i16","","Serialize an `i16` value.",42,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[10,"serialize_i32","","Serialize an `i32` value.",42,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[10,"serialize_i64","","Serialize an `i64` value.",42,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[10,"serialize_u8","","Serialize a `u8` value.",42,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[10,"serialize_u16","","Serialize a `u16` value.",42,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[10,"serialize_u32","","Serialize a `u32` value.",42,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[10,"serialize_u64","","Serialize a `u64` value.",42,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[10,"serialize_f32","","Serialize an `f32` value.",42,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[10,"serialize_f64","","Serialize an `f64` value.",42,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[10,"serialize_char","","Serialize a character.",42,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[10,"serialize_str","","Serialize a `&str`.",42,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"serialize_bytes","","Serialize a chunk of raw byte data.",42,null],[10,"serialize_none","","Serialize a `None` value.",42,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"serialize_some","","Serialize a `Some(T)` value.",42,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_unit","","Serialize a `()` value.",42,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"serialize_unit_struct","","Serialize a unit struct like `struct Unit` or `PhantomData<T>`.",42,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"serialize_unit_variant","","Serialize a unit variant like `E::A` in `enum E { A, B }`.",42,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"str"}],"output":{"name":"result"}}],[10,"serialize_newtype_struct","","Serialize a newtype struct like `struct Millimeters(u8)`.",42,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_newtype_variant","","Serialize a newtype variant like `E::N` in `enum E { N(u8) }`.",42,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_seq","","Begin to serialize a dynamically sized sequence. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",42,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[10,"serialize_seq_fixed_size","","Begin to serialize a statically sized sequence whose length will be known at deserialization time without looking at the serialized data. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",42,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_tuple","","Begin to serialize a tuple. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",42,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_tuple_struct","","Begin to serialize a tuple struct like `struct Rgb(u8, u8, u8)`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",42,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_tuple_variant","","Begin to serialize a tuple variant like `E::T` in `enum E { T(u8, u8) }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",42,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_map","","Begin to serialize a map. This call must be followed by zero or more calls to `serialize_key` and `serialize_value`, then a call to `end`.",42,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[10,"serialize_struct","","Begin to serialize a struct like `struct Rgb { r: u8, g: u8, b: u8 }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",42,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_struct_variant","","Begin to serialize a struct variant like `E::S` in `enum E { S { r: u8, g: u8, b: u8 } }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",42,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[11,"collect_seq","","Collect an iterator as a sequence.",42,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"result"}}],[11,"collect_map","","Collect an iterator as a map.",42,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"result"}}],[11,"collect_str","","Serialize a string produced by an implementation of `Display`.",42,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[8,"SerializeSeq","","Returned from `Serializer::serialize_seq` and `Serializer::serialize_seq_fixed_size`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",43,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",43,null],[10,"serialize_element","","Serialize a sequence element.",43,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a sequence.",43,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"SerializeTuple","","Returned from `Serializer::serialize_tuple`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",44,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",44,null],[10,"serialize_element","","Serialize a tuple element.",44,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a tuple.",44,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"SerializeTupleStruct","","Returned from `Serializer::serialize_tuple_struct`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",45,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",45,null],[10,"serialize_field","","Serialize a tuple struct field.",45,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a tuple struct.",45,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"SerializeTupleVariant","","Returned from `Serializer::serialize_tuple_variant`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",46,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",46,null],[10,"serialize_field","","Serialize a tuple variant field.",46,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a tuple variant.",46,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"SerializeMap","","Returned from `Serializer::serialize_map`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",47,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",47,null],[10,"serialize_key","","Serialize a map key.",47,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_value","","Serialize a map value.",47,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"serialize_entry","","Serialize a map entry consisting of a key and a value.",47,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a map.",47,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"SerializeStruct","","Returned from `Serializer::serialize_struct`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",48,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",48,null],[10,"serialize_field","","Serialize a struct field.",48,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a struct.",48,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"SerializeStructVariant","","Returned from `Serializer::serialize_struct_variant`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",49,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",49,null],[10,"serialize_field","","Serialize a struct variant field.",49,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a struct variant.",49,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"Serialize","serde","A **data structure** that can be serialized into any data format supported by Serde.",null,null],[10,"serialize","","Serialize this value into the given Serde serializer.",41,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[8,"Serializer","","A **data format** that can serialize any data structure supported by Serde.",null,null],[16,"Ok","","The output type produced by this `Serializer` during successful serialization. Most serializers that produce text or binary output should set `Ok = ()` and serialize into an `io::Write` or buffer contained within the `Serializer` instance. Serializers that build in-memory data structures may be simplified by using `Ok` to propagate the data structure around.",42,null],[16,"Error","","The error type when some error occurs during serialization.",42,null],[16,"SerializeSeq","","Type returned from `serialize_seq` and `serialize_seq_fixed_size` for serializing the content of the sequence.",42,null],[16,"SerializeTuple","","Type returned from `serialize_tuple` for serializing the content of the tuple.",42,null],[16,"SerializeTupleStruct","","Type returned from `serialize_tuple_struct` for serializing the content of the tuple struct.",42,null],[16,"SerializeTupleVariant","","Type returned from `serialize_tuple_variant` for serializing the content of the tuple variant.",42,null],[16,"SerializeMap","","Type returned from `serialize_map` for serializing the content of the map.",42,null],[16,"SerializeStruct","","Type returned from `serialize_struct` for serializing the content of the struct.",42,null],[16,"SerializeStructVariant","","Type returned from `serialize_struct_variant` for serializing the content of the struct variant.",42,null],[10,"serialize_bool","","Serialize a `bool` value.",42,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"serialize_i8","","Serialize an `i8` value.",42,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[10,"serialize_i16","","Serialize an `i16` value.",42,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[10,"serialize_i32","","Serialize an `i32` value.",42,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[10,"serialize_i64","","Serialize an `i64` value.",42,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[10,"serialize_u8","","Serialize a `u8` value.",42,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[10,"serialize_u16","","Serialize a `u16` value.",42,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[10,"serialize_u32","","Serialize a `u32` value.",42,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[10,"serialize_u64","","Serialize a `u64` value.",42,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[10,"serialize_f32","","Serialize an `f32` value.",42,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[10,"serialize_f64","","Serialize an `f64` value.",42,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[10,"serialize_char","","Serialize a character.",42,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[10,"serialize_str","","Serialize a `&str`.",42,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"serialize_bytes","","Serialize a chunk of raw byte data.",42,null],[10,"serialize_none","","Serialize a `None` value.",42,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"serialize_some","","Serialize a `Some(T)` value.",42,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_unit","","Serialize a `()` value.",42,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"serialize_unit_struct","","Serialize a unit struct like `struct Unit` or `PhantomData<T>`.",42,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"serialize_unit_variant","","Serialize a unit variant like `E::A` in `enum E { A, B }`.",42,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"str"}],"output":{"name":"result"}}],[10,"serialize_newtype_struct","","Serialize a newtype struct like `struct Millimeters(u8)`.",42,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_newtype_variant","","Serialize a newtype variant like `E::N` in `enum E { N(u8) }`.",42,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_seq","","Begin to serialize a dynamically sized sequence. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",42,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[10,"serialize_seq_fixed_size","","Begin to serialize a statically sized sequence whose length will be known at deserialization time without looking at the serialized data. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",42,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_tuple","","Begin to serialize a tuple. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",42,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_tuple_struct","","Begin to serialize a tuple struct like `struct Rgb(u8, u8, u8)`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",42,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_tuple_variant","","Begin to serialize a tuple variant like `E::T` in `enum E { T(u8, u8) }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",42,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_map","","Begin to serialize a map. This call must be followed by zero or more calls to `serialize_key` and `serialize_value`, then a call to `end`.",42,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"result"}}],[10,"serialize_struct","","Begin to serialize a struct like `struct Rgb { r: u8, g: u8, b: u8 }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",42,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_struct_variant","","Begin to serialize a struct variant like `E::S` in `enum E { S { r: u8, g: u8, b: u8 } }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",42,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[11,"collect_seq","","Collect an iterator as a sequence.",42,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"result"}}],[11,"collect_map","","Collect an iterator as a map.",42,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"result"}}],[11,"collect_str","","Serialize a string produced by an implementation of `Display`.",42,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[8,"Deserialize","","A **data structure** that can be deserialized from any data format supported by Serde.",null,null],[10,"deserialize","","Deserialize this value from the given Serde deserializer.",31,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"Deserializer","","A **data format** that can deserialize any data structure supported by Serde.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",33,null],[10,"deserialize","","Require the `Deserializer` to figure out how to drive the visitor based on what data type is in the input.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_bool","","Hint that the `Deserialize` type is expecting a `bool` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u8","","Hint that the `Deserialize` type is expecting a `u8` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u16","","Hint that the `Deserialize` type is expecting a `u16` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u32","","Hint that the `Deserialize` type is expecting a `u32` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u64","","Hint that the `Deserialize` type is expecting a `u64` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i8","","Hint that the `Deserialize` type is expecting an `i8` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i16","","Hint that the `Deserialize` type is expecting an `i16` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i32","","Hint that the `Deserialize` type is expecting an `i32` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i64","","Hint that the `Deserialize` type is expecting an `i64` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_f32","","Hint that the `Deserialize` type is expecting a `f32` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_f64","","Hint that the `Deserialize` type is expecting a `f64` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_char","","Hint that the `Deserialize` type is expecting a `char` value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_str","","Hint that the `Deserialize` type is expecting a string value and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_string","","Hint that the `Deserialize` type is expecting a string value and would benefit from taking ownership of buffered data owned by the `Deserializer`.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_bytes","","Hint that the `Deserialize` type is expecting a byte array and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_byte_buf","","Hint that the `Deserialize` type is expecting a byte array and would benefit from taking ownership of buffered data owned by the `Deserializer`.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_option","","Hint that the `Deserialize` type is expecting an optional value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_unit","","Hint that the `Deserialize` type is expecting a unit value.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_unit_struct","","Hint that the `Deserialize` type is expecting a unit struct with a particular name.",33,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_newtype_struct","","Hint that the `Deserialize` type is expecting a newtype struct with a particular name.",33,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_seq","","Hint that the `Deserialize` type is expecting a sequence of values.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_seq_fixed_size","","Hint that the `Deserialize` type is expecting a sequence of values and knows how many values there are without looking at the serialized data.",33,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_tuple","","Hint that the `Deserialize` type is expecting a tuple value with a particular number of elements.",33,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_tuple_struct","","Hint that the `Deserialize` type is expecting a tuple struct with a particular name and number of fields.",33,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_map","","Hint that the `Deserialize` type is expecting a map of key-value pairs.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_struct","","Hint that the `Deserialize` type is expecting a struct with a particular name and fields.",33,null],[10,"deserialize_struct_field","","Hint that the `Deserialize` type is expecting the name of a struct field.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_enum","","Hint that the `Deserialize` type is expecting an enum value with a particular name and possible variants.",33,null],[10,"deserialize_ignored_any","","Hint that the `Deserialize` type needs to deserialize a value whose type doesn't matter because it is ignored.",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[14,"forward_to_deserialize","","Helper macro when implementing the `Deserializer` part of a new data format for Serde.",null,null]],"paths":[[3,"ByteBuf"],[3,"Bytes"],[4,"Unexpected"],[8,"ValueDeserializer"],[3,"Error"],[3,"UnitDeserializer"],[3,"BoolDeserializer"],[3,"I8Deserializer"],[3,"I16Deserializer"],[3,"I32Deserializer"],[3,"I64Deserializer"],[3,"IsizeDeserializer"],[3,"U8Deserializer"],[3,"U16Deserializer"],[3,"U64Deserializer"],[3,"UsizeDeserializer"],[3,"F32Deserializer"],[3,"F64Deserializer"],[3,"CharDeserializer"],[3,"U32Deserializer"],[3,"StrDeserializer"],[3,"StringDeserializer"],[3,"CowStrDeserializer"],[3,"SeqDeserializer"],[3,"SeqVisitorDeserializer"],[3,"MapDeserializer"],[3,"MapVisitorDeserializer"],[3,"BytesDeserializer"],[3,"ByteBufDeserializer"],[8,"Error"],[8,"Expected"],[8,"Deserialize"],[8,"DeserializeSeed"],[8,"Deserializer"],[8,"Visitor"],[8,"SeqVisitor"],[8,"MapVisitor"],[8,"EnumVisitor"],[8,"VariantVisitor"],[3,"Impossible"],[8,"Error"],[8,"Serialize"],[8,"Serializer"],[8,"SerializeSeq"],[8,"SerializeTuple"],[8,"SerializeTupleStruct"],[8,"SerializeTupleVariant"],[8,"SerializeMap"],[8,"SerializeStruct"],[8,"SerializeStructVariant"]]};
searchIndex["serde_codegen_internals"] = {"doc":"","items":[[3,"Ctxt","serde_codegen_internals","",null,null],[0,"ast","","",null,null],[3,"Item","serde_codegen_internals::ast","",null,null],[12,"ident","","",0,null],[12,"attrs","","",0,null],[12,"body","","",0,null],[12,"generics","","",0,null],[3,"Variant","","",null,null],[12,"ident","","",1,null],[12,"attrs","","",1,null],[12,"style","","",1,null],[12,"fields","","",1,null],[3,"Field","","",null,null],[12,"ident","","",2,null],[12,"attrs","","",2,null],[12,"ty","","",2,null],[4,"Body","","",null,null],[13,"Enum","","",3,null],[13,"Struct","","",3,null],[4,"Style","","",null,null],[13,"Struct","","",4,null],[13,"Tuple","","",4,null],[13,"Newtype","","",4,null],[13,"Unit","","",4,null],[11,"from_ast","","",0,{"inputs":[{"name":"ctxt"},{"name":"macroinput"}],"output":{"name":"item"}}],[11,"all_fields","","",3,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[0,"attr","serde_codegen_internals","",null,null],[3,"Name","serde_codegen_internals::attr","",null,null],[3,"Item","","Represents container (e.g. struct) attribute information",null,null],[3,"Variant","","Represents variant attribute information",null,null],[3,"Field","","Represents field attribute information",null,null],[4,"RenameRule","","",null,null],[13,"None","","Don't apply a default rename rule.",5,null],[13,"PascalCase","","Rename direct children to \"PascalCase\" style, as typically used for enum variants.",5,null],[13,"CamelCase","","Rename direct children to \"camelCase\" style.",5,null],[13,"SnakeCase","","Rename direct children to \"snake_case\" style, as commonly used for fields.",5,null],[13,"ScreamingSnakeCase","","Rename direct children to \"SCREAMING_SNAKE_CASE\" style, as commonly used for constants.",5,null],[13,"KebabCase","","Rename direct children to \"kebab-case\" style.",5,null],[4,"EnumTag","","Styles of representing an enum.",null,null],[13,"External","","The default.",6,null],[13,"Internal","","`#[serde(tag = \"type\")]`",6,null],[12,"tag","serde_codegen_internals::attr::EnumTag","",6,null],[13,"Adjacent","serde_codegen_internals::attr","`#[serde(tag = \"t\", content = \"c\")]`",6,null],[12,"tag","serde_codegen_internals::attr::EnumTag","",6,null],[12,"content","","",6,null],[13,"None","serde_codegen_internals::attr","`#[serde(untagged)]`",6,null],[4,"Default","","Represents the default to use for a field when deserializing.",null,null],[13,"None","","Field must always be specified because it does not have a default.",7,null],[13,"Default","","The default is given by `std::default::Default::default()`.",7,null],[13,"Path","","The default is given by this function.",7,null],[5,"get_serde_meta_items","","",null,{"inputs":[{"name":"attribute"}],"output":{"name":"option"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize_name","","Return the container name for the container when serializing.",8,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"deserialize_name","","Return the container name for the container when deserializing.",8,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_ast","","Extract out the `#[serde(...)]` attributes from an item.",9,{"inputs":[{"name":"ctxt"},{"name":"macroinput"}],"output":{"name":"self"}}],[11,"name","","",9,{"inputs":[{"name":"self"}],"output":{"name":"name"}}],[11,"rename_all","","",9,{"inputs":[{"name":"self"}],"output":{"name":"renamerule"}}],[11,"deny_unknown_fields","","",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"default","","",9,{"inputs":[{"name":"self"}],"output":{"name":"default"}}],[11,"ser_bound","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"de_bound","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"tag","","",9,{"inputs":[{"name":"self"}],"output":{"name":"enumtag"}}],[11,"from_type","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_type","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_ast","","",10,{"inputs":[{"name":"ctxt"},{"name":"variant"}],"output":{"name":"self"}}],[11,"name","","",10,{"inputs":[{"name":"self"}],"output":{"name":"name"}}],[11,"rename_by_rule","","",10,{"inputs":[{"name":"self"},{"name":"renamerule"}],"output":null}],[11,"rename_all","","",10,{"inputs":[{"name":"self"}],"output":{"name":"renamerule"}}],[11,"skip_deserializing","","",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"skip_serializing","","",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"default"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"default"}],"output":{"name":"bool"}}],[11,"from_ast","","Extract out the `#[serde(...)]` attributes from a struct field.",11,{"inputs":[{"name":"ctxt"},{"name":"usize"},{"name":"field"}],"output":{"name":"self"}}],[11,"name","","",11,{"inputs":[{"name":"self"}],"output":{"name":"name"}}],[11,"rename_by_rule","","",11,{"inputs":[{"name":"self"},{"name":"renamerule"}],"output":null}],[11,"skip_serializing","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"skip_deserializing","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"skip_serializing_if","","",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"default","","",11,{"inputs":[{"name":"self"}],"output":{"name":"default"}}],[11,"serialize_with","","",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"deserialize_with","","",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"ser_bound","","",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"de_bound","","",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"default","serde_codegen_internals","",12,{"inputs":[],"output":{"name":"ctxt"}}],[11,"new","","",12,{"inputs":[],"output":{"name":"self"}}],[11,"error","","",12,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"check","","",12,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"drop","","",12,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","serde_codegen_internals::attr","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"renamerule"}],"output":{"name":"bool"}}],[11,"apply_to_variant","","",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"string"}}],[11,"apply_to_field","","",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"string"}}],[11,"from_str","","",5,{"inputs":[{"name":"str"}],"output":{"name":"result"}}]],"paths":[[3,"Item"],[3,"Variant"],[3,"Field"],[4,"Body"],[4,"Style"],[4,"RenameRule"],[4,"EnumTag"],[4,"Default"],[3,"Name"],[3,"Item"],[3,"Variant"],[3,"Field"],[3,"Ctxt"]]};
searchIndex["serde_derive"] = {"doc":"","items":[[5,"derive_serialize","serde_derive","",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}],[5,"derive_deserialize","","",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}]],"paths":[]};
searchIndex["serde_json"] = {"doc":"Serde JSON","items":[[3,"Deserializer","serde_json","A structure that deserializes JSON into Rust values.",null,null],[3,"StreamDeserializer","","Iterator that deserializes a stream into multiple JSON values.",null,null],[3,"Error","","This type represents all possible errors that can occur when serializing or deserializing JSON data.",null,null],[3,"Serializer","","A structure for serializing Rust values into JSON.",null,null],[3,"Map","","Represents a JSON key/value type.",null,null],[3,"Number","","Represents a JSON number, whether integer or floating point.",null,null],[4,"Value","","Represents any valid JSON value.",null,null],[13,"Null","","Represents a JSON null value.",0,null],[13,"Bool","","Represents a JSON boolean.",0,null],[13,"Number","","Represents a JSON number, whether integer or floating point.",0,null],[13,"String","","Represents a JSON string.",0,null],[13,"Array","","Represents a JSON array.",0,null],[13,"Object","","Represents a JSON object.",0,null],[5,"from_iter","","Deserialize an instance of type `T` from an iterator over bytes of JSON.",null,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[5,"from_reader","","Deserialize an instance of type `T` from an IO stream of JSON.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"from_slice","","Deserialize an instance of type `T` from bytes of JSON text.",null,null],[5,"from_str","","Deserialize an instance of type `T` from a string of JSON text.",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"to_string","","Serialize the given data structure as a String of JSON.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"to_string_pretty","","Serialize the given data structure as a pretty-printed String of JSON.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"to_vec","","Serialize the given data structure as a JSON byte vector.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"to_vec_pretty","","Serialize the given data structure as a pretty-printed JSON byte vector.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"to_writer","","Serialize the given data structure as JSON into the IO stream.",null,{"inputs":[{"name":"w"},{"name":"t"}],"output":{"name":"result"}}],[5,"to_writer_pretty","","Serialize the given data structure as pretty-printed JSON into the IO stream.",null,{"inputs":[{"name":"w"},{"name":"t"}],"output":{"name":"result"}}],[5,"from_value","","Interpret a `serde_json::Value` as an instance of type `T`.",null,{"inputs":[{"name":"value"}],"output":{"name":"result"}}],[5,"to_value","","Convert a `T` into `serde_json::Value` which is an enum that can represent any valid JSON data.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[0,"de","","Deserialize JSON data to a Rust data structure.",null,null],[3,"IoRead","serde_json::de","JSON input source that reads from a std::io input stream.",null,null],[3,"IteratorRead","","JSON input source that reads from an iterator of bytes.",null,null],[3,"SliceRead","","JSON input source that reads from a slice of bytes.",null,null],[3,"StrRead","","JSON input source that reads from a UTF-8 string.",null,null],[3,"Deserializer","","A structure that deserializes JSON into Rust values.",null,null],[3,"StreamDeserializer","","Iterator that deserializes a stream into multiple JSON values.",null,null],[5,"from_iter","","Deserialize an instance of type `T` from an iterator over bytes of JSON.",null,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[5,"from_reader","","Deserialize an instance of type `T` from an IO stream of JSON.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"from_slice","","Deserialize an instance of type `T` from bytes of JSON text.",null,null],[5,"from_str","","Deserialize an instance of type `T` from a string of JSON text.",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[8,"Read","","Trait used by the deserializer for iterating over input. This is manually \"specialized\" for iterating over &[u8]. Once feature(specialization) is stable we can use actual specialization.",null,null],[11,"new","","Create a JSON deserializer from one of the possible serde_json input sources.",1,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"from_iter","","Creates a JSON deserializer from a `std::iter::Iterator`.",1,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"from_reader","","Creates a JSON deserializer from an `io::Read`.",1,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"from_slice","","Creates a JSON deserializer from a `&[u8]`.",1,null],[11,"from_str","","Creates a JSON deserializer from a `&str`.",1,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"end","","The `Deserializer::end` method should be called after a value has been fully deserialized. This allows the `Deserializer` to validate that the input stream is at the end or that it only has trailing whitespace.",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"into_iter","","Turn a JSON deserializer into an iterator over values of type T.",1,{"inputs":[{"name":"self"}],"output":{"name":"streamdeserializer"}}],[11,"new","","Create a JSON stream deserializer from one of the possible serde_json input sources.",2,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"error","serde_json","When serializing or deserializing JSON goes wrong.",null,null],[3,"Error","serde_json::error","This type represents all possible errors that can occur when serializing or deserializing JSON data.",null,null],[4,"Category","","Categorizes the cause of a `serde_json::Error`.",null,null],[13,"Io","","The error was caused by a failure to read or write bytes on an IO stream.",3,null],[13,"Syntax","","The error was caused by input that was not syntactically valid JSON.",3,null],[13,"Data","","The error was caused by input data that was semantically incorrect.",3,null],[13,"Eof","","The error was caused by prematurely reaching the end of the input data.",3,null],[6,"Result","","Alias for a `Result` with the error type `serde_json::Error`.",null,null],[11,"line","","One-based line number at which the error was detected.",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"column","","One-based column number at which the error was detected.",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"classify","","Categorizes the cause of this error.",4,{"inputs":[{"name":"self"}],"output":{"name":"category"}}],[11,"is_io","","Returns true if this error was caused by a failure to read or write bytes on an IO stream.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_syntax","","Returns true if this error was caused by input that was not syntactically valid JSON.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_data","","Returns true if this error was caused by input data that was semantically incorrect.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_eof","","Returns true if this error was caused by prematurely reaching the end of the input data.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"category"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"category"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",4,{"inputs":[{"name":"errorimpl"}],"output":{"name":"error"}}],[11,"from","","",4,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from","","",4,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"custom","","",4,{"inputs":[{"name":"t"}],"output":{"name":"error"}}],[11,"custom","","",4,{"inputs":[{"name":"t"}],"output":{"name":"error"}}],[0,"map","serde_json","A map of String to serde_json::Value.",null,null],[3,"Map","serde_json::map","Represents a JSON key/value type.",null,null],[3,"VacantEntry","","A vacant Entry. It is part of the [`Entry`] enum.",null,null],[3,"OccupiedEntry","","An occupied Entry. It is part of the [`Entry`] enum.",null,null],[3,"Iter","","An iterator over a serde_json::Map's entries.",null,null],[3,"IterMut","","A mutable iterator over a serde_json::Map's entries.",null,null],[3,"IntoIter","","An owning iterator over a serde_json::Map's entries.",null,null],[3,"Keys","","An iterator over a serde_json::Map's keys.",null,null],[3,"Values","","An iterator over a serde_json::Map's values.",null,null],[4,"Entry","","A view into a single entry in a map, which may either be vacant or occupied. This enum is constructed from the [`entry`] method on [`Map`].",null,null],[13,"Vacant","","A vacant Entry.",5,null],[13,"Occupied","","An occupied Entry.",5,null],[11,"new","","Makes a new empty Map.",6,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Makes a new empty Map with the given initial capacity.",6,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"clear","","Clears the map, removing all values.",6,{"inputs":[{"name":"self"}],"output":null}],[11,"get","","Returns a reference to the value corresponding to the key.",6,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",6,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",6,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair into the map.",6,{"inputs":[{"name":"self"},{"name":"string"},{"name":"value"}],"output":{"name":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key was previously in the map.",6,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",6,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"entry"}}],[11,"len","","Returns the number of elements in the map.",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the map contains no elements.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"iter","","Gets an iterator over the entries of the map.",6,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Gets a mutable iterator over the entries of the map.",6,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"keys","","Gets an iterator over the keys of the map.",6,{"inputs":[{"name":"self"}],"output":{"name":"keys"}}],[11,"values","","Gets an iterator over the values of the map.",6,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"default","","",6,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"index","","",6,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"value"}}],[11,"index_mut","","",6,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"value"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize","","",6,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",6,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"from_iter","","",6,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"extend","","",6,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"key","","Returns a reference to this entry's key.",5,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns a mutable reference to the value in the entry.",5,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"value"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty, and returns a mutable reference to the value in the entry.",5,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"value"}}],[11,"key","","Gets a reference to the key that would be used when inserting a value through the VacantEntry.",7,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"insert","","Sets the value of the entry with the VacantEntry's key, and returns a mutable reference to it.",7,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"value"}}],[11,"key","","Gets a reference to the key in the entry.",8,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"get","","Gets a reference to the value in the entry.",8,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",8,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"into_mut","","Converts the entry into a mutable reference to its value.",8,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"insert","","Sets the value of the entry with the `OccupiedEntry`'s key, and returns the entry's old value.",8,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"value"}}],[11,"remove","","Takes the value of the entry out of the map, and returns it.",8,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"next","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",9,null],[11,"next_back","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",9,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",10,null],[11,"next_back","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",10,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"into_iter","","",6,null],[11,"next","","",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",11,null],[11,"next_back","","",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",11,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",12,null],[11,"next_back","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",12,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",13,null],[11,"next_back","","",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",13,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[0,"ser","serde_json","Serialize a Rust data structure into JSON data.",null,null],[3,"Serializer","serde_json::ser","A structure for serializing Rust values into JSON.",null,null],[3,"CompactFormatter","","This structure compacts a JSON value with no extra whitespace.",null,null],[3,"PrettyFormatter","","This structure pretty prints a JSON value to make it human readable.",null,null],[4,"CharEscape","","Represents a character escape code in a type-safe manner.",null,null],[13,"Quote","","An escaped quote `\"`",14,null],[13,"ReverseSolidus","","An escaped reverse solidus ``",14,null],[13,"Solidus","","An escaped solidus `/`",14,null],[13,"Backspace","","An escaped backspace character (usually escaped as `\\b`)",14,null],[13,"FormFeed","","An escaped form feed character (usually escaped as `\\f`)",14,null],[13,"LineFeed","","An escaped line feed character (usually escaped as `\\n`)",14,null],[13,"CarriageReturn","","An escaped carriage return character (usually escaped as `\\r`)",14,null],[13,"Tab","","An escaped tab character (usually escaped as `\\t`)",14,null],[13,"AsciiControl","","An escaped ASCII plane control character (usually escaped as `\\u00XX` where `XX` are two hex characters)",14,null],[5,"to_writer","","Serialize the given data structure as JSON into the IO stream.",null,{"inputs":[{"name":"w"},{"name":"t"}],"output":{"name":"result"}}],[5,"to_writer_pretty","","Serialize the given data structure as pretty-printed JSON into the IO stream.",null,{"inputs":[{"name":"w"},{"name":"t"}],"output":{"name":"result"}}],[5,"to_vec","","Serialize the given data structure as a JSON byte vector.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"to_vec_pretty","","Serialize the given data structure as a pretty-printed JSON byte vector.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"to_string","","Serialize the given data structure as a String of JSON.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"to_string_pretty","","Serialize the given data structure as a pretty-printed String of JSON.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[8,"Formatter","","This trait abstracts away serializing the JSON control characters, which allows the user to optionally pretty print the JSON output.",null,null],[11,"write_null","","Writes a `null` value to the specified writer.",15,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"write_bool","","Writes a `true` or `false` value to the specified writer.",15,{"inputs":[{"name":"self"},{"name":"w"},{"name":"bool"}],"output":{"name":"result"}}],[11,"write_i8","","Writes an integer value like `-123` to the specified writer.",15,{"inputs":[{"name":"self"},{"name":"w"},{"name":"i8"}],"output":{"name":"result"}}],[11,"write_i16","","Writes an integer value like `-123` to the specified writer.",15,{"inputs":[{"name":"self"},{"name":"w"},{"name":"i16"}],"output":{"name":"result"}}],[11,"write_i32","","Writes an integer value like `-123` to the specified writer.",15,{"inputs":[{"name":"self"},{"name":"w"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_i64","","Writes an integer value like `-123` to the specified writer.",15,{"inputs":[{"name":"self"},{"name":"w"},{"name":"i64"}],"output":{"name":"result"}}],[11,"write_u8","","Writes an integer value like `123` to the specified writer.",15,{"inputs":[{"name":"self"},{"name":"w"},{"name":"u8"}],"output":{"name":"result"}}],[11,"write_u16","","Writes an integer value like `123` to the specified writer.",15,{"inputs":[{"name":"self"},{"name":"w"},{"name":"u16"}],"output":{"name":"result"}}],[11,"write_u32","","Writes an integer value like `123` to the specified writer.",15,{"inputs":[{"name":"self"},{"name":"w"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_u64","","Writes an integer value like `123` to the specified writer.",15,{"inputs":[{"name":"self"},{"name":"w"},{"name":"u64"}],"output":{"name":"result"}}],[11,"write_f32","","Writes a floating point value like `-31.26e+12` to the specified writer.",15,{"inputs":[{"name":"self"},{"name":"w"},{"name":"f32"}],"output":{"name":"result"}}],[11,"write_f64","","Writes a floating point value like `-31.26e+12` to the specified writer.",15,{"inputs":[{"name":"self"},{"name":"w"},{"name":"f64"}],"output":{"name":"result"}}],[11,"begin_string","","Called before each series of `write_string_fragment` and `write_char_escape`.  Writes a `\"` to the specified writer.",15,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"end_string","","Called after each series of `write_string_fragment` and `write_char_escape`.  Writes a `\"` to the specified writer.",15,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"write_string_fragment","","Writes a string fragment that doesn't need any escaping to the specified writer.",15,null],[11,"write_char_escape","","Writes a character escape code to the specified writer.",15,{"inputs":[{"name":"self"},{"name":"w"},{"name":"charescape"}],"output":{"name":"result"}}],[11,"begin_array","","Called before every array.  Writes a `[` to the specified writer.",15,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"end_array","","Called after every array.  Writes a `]` to the specified writer.",15,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"begin_array_value","","Called before every array value.  Writes a `,` if needed to the specified writer.",15,{"inputs":[{"name":"self"},{"name":"w"},{"name":"bool"}],"output":{"name":"result"}}],[11,"end_array_value","","Called after every array value.",15,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"begin_object","","Called before every object.  Writes a `{` to the specified writer.",15,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"end_object","","Called after every object.  Writes a `}` to the specified writer.",15,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"begin_object_key","","Called before every object key.",15,{"inputs":[{"name":"self"},{"name":"w"},{"name":"bool"}],"output":{"name":"result"}}],[11,"end_object_key","","Called after every object key.  A `:` should be written to the specified writer by either this method or `begin_object_value`.",15,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"begin_object_value","","Called before every object value.  A `:` should be written to the specified writer by either this method or `end_object_key`.",15,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"end_object_value","","Called after every object value.",15,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"new","","Creates a new JSON serializer.",16,{"inputs":[{"name":"w"}],"output":{"name":"self"}}],[11,"pretty","","Creates a new JSON pretty print serializer.",16,{"inputs":[{"name":"w"}],"output":{"name":"self"}}],[11,"with_formatter","","Creates a new JSON visitor whose output will be written to the writer specified.",16,{"inputs":[{"name":"w"},{"name":"f"}],"output":{"name":"self"}}],[11,"into_inner","","Unwrap the `Writer` from the `Serializer`.",16,{"inputs":[{"name":"self"}],"output":{"name":"w"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"compactformatter"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"prettyformatter"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a pretty printer formatter that defaults to using two spaces for indentation.",18,{"inputs":[],"output":{"name":"self"}}],[11,"with_indent","","Construct a pretty printer formatter that uses the `indent` string for indentation.",18,null],[11,"default","","",18,{"inputs":[],"output":{"name":"self"}}],[11,"begin_array","","",18,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"end_array","","",18,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"begin_array_value","","",18,{"inputs":[{"name":"self"},{"name":"w"},{"name":"bool"}],"output":{"name":"result"}}],[11,"end_array_value","","",18,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"begin_object","","",18,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"end_object","","",18,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"begin_object_key","","",18,{"inputs":[{"name":"self"},{"name":"w"},{"name":"bool"}],"output":{"name":"result"}}],[11,"begin_object_value","","",18,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"end_object_value","","",18,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[0,"value","serde_json","The Value enum, a loosely typed way of representing any valid JSON value.",null,null],[3,"Number","serde_json::value","Represents a JSON number, whether integer or floating point.",null,null],[4,"Value","","Represents any valid JSON value.",null,null],[13,"Null","","Represents a JSON null value.",0,null],[13,"Bool","","Represents a JSON boolean.",0,null],[13,"Number","","Represents a JSON number, whether integer or floating point.",0,null],[13,"String","","Represents a JSON string.",0,null],[13,"Array","","Represents a JSON array.",0,null],[13,"Object","","Represents a JSON object.",0,null],[5,"to_value","","Convert a `T` into `serde_json::Value` which is an enum that can represent any valid JSON data.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"from_value","","Interpret a `serde_json::Value` as an instance of type `T`.",null,{"inputs":[{"name":"value"}],"output":{"name":"result"}}],[8,"Index","","A type that can be used to index into a `serde_json::Value`. See the `get` and `get_mut` methods of `Value`.",null,null],[8,"ToJson","","Representation of any serializable data as a `serde_json::Value`.",null,null],[10,"to_json","","Represent `self` as a `serde_json::Value`. Note that `Value` is not a JSON string. If you need a string, use `serde_json::to_string` instead.",19,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"value"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"value"}],"output":{"name":"bool"}}],[11,"get","","Index into a JSON array or map. A string index can be used to access a value in a map, and a usize index can be used to access an element of an array.",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"option"}}],[11,"get_mut","","Mutably index into a JSON array or map. A string index can be used to access a value in a map, and a usize index can be used to access an element of an array.",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"option"}}],[11,"is_object","","Returns true if the `Value` is an Object. Returns false otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_object","","If the `Value` is an Object, returns the associated Map. Returns None otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_object_mut","","If the `Value` is an Object, returns the associated mutable Map. Returns None otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_array","","Returns true if the `Value` is an Array. Returns false otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_array","","If the `Value` is an Array, returns the associated vector. Returns None otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_array_mut","","If the `Value` is an Array, returns the associated mutable vector. Returns None otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_string","","Returns true if the `Value` is a String. Returns false otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_str","","If the `Value` is a String, returns the associated str. Returns None otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_number","","Returns true if the `Value` is a Number. Returns false otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_i64","","Returns true if the `Value` is a number that can be represented by i64.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_u64","","Returns true if the `Value` is a number that can be represented by u64.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_f64","","Returns true if the `Value` is a number that can be represented by f64.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_i64","","If the `Value` is a number, represent it as i64 if possible. Returns None otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_u64","","If the `Value` is a number, represent it as u64 if possible. Returns None otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_f64","","If the `Value` is a number, represent it as f64 if possible. Returns None otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_boolean","","Returns true if the `Value` is a Boolean. Returns false otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_bool","","If the `Value` is a Boolean, returns the associated bool. Returns None otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_null","","Returns true if the `Value` is a Null. Returns false otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_null","","If the `Value` is a Null, returns (). Returns None otherwise.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"pointer","","Looks up a value by a JSON Pointer.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"pointer_mut","","Looks up a value by a JSON Pointer and returns a mutable reference to that value.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"value"}}],[11,"index","","Index into a `serde_json::Value` using the syntax `value[0]` or `value[\"k\"]`.",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"value"}}],[11,"index_mut","","Write into a `serde_json::Value` using the syntax `value[0] = ...` or `value[\"k\"] = ...`.",0,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"value"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"bool"}}],[11,"from","","",0,{"inputs":[{"name":"i8"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"i16"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"isize"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from","","Convert 32-bit floating point number to `Value`",0,{"inputs":[{"name":"f32"}],"output":{"name":"self"}}],[11,"from","","Convert 64-bit floating point number to `Value`",0,{"inputs":[{"name":"f64"}],"output":{"name":"self"}}],[11,"from","","Convert boolean to `Value`",0,{"inputs":[{"name":"bool"}],"output":{"name":"self"}}],[11,"from","","Convert `String` to `Value`",0,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"from","","Convert string slice to `Value`",0,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","Convert copy-on-write string to `Value`",0,{"inputs":[{"name":"cow"}],"output":{"name":"self"}}],[11,"from","","Convert map (with string keys) to `Value`",0,{"inputs":[{"name":"map"}],"output":{"name":"self"}}],[11,"from","","Convert a `Vec` to `Value`",0,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"from","","Convert a slice to `Value`",0,null],[11,"from_iter","","Convert an iteratable type to a `Value`",0,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"serialize","","",0,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",0,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","Display a JSON value as a string.",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"deserialize","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",0,null],[11,"deserialize_newtype_struct","","",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",0,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",0,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",0,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",0,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",0,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",0,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",0,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",0,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",0,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",0,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",0,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",0,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",0,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",0,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",0,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",0,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",0,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",0,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",0,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",0,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",0,null],[11,"deserialize_struct_field","","",0,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",0,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",0,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"clone","serde_json","",20,{"inputs":[{"name":"self"}],"output":{"name":"number"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"number"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"number"}],"output":{"name":"bool"}}],[11,"is_i64","","Returns `true` if the number can be represented as `i64`.",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_u64","","Returns `true` if the number can be represented as `u64`.",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_f64","","Returns `true` if the number can be represented as `f64`.",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_i64","","Returns the number represented as `i64` if possible, or else `None`.",20,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_u64","","Returns the number represented as `u64` if possible, or else `None`.",20,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_f64","","Returns the number represented as `f64` if possible, or else `None`.",20,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from_f64","","Converts a finite `f64` to a `Number`. Infinite or NaN values are not JSON numbers.",20,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize","","",20,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",20,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_seq_fixed_size","","",20,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",20,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",20,{"inputs":[{"name":"self"},{"name":"str"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",20,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",20,null],[11,"deserialize_struct_field","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",20,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"__v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",20,null],[11,"deserialize_ignored_any","","",20,{"inputs":[{"name":"self"},{"name":"__v"}],"output":{"name":"result"}}],[11,"from","","",20,{"inputs":[{"name":"i8"}],"output":{"name":"self"}}],[11,"from","","",20,{"inputs":[{"name":"i16"}],"output":{"name":"self"}}],[11,"from","","",20,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[11,"from","","",20,{"inputs":[{"name":"i64"}],"output":{"name":"self"}}],[11,"from","","",20,{"inputs":[{"name":"isize"}],"output":{"name":"self"}}],[11,"from","","",20,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"from","","",20,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"from","","",20,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"from","","",20,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"from","","",20,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"new","serde_json::de","Create a JSON input source to read from an iterator of bytes.",21,{"inputs":[{"name":"iter"}],"output":{"name":"self"}}],[11,"next","","",21,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"peek","","",21,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"discard","","",21,{"inputs":[{"name":"self"}],"output":null}],[11,"position","","",21,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"peek_position","","",21,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"parse_str","","",21,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"result"}}],[11,"parse_str_raw","","",21,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"result"}}],[11,"new","","Create a JSON input source to read from a std::io input stream.",22,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"next","","",22,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"peek","","",22,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"discard","","",22,{"inputs":[{"name":"self"}],"output":null}],[11,"position","","",22,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"peek_position","","",22,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"parse_str","","",22,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"result"}}],[11,"parse_str_raw","","",22,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"result"}}],[11,"new","","Create a JSON input source to read from a slice of bytes.",23,null],[11,"next","","",23,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"peek","","",23,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"discard","","",23,{"inputs":[{"name":"self"}],"output":null}],[11,"position","","",23,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"peek_position","","",23,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"parse_str","","",23,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"result"}}],[11,"parse_str_raw","","",23,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"result"}}],[11,"new","","Create a JSON input source to read from a UTF-8 string.",24,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"next","","",24,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"peek","","",24,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"discard","","",24,{"inputs":[{"name":"self"}],"output":null}],[11,"position","","",24,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"peek_position","","",24,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"parse_str","","",24,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"result"}}],[11,"parse_str_raw","","",24,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"result"}}],[6,"Result","serde_json","Alias for a `Result` with the error type `serde_json::Error`.",null,null],[14,"json","","Construct a `serde_json::Value` from a JSON literal.",null,null]],"paths":[[4,"Value"],[3,"Deserializer"],[3,"StreamDeserializer"],[4,"Category"],[3,"Error"],[4,"Entry"],[3,"Map"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[4,"CharEscape"],[8,"Formatter"],[3,"Serializer"],[3,"CompactFormatter"],[3,"PrettyFormatter"],[8,"ToJson"],[3,"Number"],[3,"IteratorRead"],[3,"IoRead"],[3,"SliceRead"],[3,"StrRead"]]};
searchIndex["syn"] = {"doc":"","items":[[3,"Attribute","syn","Doc-comments are promoted to attributes that have `is_sugared_doc` = true",null,null],[12,"style","","",0,null],[12,"value","","",0,null],[12,"is_sugared_doc","","",0,null],[3,"Field","","A field of a struct or enum variant.",null,null],[12,"ident","","Name of the field, if any.",1,null],[12,"vis","","Visibility of the field.",1,null],[12,"attrs","","Attributes tagged on the field.",1,null],[12,"ty","","Type of the field.",1,null],[3,"Variant","","An enum variant.",null,null],[12,"ident","","Name of the variant.",2,null],[12,"attrs","","Attributes tagged on the variant.",2,null],[12,"data","","Type of variant.",2,null],[12,"discriminant","","Explicit discriminant, e.g. `Foo = 1`",2,null],[3,"Generics","","Represents lifetimes and type parameters attached to a declaration of a function, enum, trait, etc.",null,null],[12,"lifetimes","","",3,null],[12,"ty_params","","",3,null],[12,"where_clause","","",3,null],[3,"Lifetime","","",null,null],[12,"ident","","",4,null],[3,"LifetimeDef","","A lifetime definition, e.g. `'a: 'b+'c+'d`",null,null],[12,"attrs","","",5,null],[12,"lifetime","","",5,null],[12,"bounds","","",5,null],[3,"TyParam","","A generic type parameter, e.g. `T: Into<String>`.",null,null],[12,"attrs","","",6,null],[12,"ident","","",6,null],[12,"bounds","","",6,null],[12,"default","","",6,null],[3,"WhereBoundPredicate","","A type bound.",null,null],[12,"bound_lifetimes","","Any lifetimes from a `for` binding",7,null],[12,"bounded_ty","","The type being bounded",7,null],[12,"bounds","","Trait and lifetime bounds (`Clone+Send+'static`)",7,null],[3,"WhereClause","","A `where` clause in a definition",null,null],[12,"predicates","","",8,null],[3,"WhereEqPredicate","","An equality predicate (unsupported).",null,null],[12,"lhs_ty","","",9,null],[12,"rhs_ty","","",9,null],[3,"WhereRegionPredicate","","A lifetime predicate.",null,null],[12,"lifetime","","",10,null],[12,"bounds","","",10,null],[3,"ImplGenerics","","Returned by `Generics::split_for_impl`.",null,null],[3,"Turbofish","","Returned by `TyGenerics::as_turbofish`.",null,null],[3,"TyGenerics","","Returned by `Generics::split_for_impl`.",null,null],[3,"Ident","","",null,null],[3,"ByteStrLit","","",null,null],[12,"value","","",11,null],[12,"style","","",11,null],[3,"FloatLit","","",null,null],[12,"value","","",12,null],[12,"suffix","","",12,null],[3,"IntLit","","",null,null],[12,"value","","",13,null],[12,"suffix","","",13,null],[3,"StrLit","","",null,null],[12,"value","","",14,null],[12,"style","","",14,null],[3,"Delimited","","",null,null],[12,"delim","","The type of delimiter",15,null],[12,"tts","","The delimited sequence of token trees",15,null],[3,"Mac","","Represents a macro invocation. The Path indicates which macro is being invoked, and the vector of token-trees contains the source of the macro invocation.",null,null],[12,"path","","",16,null],[12,"tts","","",16,null],[3,"DeriveInput","","Struct or enum sent to a `proc_macro_derive` macro.",null,null],[12,"ident","","Name of the struct or enum.",17,null],[12,"vis","","Visibility of the struct or enum.",17,null],[12,"attrs","","Attributes tagged on the whole struct or enum.",17,null],[12,"generics","","Generics required to complete the definition.",17,null],[12,"body","","Data within the struct or enum.",17,null],[3,"AngleBracketedParameterData","","A path like `Foo<'a, T>`",null,null],[12,"lifetimes","","The lifetime parameters for this path segment.",18,null],[12,"types","","The type parameters for this path segment, if present.",18,null],[12,"bindings","","Bindings (equality constraints) on associated types, if present.",18,null],[3,"BareFnArg","","An argument in a function type.",null,null],[12,"name","","",19,null],[12,"ty","","",19,null],[3,"BareFnTy","","",null,null],[12,"unsafety","","",20,null],[12,"abi","","",20,null],[12,"lifetimes","","",20,null],[12,"inputs","","",20,null],[12,"output","","",20,null],[12,"variadic","","",20,null],[3,"MutTy","","",null,null],[12,"ty","","",21,null],[12,"mutability","","",21,null],[3,"ParenthesizedParameterData","","A path like `Foo(A,B) -> C`",null,null],[12,"inputs","","`(A, B)`",22,null],[12,"output","","`C`",22,null],[3,"Path","","A \"Path\" is essentially Rust's notion of a name.",null,null],[12,"global","","A `::foo` path, is relative to the crate root rather than current module (like paths in an import).",23,null],[12,"segments","","The segments in the path: the things separated by `::`.",23,null],[3,"PathSegment","","A segment of a path: an identifier, an optional lifetime, and a set of types.",null,null],[12,"ident","","The identifier portion of this path segment.",24,null],[12,"parameters","","Type/lifetime parameters attached to this path. They come in two flavors: `Path<A,B,C>` and `Path(A,B) -> C`. Note that this is more than just simple syntactic sugar; the use of parens affects the region binding rules, so we preserve the distinction.",24,null],[3,"PolyTraitRef","","",null,null],[12,"bound_lifetimes","","The `'a` in `<'a> Foo<&'a T>`",25,null],[12,"trait_ref","","The `Foo<&'a T>` in `<'a> Foo<&'a T>`",25,null],[3,"QSelf","","The explicit Self type in a \"qualified path\". The actual path, including the trait and the associated item, is stored separately. `position` represents the index of the associated item qualified with this Self type.",null,null],[12,"ty","","",26,null],[12,"position","","",26,null],[3,"TypeBinding","","Bind a type to an associated type: `A=Foo`.",null,null],[12,"ident","","",27,null],[12,"ty","","",27,null],[4,"AttrStyle","","Distinguishes between Attributes that decorate items and Attributes that are contained as statements within items. These two cases need to be distinguished for pretty-printing.",null,null],[13,"Outer","","Attribute of the form `#![...]`.",28,null],[13,"Inner","","Attribute of the form `#[...]`.",28,null],[4,"MetaItem","","A compile-time attribute item.",null,null],[13,"Word","","Word meta item.",29,null],[13,"List","","List meta item.",29,null],[13,"NameValue","","Name-value meta item.",29,null],[4,"NestedMetaItem","","Possible values inside of compile-time attribute lists.",null,null],[13,"MetaItem","","A full `MetaItem`.",30,null],[13,"Literal","","A Rust literal.",30,null],[4,"ConstExpr","","",null,null],[13,"Call","","A function call",31,null],[13,"Binary","","A binary operation (For example: `a + b`, `a * b`)",31,null],[13,"Unary","","A unary operation (For example: `!x`, `*x`)",31,null],[13,"Lit","","A literal (For example: `1`, `\"foo\"`)",31,null],[13,"Cast","","A cast (`foo as f64`)",31,null],[13,"Path","","Variable reference, possibly containing `::` and/or type parameters, e.g. foo::bar::<baz>.",31,null],[13,"Index","","An indexing operation (`foo[2]`)",31,null],[13,"Paren","","No-op: used solely so we can pretty-print faithfully",31,null],[13,"Other","","If compiling with full support for expression syntax, any expression is allowed",31,null],[4,"VariantData","","Data stored within an enum variant or struct.",null,null],[13,"Struct","","Struct variant, e.g. `Point { x: f64, y: f64 }`.",32,null],[13,"Tuple","","Tuple variant, e.g. `Some(T)`.",32,null],[13,"Unit","","Unit variant, e.g. `None`.",32,null],[4,"Visibility","","Visibility level of an item.",null,null],[13,"Public","","Public, i.e. `pub`.",33,null],[13,"Crate","","Crate-visible, i.e. `pub(crate)`.",33,null],[13,"Restricted","","Restricted, e.g. `pub(some::module)`.",33,null],[13,"Inherited","","Inherited, i.e. private.",33,null],[4,"TraitBoundModifier","","A modifier on a bound, currently this is only used for `?Sized`, where the modifier is `Maybe`. Negative bounds should also be handled here.",null,null],[13,"None","","",34,null],[13,"Maybe","","",34,null],[4,"TyParamBound","","The AST represents all type param bounds as types. `typeck::collect::compute_bounds` matches these against the \"special\" built-in traits (see `middle::lang_items`) and detects Copy, Send and Sync.",null,null],[13,"Trait","","",35,null],[13,"Region","","",35,null],[4,"WherePredicate","","A single predicate in a `where` clause",null,null],[13,"BoundPredicate","","A type binding, e.g. `for<'c> Foo: Send+Clone+'c`",36,null],[13,"RegionPredicate","","A lifetime predicate, e.g. `'a: 'b+'c`",36,null],[13,"EqPredicate","","An equality predicate (unsupported)",36,null],[4,"FloatTy","","",null,null],[13,"F32","","",37,null],[13,"F64","","",37,null],[13,"Unsuffixed","","",37,null],[4,"IntTy","","",null,null],[13,"Isize","","",38,null],[13,"I8","","",38,null],[13,"I16","","",38,null],[13,"I32","","",38,null],[13,"I64","","",38,null],[13,"Usize","","",38,null],[13,"U8","","",38,null],[13,"U16","","",38,null],[13,"U32","","",38,null],[13,"U64","","",38,null],[13,"Unsuffixed","","",38,null],[4,"Lit","","Literal kind.",null,null],[13,"Str","","A string literal (`\"foo\"`)",39,null],[13,"ByteStr","","A byte string (`b\"foo\"`)",39,null],[13,"Byte","","A byte char (`b'f'`)",39,null],[13,"Char","","A character literal (`'a'`)",39,null],[13,"Int","","An integer literal (`1`)",39,null],[13,"Float","","A float literal (`1f64` or `1E10f64` or `1.0E10`)",39,null],[13,"Bool","","A boolean literal",39,null],[4,"StrStyle","","",null,null],[13,"Cooked","","A regular string, like `\"foo\"`",40,null],[13,"Raw","","A raw string, like `r##\"foo\"##`",40,null],[4,"BinOpToken","","",null,null],[13,"Plus","","",41,null],[13,"Minus","","",41,null],[13,"Star","","",41,null],[13,"Slash","","",41,null],[13,"Percent","","",41,null],[13,"Caret","","",41,null],[13,"And","","",41,null],[13,"Or","","",41,null],[13,"Shl","","",41,null],[13,"Shr","","",41,null],[4,"DelimToken","","A delimiter token",null,null],[13,"Paren","","A round parenthesis: `(` or `)`",42,null],[13,"Bracket","","A square bracket: `[` or `]`",42,null],[13,"Brace","","A curly brace: `{` or `}`",42,null],[4,"Token","","",null,null],[13,"Eq","","",43,null],[13,"Lt","","",43,null],[13,"Le","","",43,null],[13,"EqEq","","",43,null],[13,"Ne","","",43,null],[13,"Ge","","",43,null],[13,"Gt","","",43,null],[13,"AndAnd","","",43,null],[13,"OrOr","","",43,null],[13,"Not","","",43,null],[13,"Tilde","","",43,null],[13,"BinOp","","",43,null],[13,"BinOpEq","","",43,null],[13,"At","","",43,null],[13,"Dot","","",43,null],[13,"DotDot","","",43,null],[13,"DotDotDot","","",43,null],[13,"Comma","","",43,null],[13,"Semi","","",43,null],[13,"Colon","","",43,null],[13,"ModSep","","",43,null],[13,"RArrow","","",43,null],[13,"LArrow","","",43,null],[13,"FatArrow","","",43,null],[13,"Pound","","",43,null],[13,"Dollar","","",43,null],[13,"Question","","",43,null],[13,"Literal","","",43,null],[13,"Ident","","",43,null],[13,"Underscore","","",43,null],[13,"Lifetime","","",43,null],[13,"DocComment","","",43,null],[4,"TokenTree","","When the main rust parser encounters a syntax-extension invocation, it parses the arguments to the invocation as a token-tree. This is a very loose structure, such that all sorts of different AST-fragments can be passed to syntax extensions using a uniform type.",null,null],[13,"Token","","A single token",44,null],[13,"Delimited","","A delimited sequence of token trees",44,null],[4,"Body","","Body of a derived struct or enum.",null,null],[13,"Enum","","It's an enum.",45,null],[13,"Struct","","It's a struct.",45,null],[4,"BinOp","","",null,null],[13,"Add","","The `+` operator (addition)",46,null],[13,"Sub","","The `-` operator (subtraction)",46,null],[13,"Mul","","The `*` operator (multiplication)",46,null],[13,"Div","","The `/` operator (division)",46,null],[13,"Rem","","The `%` operator (modulus)",46,null],[13,"And","","The `&&` operator (logical and)",46,null],[13,"Or","","The `||` operator (logical or)",46,null],[13,"BitXor","","The `^` operator (bitwise xor)",46,null],[13,"BitAnd","","The `&` operator (bitwise and)",46,null],[13,"BitOr","","The `|` operator (bitwise or)",46,null],[13,"Shl","","The `<<` operator (shift left)",46,null],[13,"Shr","","The `>>` operator (shift right)",46,null],[13,"Eq","","The `==` operator (equality)",46,null],[13,"Lt","","The `<` operator (less than)",46,null],[13,"Le","","The `<=` operator (less than or equal to)",46,null],[13,"Ne","","The `!=` operator (not equal to)",46,null],[13,"Ge","","The `>=` operator (greater than or equal to)",46,null],[13,"Gt","","The `>` operator (greater than)",46,null],[4,"UnOp","","",null,null],[13,"Deref","","The `*` operator for dereferencing",47,null],[13,"Not","","The `!` operator for logical inversion",47,null],[13,"Neg","","The `-` operator for negation",47,null],[4,"Abi","","",null,null],[13,"Named","","",48,null],[13,"Rust","","",48,null],[4,"FunctionRetTy","","",null,null],[13,"Default","","Return type is not specified.",49,null],[13,"Ty","","Everything else",49,null],[4,"Mutability","","",null,null],[13,"Mutable","","",50,null],[13,"Immutable","","",50,null],[4,"PathParameters","","Parameters of a path segment.",null,null],[13,"AngleBracketed","","The `<'a, A, B, C>` in `foo::bar::baz::<'a, A, B, C>`",51,null],[13,"Parenthesized","","The `(A, B)` and `C` in `Foo(A, B) -> C`",51,null],[4,"Ty","","The different kinds of types recognized by the compiler",null,null],[13,"Slice","","A variable-length array (`[T]`)",52,null],[13,"Array","","A fixed length array (`[T; n]`)",52,null],[13,"Ptr","","A raw pointer (`*const T` or `*mut T`)",52,null],[13,"Rptr","","A reference (`&'a T` or `&'a mut T`)",52,null],[13,"BareFn","","A bare function (e.g. `fn(usize) -> bool`)",52,null],[13,"Never","","The never type (`!`)",52,null],[13,"Tup","","A tuple (`(A, B, C, D, ...)`)",52,null],[13,"Path","","A path (`module::module::...::Type`), optionally \"qualified\", e.g. `<Vec<T> as SomeTrait>::SomeType`.",52,null],[13,"TraitObject","","A trait object type `Bound1 + Bound2 + Bound3` where `Bound` is a trait or a lifetime.",52,null],[13,"ImplTrait","","An `impl Bound1 + Bound2 + Bound3` type where `Bound` is a trait or a lifetime.",52,null],[13,"Paren","","No-op; kept solely so that we can pretty-print faithfully",52,null],[13,"Infer","","TyKind::Infer means the type should be inferred instead of it having been specified. This can appear anywhere in a type.",52,null],[13,"Mac","","A macro in the type position.",52,null],[4,"Unsafety","","",null,null],[13,"Unsafe","","",53,null],[13,"Normal","","",53,null],[5,"parse_derive_input","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"parse_type","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"parse_path","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"parse_where_clause","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"parse_token_trees","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"parse_ident","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"parse_ty_param_bound","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"parse_outer_attr","","",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"to_tokens","","",0,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",29,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",30,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"attribute"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":{"name":"bool"}}],[11,"hash","","",0,null],[11,"name","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"attrstyle"}}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"attrstyle"}],"output":{"name":"bool"}}],[11,"hash","","",28,null],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"metaitem"}}],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"metaitem"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"self"},{"name":"metaitem"}],"output":{"name":"bool"}}],[11,"hash","","",29,null],[11,"name","","Name of the item.",29,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"nestedmetaitem"}}],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"nestedmetaitem"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"self"},{"name":"nestedmetaitem"}],"output":{"name":"bool"}}],[11,"hash","","",30,null],[11,"to_tokens","","",31,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"constexpr"}}],[11,"eq","","",31,{"inputs":[{"name":"self"},{"name":"constexpr"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"self"},{"name":"constexpr"}],"output":{"name":"bool"}}],[11,"hash","","",31,null],[11,"to_tokens","","",2,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",32,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",33,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"variant"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"variant"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"variant"}],"output":{"name":"bool"}}],[11,"hash","","",2,null],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"variantdata"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"variantdata"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"self"},{"name":"variantdata"}],"output":{"name":"bool"}}],[11,"hash","","",32,null],[11,"fields","","Slice containing the fields stored in the variant.",32,null],[11,"fields_mut","","Mutable slice containing the fields stored in the variant.",32,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"field"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"field"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"field"}],"output":{"name":"bool"}}],[11,"hash","","",1,null],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"visibility"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"visibility"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"self"},{"name":"visibility"}],"output":{"name":"bool"}}],[11,"hash","","",33,null],[11,"to_tokens","","",3,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",54,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",55,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",56,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",4,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",5,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",6,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",35,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",8,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",36,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",7,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",10,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",9,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"generics"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"generics"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"generics"}],"output":{"name":"bool"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"generics"}}],[11,"hash","","",3,null],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"split_for_impl","","Split a type's generics into the pieces required for impl'ing a trait for that type.",3,null],[11,"as_turbofish","","Turn a type's generics like `<X, Y>` into a turbofish like `::<X, Y>`.",55,{"inputs":[{"name":"self"}],"output":{"name":"turbofish"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"lifetime"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"hash","","",4,null],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"new","","",4,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"lifetimedef"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":{"name":"bool"}}],[11,"hash","","",5,null],[11,"new","","",5,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"typaram"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"typaram"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"typaram"}],"output":{"name":"bool"}}],[11,"hash","","",6,null],[11,"from","","",6,{"inputs":[{"name":"ident"}],"output":{"name":"self"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"typarambound"}}],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":{"name":"bool"}}],[11,"hash","","",35,null],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"traitboundmodifier"}}],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"traitboundmodifier"}],"output":{"name":"bool"}}],[11,"hash","","",34,null],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"whereclause"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"whereclause"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"whereclause"}],"output":{"name":"bool"}}],[11,"default","","",8,{"inputs":[],"output":{"name":"whereclause"}}],[11,"hash","","",8,null],[11,"none","","",8,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"wherepredicate"}}],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"wherepredicate"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"self"},{"name":"wherepredicate"}],"output":{"name":"bool"}}],[11,"hash","","",36,null],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"whereboundpredicate"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"whereboundpredicate"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"whereboundpredicate"}],"output":{"name":"bool"}}],[11,"hash","","",7,null],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"whereregionpredicate"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"whereregionpredicate"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"whereregionpredicate"}],"output":{"name":"bool"}}],[11,"hash","","",10,null],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"whereeqpredicate"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"whereeqpredicate"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"whereeqpredicate"}],"output":{"name":"bool"}}],[11,"hash","","",9,null],[11,"to_tokens","","",57,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"ident"}}],[11,"hash","","",57,null],[11,"cmp","","",57,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",57,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"option"}}],[11,"lt","","",57,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"bool"}}],[11,"le","","",57,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"bool"}}],[11,"gt","","",57,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"bool"}}],[11,"ge","","",57,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"bool"}}],[11,"new","","",57,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"from","","",57,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",57,{"inputs":[{"name":"cow"}],"output":{"name":"self"}}],[11,"from","","",57,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"from","","",57,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"as_ref","","",57,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",57,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"to_tokens","","",39,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"lit"}}],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"lit"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"self"},{"name":"lit"}],"output":{"name":"bool"}}],[11,"hash","","",39,null],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"strstyle"}}],[11,"eq","","",40,{"inputs":[{"name":"self"},{"name":"strstyle"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"self"},{"name":"strstyle"}],"output":{"name":"bool"}}],[11,"hash","","",40,null],[11,"from","","",39,{"inputs":[{"name":"string"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"str"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"vec"}],"output":{"name":"lit"}}],[11,"from","","",39,null],[11,"from","","",39,{"inputs":[{"name":"char"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"bool"}],"output":{"name":"lit"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"intty"}}],[11,"eq","","",38,{"inputs":[{"name":"self"},{"name":"intty"}],"output":{"name":"bool"}}],[11,"hash","","",38,null],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"floatty"}}],[11,"eq","","",37,{"inputs":[{"name":"self"},{"name":"floatty"}],"output":{"name":"bool"}}],[11,"hash","","",37,null],[11,"from","","",39,{"inputs":[{"name":"isize"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"i8"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"i16"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"i32"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"i64"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"usize"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"u8"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"u16"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"u32"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"u64"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"f32"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"f64"}],"output":{"name":"lit"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"strlit"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bytestrlit"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"intlit"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"floatlit"}}],[11,"to_tokens","","",16,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",44,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",15,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",43,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",41,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"mac"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"mac"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"mac"}],"output":{"name":"bool"}}],[11,"hash","","",16,null],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"tokentree"}}],[11,"eq","","",44,{"inputs":[{"name":"self"},{"name":"tokentree"}],"output":{"name":"bool"}}],[11,"ne","","",44,{"inputs":[{"name":"self"},{"name":"tokentree"}],"output":{"name":"bool"}}],[11,"hash","","",44,null],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"delimited"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"delimited"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"delimited"}],"output":{"name":"bool"}}],[11,"hash","","",15,null],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"token"}}],[11,"eq","","",43,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"hash","","",43,null],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"binoptoken"}}],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"binoptoken"}],"output":{"name":"bool"}}],[11,"hash","","",41,null],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"delimtoken"}}],[11,"eq","","",42,{"inputs":[{"name":"self"},{"name":"delimtoken"}],"output":{"name":"bool"}}],[11,"hash","","",42,null],[11,"to_tokens","","",17,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"deriveinput"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"deriveinput"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"deriveinput"}],"output":{"name":"bool"}}],[11,"hash","","",17,null],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"body"}}],[11,"eq","","",45,{"inputs":[{"name":"self"},{"name":"body"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"self"},{"name":"body"}],"output":{"name":"bool"}}],[11,"hash","","",45,null],[11,"op","","",46,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"assign_op","","",46,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_tokens","","",46,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"op","","",47,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"to_tokens","","",47,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"binop"}}],[11,"eq","","",46,{"inputs":[{"name":"self"},{"name":"binop"}],"output":{"name":"bool"}}],[11,"hash","","",46,null],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"unop"}}],[11,"eq","","",47,{"inputs":[{"name":"self"},{"name":"unop"}],"output":{"name":"bool"}}],[11,"hash","","",47,null],[11,"to_tokens","","",52,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",50,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",23,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",24,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",51,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",18,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",27,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",22,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",25,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",20,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",19,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",53,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",48,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"ty"}}],[11,"eq","","",52,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"bool"}}],[11,"ne","","",52,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"bool"}}],[11,"hash","","",52,null],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"mutty"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"mutty"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"self"},{"name":"mutty"}],"output":{"name":"bool"}}],[11,"hash","","",21,null],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"mutability"}}],[11,"eq","","",50,{"inputs":[{"name":"self"},{"name":"mutability"}],"output":{"name":"bool"}}],[11,"hash","","",50,null],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"hash","","",23,null],[11,"from","","",23,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"pathsegment"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"pathsegment"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"self"},{"name":"pathsegment"}],"output":{"name":"bool"}}],[11,"hash","","",24,null],[11,"from","","",24,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"pathparameters"}}],[11,"eq","","",51,{"inputs":[{"name":"self"},{"name":"pathparameters"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"self"},{"name":"pathparameters"}],"output":{"name":"bool"}}],[11,"hash","","",51,null],[11,"none","","",51,{"inputs":[],"output":{"name":"self"}}],[11,"is_empty","","",51,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"anglebracketedparameterdata"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"anglebracketedparameterdata"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"anglebracketedparameterdata"}],"output":{"name":"bool"}}],[11,"default","","",18,{"inputs":[],"output":{"name":"anglebracketedparameterdata"}}],[11,"hash","","",18,null],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"typebinding"}}],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"typebinding"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"self"},{"name":"typebinding"}],"output":{"name":"bool"}}],[11,"hash","","",27,null],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"parenthesizedparameterdata"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"parenthesizedparameterdata"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"parenthesizedparameterdata"}],"output":{"name":"bool"}}],[11,"hash","","",22,null],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"polytraitref"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"polytraitref"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"self"},{"name":"polytraitref"}],"output":{"name":"bool"}}],[11,"hash","","",25,null],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"qself"}}],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"qself"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"self"},{"name":"qself"}],"output":{"name":"bool"}}],[11,"hash","","",26,null],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"barefnty"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"barefnty"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"barefnty"}],"output":{"name":"bool"}}],[11,"hash","","",20,null],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"unsafety"}}],[11,"eq","","",53,{"inputs":[{"name":"self"},{"name":"unsafety"}],"output":{"name":"bool"}}],[11,"hash","","",53,null],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"abi"}}],[11,"eq","","",48,{"inputs":[{"name":"self"},{"name":"abi"}],"output":{"name":"bool"}}],[11,"ne","","",48,{"inputs":[{"name":"self"},{"name":"abi"}],"output":{"name":"bool"}}],[11,"hash","","",48,null],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"barefnarg"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"barefnarg"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"self"},{"name":"barefnarg"}],"output":{"name":"bool"}}],[11,"hash","","",19,null],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"functionretty"}}],[11,"eq","","",49,{"inputs":[{"name":"self"},{"name":"functionretty"}],"output":{"name":"bool"}}],[11,"ne","","",49,{"inputs":[{"name":"self"},{"name":"functionretty"}],"output":{"name":"bool"}}],[11,"hash","","",49,null],[0,"visit","","AST walker. Each overridden visit method has full control over what happens with its node, it can do its own traversal of the node's children, call `visit::walk_*` to apply the default traversal algorithm, or prevent deeper traversal by doing nothing.",null,null],[5,"walk_opt_ident","syn::visit","",null,{"inputs":[{"name":"v"},{"name":"option"}],"output":null}],[5,"walk_lifetime_def","","",null,{"inputs":[{"name":"v"},{"name":"lifetimedef"}],"output":null}],[5,"walk_poly_trait_ref","","",null,{"inputs":[{"name":"v"},{"name":"polytraitref"},{"name":"traitboundmodifier"}],"output":null}],[5,"walk_derive_input","","",null,{"inputs":[{"name":"v"},{"name":"deriveinput"}],"output":null}],[5,"walk_variant","","",null,{"inputs":[{"name":"v"},{"name":"variant"},{"name":"generics"}],"output":null}],[5,"walk_ty","","",null,{"inputs":[{"name":"v"},{"name":"ty"}],"output":null}],[5,"walk_path","","",null,{"inputs":[{"name":"v"},{"name":"path"}],"output":null}],[5,"walk_path_segment","","",null,{"inputs":[{"name":"v"},{"name":"pathsegment"}],"output":null}],[5,"walk_path_parameters","","",null,{"inputs":[{"name":"v"},{"name":"pathparameters"}],"output":null}],[5,"walk_assoc_type_binding","","",null,{"inputs":[{"name":"v"},{"name":"typebinding"}],"output":null}],[5,"walk_ty_param_bound","","",null,{"inputs":[{"name":"v"},{"name":"typarambound"}],"output":null}],[5,"walk_generics","","",null,{"inputs":[{"name":"v"},{"name":"generics"}],"output":null}],[5,"walk_fn_ret_ty","","",null,{"inputs":[{"name":"v"},{"name":"functionretty"}],"output":null}],[5,"walk_variant_data","","",null,{"inputs":[{"name":"v"},{"name":"variantdata"}],"output":null}],[5,"walk_field","","",null,{"inputs":[{"name":"v"},{"name":"field"}],"output":null}],[5,"walk_const_expr","","",null,{"inputs":[{"name":"v"},{"name":"constexpr"}],"output":null}],[5,"walk_mac","","",null,{"inputs":[{"name":"v"},{"name":"mac"}],"output":null}],[8,"Visitor","","Each method of the Visitor trait is a hook to be potentially overridden.  Each method's default implementation recursively visits the substructure of the input via the corresponding `walk` method; e.g. the `visit_mod` method by default calls `visit::walk_mod`.",null,null],[11,"visit_ident","","",58,{"inputs":[{"name":"self"},{"name":"ident"}],"output":null}],[11,"visit_derive_input","","",58,{"inputs":[{"name":"self"},{"name":"deriveinput"}],"output":null}],[11,"visit_ty","","",58,{"inputs":[{"name":"self"},{"name":"ty"}],"output":null}],[11,"visit_generics","","",58,{"inputs":[{"name":"self"},{"name":"generics"}],"output":null}],[11,"visit_ty_param_bound","","",58,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":null}],[11,"visit_poly_trait_ref","","",58,{"inputs":[{"name":"self"},{"name":"polytraitref"},{"name":"traitboundmodifier"}],"output":null}],[11,"visit_variant_data","","",58,{"inputs":[{"name":"self"},{"name":"variantdata"},{"name":"ident"},{"name":"generics"}],"output":null}],[11,"visit_field","","",58,{"inputs":[{"name":"self"},{"name":"field"}],"output":null}],[11,"visit_variant","","",58,{"inputs":[{"name":"self"},{"name":"variant"},{"name":"generics"}],"output":null}],[11,"visit_lifetime","","",58,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":null}],[11,"visit_lifetime_def","","",58,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":null}],[11,"visit_path","","",58,{"inputs":[{"name":"self"},{"name":"path"}],"output":null}],[11,"visit_path_segment","","",58,{"inputs":[{"name":"self"},{"name":"pathsegment"}],"output":null}],[11,"visit_path_parameters","","",58,{"inputs":[{"name":"self"},{"name":"pathparameters"}],"output":null}],[11,"visit_assoc_type_binding","","",58,{"inputs":[{"name":"self"},{"name":"typebinding"}],"output":null}],[11,"visit_attribute","","",58,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":null}],[11,"visit_fn_ret_ty","","",58,{"inputs":[{"name":"self"},{"name":"functionretty"}],"output":null}],[11,"visit_const_expr","","",58,{"inputs":[{"name":"self"},{"name":"constexpr"}],"output":null}],[11,"visit_lit","","",58,{"inputs":[{"name":"self"},{"name":"lit"}],"output":null}],[11,"visit_mac","","",58,{"inputs":[{"name":"self"},{"name":"mac"}],"output":null}],[0,"parse","syn","This module contains a set of exported nom parsers which can be used to parse custom grammars when used alongside the `synom` crate.",null,null],[4,"IResult","syn::parse","The result of a parser.",null,null],[13,"Done","","Parsing succeeded. The first field contains the rest of the unparsed data and the second field contains the parse result.",59,null],[13,"Error","","Parsing failed.",59,null],[5,"lit","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[5,"string","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[5,"byte_string","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[5,"byte","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[5,"character","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[5,"float","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[5,"int","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[5,"boolean","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[5,"ty","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[5,"path","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[5,"tt","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[5,"ident","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[5,"lifetime","","",null,{"inputs":[{"name":"str"}],"output":{"name":"iresult"}}],[11,"expect","","Unwraps the result, asserting the the parse is complete. Panics with a message based on the given string if the parse failed or is incomplete.",59,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"o"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"iresult"}}],[11,"eq","","",59,{"inputs":[{"name":"self"},{"name":"iresult"}],"output":{"name":"bool"}}],[11,"ne","","",59,{"inputs":[{"name":"self"},{"name":"iresult"}],"output":{"name":"bool"}}]],"paths":[[3,"Attribute"],[3,"Field"],[3,"Variant"],[3,"Generics"],[3,"Lifetime"],[3,"LifetimeDef"],[3,"TyParam"],[3,"WhereBoundPredicate"],[3,"WhereClause"],[3,"WhereEqPredicate"],[3,"WhereRegionPredicate"],[3,"ByteStrLit"],[3,"FloatLit"],[3,"IntLit"],[3,"StrLit"],[3,"Delimited"],[3,"Mac"],[3,"DeriveInput"],[3,"AngleBracketedParameterData"],[3,"BareFnArg"],[3,"BareFnTy"],[3,"MutTy"],[3,"ParenthesizedParameterData"],[3,"Path"],[3,"PathSegment"],[3,"PolyTraitRef"],[3,"QSelf"],[3,"TypeBinding"],[4,"AttrStyle"],[4,"MetaItem"],[4,"NestedMetaItem"],[4,"ConstExpr"],[4,"VariantData"],[4,"Visibility"],[4,"TraitBoundModifier"],[4,"TyParamBound"],[4,"WherePredicate"],[4,"FloatTy"],[4,"IntTy"],[4,"Lit"],[4,"StrStyle"],[4,"BinOpToken"],[4,"DelimToken"],[4,"Token"],[4,"TokenTree"],[4,"Body"],[4,"BinOp"],[4,"UnOp"],[4,"Abi"],[4,"FunctionRetTy"],[4,"Mutability"],[4,"PathParameters"],[4,"Ty"],[4,"Unsafety"],[3,"ImplGenerics"],[3,"TyGenerics"],[3,"Turbofish"],[3,"Ident"],[8,"Visitor"],[4,"IResult"]]};
searchIndex["synom"] = {"doc":"Adapted from `nom` by removing the `IResult::Incomplete` variant which:","items":[[4,"IResult","synom","The result of a parser.",null,null],[13,"Done","","Parsing succeeded. The first field contains the rest of the unparsed data and the second field contains the parse result.",0,null],[13,"Error","","Parsing failed.",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"iresult"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"iresult"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"iresult"}}],[11,"expect","","Unwraps the result, asserting the the parse is complete. Panics with a message based on the given string if the parse failed or is incomplete.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"o"}}],[14,"punct","","Parse a piece of punctuation like \"+\" or \"+=\".",null,null],[14,"keyword","","Parse a keyword like \"fn\" or \"struct\".",null,null],[14,"option","","Turn a failed parse into `None` and a successful parse into `Some`.",null,null],[14,"opt_vec","","Turn a failed parse into an empty vector. The argument parser must itself return a vector.",null,null],[14,"epsilon","","Parses nothing and always succeeds.",null,null],[14,"separated_list","","Zero or more values separated by some separator. Does not allow a trailing seperator.",null,null],[14,"terminated_list","","Zero or more values separated by some separator. A trailing separator is allowed.",null,null],[14,"named","","Define a function from a parser combination.",null,null],[14,"call","","Invoke the given parser function with the passed in arguments.",null,null],[14,"map","","Transform the result of a parser by applying a function or closure.",null,null],[14,"not","","Parses successfully if the given parser fails to parse. Does not consume any of the input.",null,null],[14,"cond","","Conditionally execute the given parser.",null,null],[14,"cond_reduce","","Fail to parse if condition is false, otherwise parse the given parser.",null,null],[14,"preceded","","Parse two things, returning the value of the second.",null,null],[14,"terminated","","Parse two things, returning the value of the first.",null,null],[14,"many0","","Parse zero or more values using the given parser.",null,null],[14,"peek","","Parse a value without consuming it from the input data.",null,null],[14,"take_until","","Parse the part of the input up to but not including the given string. Fail to parse if the given string is not present in the input.",null,null],[14,"tag","","Parse the given string from exactly the current position in the input. You almost always want `punct!` or `keyword!` instead of this.",null,null],[14,"switch","","Pattern-match the result of a parser to select which other parser to run.",null,null],[14,"value","","Produce the given value without parsing anything. Useful as an argument to `switch!`.",null,null],[14,"delimited","","Value surrounded by a pair of delimiters.",null,null],[14,"separated_nonempty_list","","One or more values separated by some separator. Does not allow a trailing separator.",null,null],[14,"tuple","","Run a series of parsers and produce all of the results in a tuple.",null,null],[14,"alt","","Run a series of parsers, returning the result of the first one which succeeds.",null,null],[14,"do_parse","","Run a series of parsers, one after another, optionally assigning the results a name. Fail if any of the parsers fails.",null,null]],"paths":[[4,"IResult"]]};
searchIndex["time"] = {"doc":"Simple time handling.","items":[[3,"Duration","time","ISO 8601 time duration with nanosecond precision. This also allows for the negative duration; see individual methods for details.",null,null],[3,"OutOfRangeError","","Represents error when converting `Duration` to/from a standard library implementation",null,null],[3,"Timespec","","A record specifying a time value in seconds and nanoseconds, where nanoseconds represent the offset from the given second.",null,null],[12,"sec","","",0,null],[12,"nsec","","",0,null],[3,"PreciseTime","","An opaque structure representing a moment in time.",null,null],[3,"SteadyTime","","A structure representing a moment in time.",null,null],[3,"Tm","","Holds a calendar date and time broken down into its components (year, month, day, and so on), also called a broken-down time value.",null,null],[12,"tm_sec","","Seconds after the minute - [0, 60]",1,null],[12,"tm_min","","Minutes after the hour - [0, 59]",1,null],[12,"tm_hour","","Hours after midnight - [0, 23]",1,null],[12,"tm_mday","","Day of the month - [1, 31]",1,null],[12,"tm_mon","","Months since January - [0, 11]",1,null],[12,"tm_year","","Years since 1900",1,null],[12,"tm_wday","","Days since Sunday - [0, 6]. 0 = Sunday, 1 = Monday, ..., 6 = Saturday.",1,null],[12,"tm_yday","","Days since January 1 - [0, 365]",1,null],[12,"tm_isdst","","Daylight Saving Time flag.",1,null],[12,"tm_utcoff","","Identifies the time zone that was used to compute this broken-down time value, including any adjustment for Daylight Saving Time. This is the number of seconds east of UTC. For example, for U.S. Pacific Daylight Time, the value is -7*60*60 = -25200.",1,null],[12,"tm_nsec","","Nanoseconds after the second - [0, 10<sup>9</sup> - 1]",1,null],[3,"TmFmt","","A wrapper around a `Tm` and format string that implements Display.",null,null],[4,"ParseError","","",null,null],[13,"InvalidSecond","","",2,null],[13,"InvalidMinute","","",2,null],[13,"InvalidHour","","",2,null],[13,"InvalidDay","","",2,null],[13,"InvalidMonth","","",2,null],[13,"InvalidYear","","",2,null],[13,"InvalidDayOfWeek","","",2,null],[13,"InvalidDayOfMonth","","",2,null],[13,"InvalidDayOfYear","","",2,null],[13,"InvalidZoneOffset","","",2,null],[13,"InvalidTime","","",2,null],[13,"InvalidSecondsSinceEpoch","","",2,null],[13,"MissingFormatConverter","","",2,null],[13,"InvalidFormatSpecifier","","",2,null],[13,"UnexpectedCharacter","","",2,null],[5,"strptime","","Parses the time from the string according to the format string.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[5,"get_time","","Returns the current time as a `timespec` containing the seconds and nanoseconds since 1970-01-01T00:00:00Z.",null,{"inputs":[],"output":{"name":"timespec"}}],[5,"precise_time_ns","","Returns the current value of a high-resolution performance counter in nanoseconds since an unspecified epoch.",null,{"inputs":[],"output":{"name":"u64"}}],[5,"precise_time_s","","Returns the current value of a high-resolution performance counter in seconds since an unspecified epoch.",null,{"inputs":[],"output":{"name":"f64"}}],[5,"tzset","","",null,{"inputs":[],"output":null}],[5,"empty_tm","","",null,{"inputs":[],"output":{"name":"tm"}}],[5,"at_utc","","Returns the specified time in UTC",null,{"inputs":[{"name":"timespec"}],"output":{"name":"tm"}}],[5,"now_utc","","Returns the current time in UTC",null,{"inputs":[],"output":{"name":"tm"}}],[5,"at","","Returns the specified time in the local timezone",null,{"inputs":[{"name":"timespec"}],"output":{"name":"tm"}}],[5,"now","","Returns the current time in the local timezone",null,{"inputs":[],"output":{"name":"tm"}}],[5,"strftime","","Formats the time according to the format string.",null,{"inputs":[{"name":"str"},{"name":"tm"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"duration"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"ordering"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"weeks","","Makes a new `Duration` with given number of weeks. Equivalent to `Duration::seconds(weeks * 7 * 24 * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"days","","Makes a new `Duration` with given number of days. Equivalent to `Duration::seconds(days * 24 * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"hours","","Makes a new `Duration` with given number of hours. Equivalent to `Duration::seconds(hours * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"minutes","","Makes a new `Duration` with given number of minutes. Equivalent to `Duration::seconds(minutes * 60)` with overflow checks. Panics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"seconds","","Makes a new `Duration` with given number of seconds. Panics when the duration is more than `i64::MAX` milliseconds or less than `i64::MIN` milliseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"milliseconds","","Makes a new `Duration` with given number of milliseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"microseconds","","Makes a new `Duration` with given number of microseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"nanoseconds","","Makes a new `Duration` with given number of nanoseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"span","","Runs a closure, returning the duration of time it took to run the closure.",4,{"inputs":[{"name":"f"}],"output":{"name":"duration"}}],[11,"num_weeks","","Returns the total number of whole weeks in the duration.",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_days","","Returns the total number of whole days in the duration.",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_hours","","Returns the total number of whole hours in the duration.",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_minutes","","Returns the total number of whole minutes in the duration.",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_seconds","","Returns the total number of whole seconds in the duration.",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_milliseconds","","Returns the total number of whole milliseconds in the duration,",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_microseconds","","Returns the total number of whole microseconds in the duration, or `None` on overflow (exceeding 2^63 microseconds in either direction).",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"num_nanoseconds","","Returns the total number of whole nanoseconds in the duration, or `None` on overflow (exceeding 2^63 nanoseconds in either direction).",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"checked_add","","Add two durations, returning `None` if overflow occurred.",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"option"}}],[11,"checked_sub","","Subtract two durations, returning `None` if overflow occurred.",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"option"}}],[11,"min_value","","The minimum possible `Duration`: `i64::MIN` milliseconds.",4,{"inputs":[],"output":{"name":"duration"}}],[11,"max_value","","The maximum possible `Duration`: `i64::MAX` milliseconds.",4,{"inputs":[],"output":{"name":"duration"}}],[11,"zero","","A duration where the stored seconds and nanoseconds are equal to zero.",4,{"inputs":[],"output":{"name":"duration"}}],[11,"is_zero","","Returns `true` if the duration equals `Duration::zero()`.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_std","","Creates a `time::Duration` object from `std::time::Duration`",4,{"inputs":[{"name":"stdduration"}],"output":{"name":"result"}}],[11,"to_std","","Creates a `std::time::Duration` object from `time::Duration`",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"neg","","",4,{"inputs":[{"name":"self"}],"output":{"name":"duration"}}],[11,"add","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"sub","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"mul","","",4,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"duration"}}],[11,"div","","",4,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"duration"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"outofrangeerror"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"outofrangeerror"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"outofrangeerror"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"timespec"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"ordering"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,null],[11,"new","","",0,{"inputs":[{"name":"i64"},{"name":"i32"}],"output":{"name":"timespec"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"timespec"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"timespec"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"duration"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"precisetime"}}],[11,"now","","Returns a `PreciseTime` representing the current moment in time.",6,{"inputs":[],"output":{"name":"precisetime"}}],[11,"to","","Returns a `Duration` representing the span of time from the value of `self` to the value of `later`.",6,{"inputs":[{"name":"self"},{"name":"precisetime"}],"output":{"name":"duration"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"steadytime"}}],[11,"partial_cmp","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"option"}}],[11,"lt","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"le","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"gt","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"ge","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"cmp","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"ordering"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"now","","Returns a `SteadyTime` representing the current moment in time.",7,{"inputs":[],"output":{"name":"steadytime"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"sub","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"duration"}}],[11,"sub","","",7,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"steadytime"}}],[11,"add","","",7,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"steadytime"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"tm"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"tm"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"tm"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",1,null],[11,"add","","The resulting Tm is in UTC.",1,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"tm"}}],[11,"sub","","The resulting Tm is in UTC.",1,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"tm"}}],[11,"sub","","",1,{"inputs":[{"name":"self"},{"name":"tm"}],"output":{"name":"duration"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"tm"}],"output":{"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"tm"}],"output":{"name":"ordering"}}],[11,"to_timespec","","Convert time to the seconds from January 1, 1970",1,{"inputs":[{"name":"self"}],"output":{"name":"timespec"}}],[11,"to_local","","Convert time to the local timezone",1,{"inputs":[{"name":"self"}],"output":{"name":"tm"}}],[11,"to_utc","","Convert time to the UTC",1,{"inputs":[{"name":"self"}],"output":{"name":"tm"}}],[11,"ctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO C, in the local timezone.",1,{"inputs":[{"name":"self"}],"output":{"name":"tmfmt"}}],[11,"asctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO C.",1,{"inputs":[{"name":"self"}],"output":{"name":"tmfmt"}}],[11,"strftime","","Formats the time according to the format string.",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"rfc822","","Returns a TmFmt that outputs according to RFC 822.",1,{"inputs":[{"name":"self"}],"output":{"name":"tmfmt"}}],[11,"rfc822z","","Returns a TmFmt that outputs according to RFC 822 with Zulu time.",1,{"inputs":[{"name":"self"}],"output":{"name":"tmfmt"}}],[11,"rfc3339","","Returns a TmFmt that outputs according to RFC 3339. RFC 3339 is compatible with ISO 8601.",1,{"inputs":[{"name":"self"}],"output":{"name":"tmfmt"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"parseerror"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Timespec"],[3,"Tm"],[4,"ParseError"],[3,"TmFmt"],[3,"Duration"],[3,"OutOfRangeError"],[3,"PreciseTime"],[3,"SteadyTime"]]};
searchIndex["unicode_xid"] = {"doc":"Determine if a `char` is a valid identifier for a parser and/or lexer according to Unicode Standard Annex #31 rules.","items":[[17,"UNICODE_VERSION","unicode_xid","The version of Unicode that this version of unicode-xid is based on.",null,null],[8,"UnicodeXID","","Methods for determining if a character is a valid identifier character.",null,null],[10,"is_xid_start","","Returns whether the specified character satisfies the 'XID_Start' Unicode property.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_xid_continue","","Returns whether the specified `char` satisfies the 'XID_Continue' Unicode property.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}]],"paths":[[8,"UnicodeXID"]]};
initSearch(searchIndex);
